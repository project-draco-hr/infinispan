{
  if (c == null)   return;
switch (c.getCommandId()) {
case PutKeyValueCommand.COMMAND_ID:
    ((PutKeyValueCommand)c).init(notifier,configuration);
  break;
case ReplaceCommand.COMMAND_ID:
((ReplaceCommand)c).init(notifier,configuration);
break;
case PutMapCommand.COMMAND_ID:
((PutMapCommand)c).init(notifier);
break;
case RemoveCommand.COMMAND_ID:
((RemoveCommand)c).init(notifier,configuration);
break;
case SingleRpcCommand.COMMAND_ID:
SingleRpcCommand src=(SingleRpcCommand)c;
src.init(interceptorChain,icf);
if (src.getCommand() != null) initializeReplicableCommand(src.getCommand(),false);
break;
case InvalidateCommand.COMMAND_ID:
InvalidateCommand ic=(InvalidateCommand)c;
ic.init(notifier);
break;
case InvalidateL1Command.COMMAND_ID:
InvalidateL1Command ilc=(InvalidateL1Command)c;
ilc.init(distributionManager,notifier,dataContainer);
break;
case PrepareCommand.COMMAND_ID:
case VersionedPrepareCommand.COMMAND_ID:
case TotalOrderNonVersionedPrepareCommand.COMMAND_ID:
case TotalOrderVersionedPrepareCommand.COMMAND_ID:
PrepareCommand pc=(PrepareCommand)c;
pc.init(interceptorChain,icf,txTable);
pc.initialize(notifier,recoveryManager);
if (pc.getModifications() != null) for (ReplicableCommand nested : pc.getModifications()) {
initializeReplicableCommand(nested,false);
}
pc.markTransactionAsRemote(isRemote);
if (configuration.deadlockDetection().enabled() && isRemote) {
DldGlobalTransaction transaction=(DldGlobalTransaction)pc.getGlobalTransaction();
transaction.setLocksHeldAtOrigin(pc.getAffectedKeys());
}
break;
case CommitCommand.COMMAND_ID:
case VersionedCommitCommand.COMMAND_ID:
case TotalOrderCommitCommand.COMMAND_ID:
case TotalOrderVersionedCommitCommand.COMMAND_ID:
CommitCommand commitCommand=(CommitCommand)c;
commitCommand.init(interceptorChain,icf,txTable);
commitCommand.markTransactionAsRemote(isRemote);
break;
case RollbackCommand.COMMAND_ID:
case TotalOrderRollbackCommand.COMMAND_ID:
RollbackCommand rollbackCommand=(RollbackCommand)c;
rollbackCommand.init(interceptorChain,icf,txTable);
rollbackCommand.markTransactionAsRemote(isRemote);
break;
case ClearCommand.COMMAND_ID:
ClearCommand cc=(ClearCommand)c;
cc.init(notifier,dataContainer);
break;
case ClusteredGetCommand.COMMAND_ID:
ClusteredGetCommand clusteredGetCommand=(ClusteredGetCommand)c;
clusteredGetCommand.initialize(icf,this,entryFactory,interceptorChain,configuration.dataContainer().keyEquivalence());
break;
case LockControlCommand.COMMAND_ID:
LockControlCommand lcc=(LockControlCommand)c;
lcc.init(interceptorChain,icf,txTable);
lcc.markTransactionAsRemote(isRemote);
if (configuration.deadlockDetection().enabled() && isRemote) {
DldGlobalTransaction gtx=(DldGlobalTransaction)lcc.getGlobalTransaction();
RemoteTransaction transaction=txTable.getRemoteTransaction(gtx);
if (transaction != null) {
if (!configuration.clustering().cacheMode().isDistributed()) {
Set<Object> keys=txTable.getLockedKeysForRemoteTransaction(gtx);
GlobalTransaction gtx2=transaction.getGlobalTransaction();
((DldGlobalTransaction)gtx2).setLocksHeldAtOrigin(keys);
gtx.setLocksHeldAtOrigin(keys);
}
 else {
GlobalTransaction gtx2=transaction.getGlobalTransaction();
((DldGlobalTransaction)gtx2).setLocksHeldAtOrigin(gtx.getLocksHeldAtOrigin());
}
}
}
break;
case StateRequestCommand.COMMAND_ID:
((StateRequestCommand)c).init(stateProvider);
break;
case StateResponseCommand.COMMAND_ID:
((StateResponseCommand)c).init(stateConsumer);
break;
case GetInDoubtTransactionsCommand.COMMAND_ID:
GetInDoubtTransactionsCommand gptx=(GetInDoubtTransactionsCommand)c;
gptx.init(recoveryManager);
break;
case TxCompletionNotificationCommand.COMMAND_ID:
TxCompletionNotificationCommand ftx=(TxCompletionNotificationCommand)c;
ftx.init(txTable,lockManager,recoveryManager,stateTransferManager);
break;
case DistributedExecuteCommand.COMMAND_ID:
DistributedExecuteCommand dec=(DistributedExecuteCommand)c;
dec.init(cache);
break;
case GetInDoubtTxInfoCommand.COMMAND_ID:
GetInDoubtTxInfoCommand gidTxInfoCommand=(GetInDoubtTxInfoCommand)c;
gidTxInfoCommand.init(recoveryManager);
break;
case CompleteTransactionCommand.COMMAND_ID:
CompleteTransactionCommand ccc=(CompleteTransactionCommand)c;
ccc.init(recoveryManager);
break;
case ApplyDeltaCommand.COMMAND_ID:
break;
case CreateCacheCommand.COMMAND_ID:
CreateCacheCommand createCacheCommand=(CreateCacheCommand)c;
createCacheCommand.init(cache.getCacheManager());
break;
case XSiteAdminCommand.COMMAND_ID:
XSiteAdminCommand xSiteAdminCommand=(XSiteAdminCommand)c;
xSiteAdminCommand.init(backupSender);
break;
case CancelCommand.COMMAND_ID:
CancelCommand cancelCommand=(CancelCommand)c;
cancelCommand.init(cancellationService);
break;
case XSiteStateTransferControlCommand.COMMAND_ID:
XSiteStateTransferControlCommand xSiteStateTransferControlCommand=(XSiteStateTransferControlCommand)c;
xSiteStateTransferControlCommand.initialize(xSiteStateProvider,xSiteStateConsumer,xSiteStateTransferManager);
break;
case XSiteStatePushCommand.COMMAND_ID:
XSiteStatePushCommand xSiteStatePushCommand=(XSiteStatePushCommand)c;
xSiteStatePushCommand.initialize(xSiteStateConsumer);
break;
case GetKeysInGroupCommand.COMMAND_ID:
GetKeysInGroupCommand getKeysInGroupCommand=(GetKeysInGroupCommand)c;
getKeysInGroupCommand.setGroupManager(groupManager);
break;
case ClusteredGetAllCommand.COMMAND_ID:
ClusteredGetAllCommand clusteredGetAllCommand=(ClusteredGetAllCommand)c;
clusteredGetAllCommand.init(icf,this,entryFactory,interceptorChain,txTable,configuration.dataContainer().keyEquivalence());
break;
case StreamRequestCommand.COMMAND_ID:
StreamRequestCommand streamRequestCommand=(StreamRequestCommand)c;
streamRequestCommand.inject(localStreamManager);
break;
case StreamResponseCommand.COMMAND_ID:
StreamResponseCommand streamResponseCommand=(StreamResponseCommand)c;
streamResponseCommand.inject(clusterStreamManager);
break;
case StreamSegmentResponseCommand.COMMAND_ID:
StreamSegmentResponseCommand streamSegmentResponseCommand=(StreamSegmentResponseCommand)c;
streamSegmentResponseCommand.inject(clusterStreamManager);
break;
case RemoveExpiredCommand.COMMAND_ID:
RemoveExpiredCommand removeExpiredCommand=(RemoveExpiredCommand)c;
removeExpiredCommand.init(notifier,configuration);
break;
default :
ModuleCommandInitializer mci=moduleCommandInitializers.get(c.getCommandId());
if (mci != null) {
mci.initializeReplicableCommand(c,isRemote);
}
 else {
if (trace) log.tracef("Nothing to initialize for command: %s",c);
}
}
}
