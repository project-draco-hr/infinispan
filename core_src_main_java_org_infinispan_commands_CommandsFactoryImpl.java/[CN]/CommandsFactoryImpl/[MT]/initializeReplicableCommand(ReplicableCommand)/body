{
  if (c == null)   return;
switch (c.getCommandId()) {
case PutKeyValueCommand.COMMAND_ID:
    ((PutKeyValueCommand)c).init(notifier);
  break;
case PutMapCommand.COMMAND_ID:
((PutMapCommand)c).init(notifier);
break;
case RemoveCommand.COMMAND_ID:
((RemoveCommand)c).init(notifier);
break;
case MultipleRpcCommand.COMMAND_ID:
MultipleRpcCommand rc=(MultipleRpcCommand)c;
rc.setInterceptorChain(interceptorChain);
if (rc.getCommands() != null) for (ReplicableCommand nested : rc.getCommands()) {
initializeReplicableCommand(nested);
}
break;
case SingleRpcCommand.COMMAND_ID:
SingleRpcCommand src=(SingleRpcCommand)c;
src.setInterceptorChain(interceptorChain);
if (src.getCommand() != null) initializeReplicableCommand(src.getCommand());
break;
case InvalidateCommand.COMMAND_ID:
InvalidateCommand ic=(InvalidateCommand)c;
ic.init(notifier);
break;
case PrepareCommand.COMMAND_ID:
PrepareCommand pc=(PrepareCommand)c;
if (pc.getModifications() != null) for (ReplicableCommand nested : pc.getModifications()) initializeReplicableCommand(nested);
break;
case ClusteredGetCommand.COMMAND_ID:
ClusteredGetCommand clusteredGetCommand=(ClusteredGetCommand)c;
clusteredGetCommand.initialize(dataContainer,cacheLoaderManager);
break;
}
}
