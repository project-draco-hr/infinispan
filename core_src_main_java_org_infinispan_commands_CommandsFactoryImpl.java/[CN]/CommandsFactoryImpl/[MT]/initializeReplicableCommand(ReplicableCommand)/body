{
  if (c == null)   return;
switch (c.getCommandId()) {
case PutKeyValueCommand.COMMAND_ID:
    ((PutKeyValueCommand)c).init(notifier);
  break;
case PutMapCommand.COMMAND_ID:
((PutMapCommand)c).init(notifier);
break;
case RemoveCommand.COMMAND_ID:
((RemoveCommand)c).init(notifier);
break;
case MultipleRpcCommand.COMMAND_ID:
MultipleRpcCommand rc=(MultipleRpcCommand)c;
rc.init(interceptorChain,icc);
if (rc.getCommands() != null) for (ReplicableCommand nested : rc.getCommands()) {
initializeReplicableCommand(nested);
}
break;
case SingleRpcCommand.COMMAND_ID:
SingleRpcCommand src=(SingleRpcCommand)c;
src.init(interceptorChain,icc);
if (src.getCommand() != null) initializeReplicableCommand(src.getCommand());
break;
case InvalidateCommand.COMMAND_ID:
InvalidateCommand ic=(InvalidateCommand)c;
ic.init(notifier);
break;
case InvalidateL1Command.COMMAND_ID:
InvalidateL1Command ilc=(InvalidateL1Command)c;
ilc.init(distributionManager,notifier);
break;
case PrepareCommand.COMMAND_ID:
PrepareCommand pc=(PrepareCommand)c;
pc.init(interceptorChain,icc,txTable);
pc.initialize(notifier);
if (pc.getModifications() != null) for (ReplicableCommand nested : pc.getModifications()) initializeReplicableCommand(nested);
break;
case CommitCommand.COMMAND_ID:
CommitCommand commitCommand=(CommitCommand)c;
commitCommand.init(interceptorChain,icc,txTable);
break;
case RollbackCommand.COMMAND_ID:
RollbackCommand rollbackCommand=(RollbackCommand)c;
rollbackCommand.init(interceptorChain,icc,txTable);
break;
case ClearCommand.COMMAND_ID:
ClearCommand cc=(ClearCommand)c;
cc.init(notifier);
break;
case ClusteredGetCommand.COMMAND_ID:
ClusteredGetCommand clusteredGetCommand=(ClusteredGetCommand)c;
clusteredGetCommand.initialize(dataContainer,icc,this,interceptorChain);
break;
case LockControlCommand.COMMAND_ID:
LockControlCommand lcc=(LockControlCommand)c;
lcc.init(interceptorChain,icc,txTable);
break;
case RehashControlCommand.COMMAND_ID:
RehashControlCommand rcc=(RehashControlCommand)c;
rcc.init(distributionManager,configuration,dataContainer);
break;
}
}
