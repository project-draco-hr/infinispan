{
  Map<Address,Set<Integer>> targets=determineTargets(ch,segments);
  UUID uuid=UUID.randomUUID();
  if (!targets.isEmpty()) {
    log.tracef("Performing remote operations %s for id %s",targets,uuid);
    RequestTracker<R> tracker=new RequestTracker<>(callback,targets,earlyTerminatePredicate);
    currentlyRunning.put(uuid,tracker);
    if (parallelDistribution) {
      submitAsyncTasks(uuid,targets,keysToExclude,parallelStream,keysToInclude,includeLoader,type,operation);
    }
 else {
      for (      Map.Entry<Address,Set<Integer>> targetInfo : targets.entrySet()) {
        Set<Integer> targetSegments=targetInfo.getValue();
        Set<K> keysExcluded=determineExcludedKeys(keysToExclude,targetSegments);
        rpc.invokeRemotely(Collections.singleton(targetInfo.getKey()),factory.buildStreamRequestCommand(uuid,parallelStream,type,targetSegments,keysToInclude,keysExcluded,includeLoader,operation),rpc.getDefaultRpcOptions(true));
      }
    }
  }
 else {
    log.tracef("Not performing any remote operations for id %s as no valid targets found",uuid);
  }
  return uuid;
}
