{
  Map<Address,Set<Integer>> targets=determineTargets(ch,segments);
  String id;
  if (!targets.isEmpty()) {
    id=localAddress.toString() + requestId.getAndIncrement();
    log.tracef("Performing remote operations %s for id %s",targets,id);
    RequestTracker<R> tracker=new RequestTracker<>(callback,targets,earlyTerminatePredicate);
    currentlyRunning.put(id,tracker);
    if (parallelDistribution) {
      submitAsyncTasks(id,targets,keysToExclude,parallelStream,keysToInclude,includeLoader,type,operation);
    }
 else {
      for (      Map.Entry<Address,Set<Integer>> targetInfo : targets.entrySet()) {
        Set<Integer> targetSegments=targetInfo.getValue();
        Set<K> keysExcluded=determineExcludedKeys(keysToExclude,targetSegments);
        rpc.invokeRemotely(Collections.singleton(targetInfo.getKey()),factory.buildStreamRequestCommand(id,parallelStream,type,targetSegments,keysToInclude,keysExcluded,includeLoader,operation),rpc.getDefaultRpcOptions(true));
      }
    }
  }
 else {
    log.tracef("Not performing remote operation for request as no valid targets found");
    id=null;
  }
  return id;
}
