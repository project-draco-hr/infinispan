{
  Stats cacheStats=ctx.cache.getStats();
  Map<String,String> stats=new HashMap<>();
  stats.put("timeSinceStart",String.valueOf(cacheStats.getTimeSinceStart()));
  stats.put("currentNumberOfEntries",String.valueOf(cacheStats.getCurrentNumberOfEntries()));
  stats.put("totalNumberOfEntries",String.valueOf(cacheStats.getTotalNumberOfEntries()));
  stats.put("stores",String.valueOf(cacheStats.getStores()));
  stats.put("retrievals",String.valueOf(cacheStats.getRetrievals()));
  stats.put("hits",String.valueOf(cacheStats.getHits()));
  stats.put("misses",String.valueOf(cacheStats.getMisses()));
  stats.put("removeHits",String.valueOf(cacheStats.getRemoveHits()));
  stats.put("removeMisses",String.valueOf(cacheStats.getRemoveMisses()));
  stats.put("totalBytesRead",t.getTotalBytesRead());
  stats.put("totalBytesWritten",t.getTotalBytesWritten());
  HotRodHeader h=ctx.header;
  if (!Constants.isVersionPre24(h.version)) {
    ComponentRegistry registry=ctx.getCacheRegistry(h.cacheName);
    ClusterCacheStats clusterCacheStats=registry.getComponent(ClusterCacheStats.class);
    if (clusterCacheStats != null) {
      stats.put("globalCurrentNumberOfEntries",String.valueOf(clusterCacheStats.getCurrentNumberOfEntries()));
      stats.put("globalStores",String.valueOf(clusterCacheStats.getStores()));
      stats.put("globalRetrievals",String.valueOf(clusterCacheStats.getRetrievals()));
      stats.put("globalHits",String.valueOf(clusterCacheStats.getHits()));
      stats.put("globalMisses",String.valueOf(clusterCacheStats.getMisses()));
      stats.put("globalRemoveHits",String.valueOf(clusterCacheStats.getRemoveHits()));
      stats.put("globalRemoveMisses",String.valueOf(clusterCacheStats.getRemoveMisses()));
    }
  }
  return new StatsResponse(h.version,h.messageId,h.cacheName,h.clientIntel,stats,h.topologyId);
}
