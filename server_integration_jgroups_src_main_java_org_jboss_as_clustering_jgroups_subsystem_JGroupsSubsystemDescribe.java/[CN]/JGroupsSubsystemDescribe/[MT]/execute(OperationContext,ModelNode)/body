{
  final ModelNode result=new ModelNode();
  final PathAddress rootAddress=PathAddress.pathAddress(PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement());
  final ModelNode subModel=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  result.add(JGroupsSubsystemAdd.createOperation(rootAddress.toModelNode(),subModel));
  if (subModel.hasDefined(ModelKeys.STACK)) {
    for (    final Property stack : subModel.get(ModelKeys.STACK).asPropertyList()) {
      final ModelNode stackAddress=rootAddress.toModelNode();
      stackAddress.add(ModelKeys.STACK,stack.getName());
      result.add(ProtocolStackAdd.createOperation(stackAddress,stack.getValue()));
      if (stack.getValue().get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME).isDefined()) {
        ModelNode transport=stack.getValue().get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
        ModelNode transportAddress=stackAddress.clone();
        transportAddress.add(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
        result.add(createOperation(TransportResourceDefinition.TRANSPORT_ATTRIBUTES,transportAddress,transport));
        addProtocolPropertyCommands(transport,transportAddress,result);
      }
      if (stack.getValue().get(ModelKeys.PROTOCOL).isDefined()) {
        for (        Property protocol : ProtocolStackAdd.getOrderedProtocolPropertyList(stack.getValue())) {
          result.add(createProtocolOperation(ProtocolResourceDefinition.PROTOCOL_ATTRIBUTES,stackAddress,protocol.getValue()));
          ModelNode protocolAddress=stackAddress.clone();
          protocolAddress.add(ModelKeys.PROTOCOL,protocol.getName());
          addProtocolPropertyCommands(protocol.getValue(),protocolAddress,result);
        }
      }
      if (stack.getValue().get(ModelKeys.RELAY,ModelKeys.RELAY_NAME).isDefined()) {
        ModelNode relay=stack.getValue().get(ModelKeys.RELAY,ModelKeys.RELAY_NAME);
        ModelNode relayAddress=stackAddress.clone();
        relayAddress.add(ModelKeys.RELAY,ModelKeys.RELAY_NAME);
        result.add(createOperation(RelayResourceDefinition.ATTRIBUTES,relayAddress,relay));
        addProtocolPropertyCommands(relay,relayAddress,result);
        if (relay.get(ModelKeys.REMOTE_SITE).isDefined()) {
          for (          final Property remoteSite : relay.get(ModelKeys.REMOTE_SITE).asPropertyList()) {
            ModelNode remoteSiteAddress=relayAddress.clone().add(ModelKeys.REMOTE_SITE,remoteSite.getName());
            result.add(createOperation(RemoteSiteResourceDefinition.ATTRIBUTES,remoteSiteAddress,remoteSite.getValue()));
          }
        }
      }
      if (stack.getValue().get(ModelKeys.SASL,ModelKeys.SASL_NAME).isDefined()) {
        ModelNode sasl=stack.getValue().get(ModelKeys.SASL,ModelKeys.SASL_NAME);
        ModelNode saslAddress=stackAddress.clone();
        saslAddress.add(ModelKeys.SASL,ModelKeys.SASL_NAME);
        result.add(createOperation(SaslResourceDefinition.ATTRIBUTES,saslAddress,sasl));
        addProtocolPropertyCommands(sasl,saslAddress,result);
      }
    }
  }
  context.getResult().set(result);
  context.stepCompleted();
}
