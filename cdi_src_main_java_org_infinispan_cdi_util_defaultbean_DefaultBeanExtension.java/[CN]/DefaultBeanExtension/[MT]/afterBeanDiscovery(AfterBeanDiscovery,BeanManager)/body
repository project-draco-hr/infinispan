{
  beanDiscoveryOver=true;
  Map<DefaultBeanType,Bean<?>> duplicateDetectionMap=new HashMap<DefaultBeanType,Bean<?>>();
  for (  Entry<Synthetic,DefaultBeanType> e : beanTypeInformation.entrySet()) {
    Bean<?> bean=defaultManagedBeans.get(e.getKey());
    if (bean == null) {
      bean=defaultProducerMethods.get(e.getKey());
    }
    if (bean == null) {
      bean=defaultProducerFields.get(e.getKey());
    }
    if (duplicateDetectionMap.containsKey(e.getValue())) {
      Bean<?> other=duplicateDetectionMap.get(e.getValue());
      deploymentProblems.add(new RuntimeException("Two default beans with the same type and qualifiers: Type: " + e.getValue().getType() + " Qualifiers: "+ e.getValue().getQualifiers()+ " Beans are "+ other.toString()+ " and "+ bean.toString()));
    }
    duplicateDetectionMap.put(e.getValue(),bean);
  }
  if (beanTypeInformation.size() > 0) {
    for (    Bean<?> processedBean : processedBeans) {
      Iterator<Entry<Synthetic,DefaultBeanType>> it=beanTypeInformation.entrySet().iterator();
      while (it.hasNext()) {
        Entry<Synthetic,DefaultBeanType> definition=it.next();
        if (definition.getValue().matches(processedBean)) {
          Synthetic qual=definition.getKey();
          Bean<?> bean=null;
          bean=defaultManagedBeans.remove(qual);
          if (bean == null) {
            bean=defaultProducerMethods.remove(qual);
          }
          if (bean == null) {
            bean=defaultProducerFields.remove(qual);
          }
          log.info("Preventing install of default bean " + bean);
          it.remove();
        }
      }
    }
  }
  Set<Synthetic> allDefaultBeanQualifiers=new HashSet<Synthetic>(defaultManagedBeans.keySet());
  allDefaultBeanQualifiers.addAll(defaultProducerFields.keySet());
  allDefaultBeanQualifiers.addAll(defaultProducerMethods.keySet());
  for (  Synthetic qual : allDefaultBeanQualifiers) {
    final DefaultBeanType beanInfo=beanTypeInformation.get(qual);
    final HashSet<Type> types=new HashSet<Type>();
    types.add(Object.class);
    types.add(beanInfo.getType());
    final Set<Annotation> qualifiers=new HashSet<Annotation>(beanInfo.getQualifiers());
    if (defaultManagedBeans.containsKey(qual)) {
      Bean<?> db=DefaultManagedBean.of(defaultManagedBeans.get(qual),beanInfo.getType(),types,qualifiers,manager);
      log.debug("Installing default managed bean " + db);
      event.addBean(db);
      fireBeanInstalledEvent(db,manager);
    }
 else     if (defaultProducerMethods.containsKey(qual)) {
      Synthetic declaringDefaultBean=this.producerToDeclaringDefaultBean.get(qual).getSyntheticQualifier();
      Set<Annotation> declaringBeanQualifiers;
      if (declaringDefaultBean != null && !beanTypeInformation.containsKey(declaringDefaultBean)) {
        declaringBeanQualifiers=Collections.singleton((Annotation)declaringDefaultBean);
      }
 else {
        declaringBeanQualifiers=this.producerToDeclaringDefaultBean.get(qual).getQualifiers();
      }
      DefaultProducerMethodInfo<?> info=producerAnnotatedMethods.get(qual);
      Bean<?> db=createDefaultProducerMethod(defaultProducerMethods.get(qual),qual,beanInfo,types,qualifiers,declaringBeanQualifiers,info,manager);
      log.debug("Installing default producer bean " + db);
      event.addBean(db);
      fireBeanInstalledEvent(db,manager);
    }
 else     if (defaultProducerFields.containsKey(qual)) {
      Synthetic declaringDefaultBean=this.producerToDeclaringDefaultBean.get(qual).getSyntheticQualifier();
      Set<Annotation> declaringBeanQualifiers;
      if (declaringDefaultBean != null && !beanTypeInformation.containsKey(declaringDefaultBean)) {
        declaringBeanQualifiers=Collections.singleton((Annotation)declaringDefaultBean);
      }
 else {
        declaringBeanQualifiers=this.producerToDeclaringDefaultBean.get(qual).getQualifiers();
      }
      Bean<?> db=DefaultProducerField.of(defaultProducerFields.get(qual),beanInfo.getType(),types,qualifiers,declaringBeanQualifiers,producerAnnotatedFields.get(qual),manager);
      log.debug("Installing default producer bean " + db);
      event.addBean(db);
      fireBeanInstalledEvent(db,manager);
    }
  }
  for (  Throwable e : deploymentProblems) {
    event.addDefinitionError(e);
  }
}
