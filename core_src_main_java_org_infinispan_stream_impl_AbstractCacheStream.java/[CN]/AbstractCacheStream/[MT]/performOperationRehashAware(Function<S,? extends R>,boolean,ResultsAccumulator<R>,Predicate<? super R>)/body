{
  Set<Integer> segmentsToProcess=segmentsToFilter;
  TerminalOperation<R> op;
  do {
    ConsistentHash ch=dm.getReadConsistentHash();
    if (retryOnRehash) {
      op=new SegmentRetryingOperation<>(intermediateOperations,supplierForSegments(ch,segmentsToProcess,null),function);
    }
 else {
      op=new SingleRunOperation<>(intermediateOperations,supplierForSegments(ch,segmentsToProcess,null),function);
    }
    Object id=csm.remoteStreamOperationRehashAware(getParallelDistribution(),parallel,ch,segmentsToProcess,keysToFilter,Collections.emptyMap(),includeLoader,op,remoteResults,earlyTerminatePredicate);
    try {
      R localValue;
      boolean localRun=ch.getMembers().contains(localAddress);
      if (localRun) {
        localValue=op.performOperation();
        if (dm.getReadConsistentHash().equals(ch)) {
          Set<Integer> ourSegments=ch.getPrimarySegmentsForOwner(localAddress);
          if (segmentsToProcess != null) {
            ourSegments.retainAll(segmentsToProcess);
          }
          remoteResults.onCompletion(null,ourSegments,localValue);
        }
 else {
          if (segmentsToProcess != null) {
            Set<Integer> ourSegments=ch.getPrimarySegmentsForOwner(localAddress);
            ourSegments.retainAll(segmentsToProcess);
            remoteResults.onSegmentsLost(ourSegments);
          }
 else {
            remoteResults.onSegmentsLost(ch.getPrimarySegmentsForOwner(localAddress));
          }
        }
      }
 else {
        localValue=null;
      }
      if (id != null) {
        try {
          if ((!localRun || earlyTerminatePredicate == null || !earlyTerminatePredicate.test(localValue)) && !csm.awaitCompletion(id,timeout,timeoutUnit)) {
            throw new TimeoutException();
          }
        }
 catch (        InterruptedException e) {
          throw new CacheException(e);
        }
      }
      if (!remoteResults.lostSegments.isEmpty()) {
        segmentsToProcess=new HashSet<>(remoteResults.lostSegments);
        remoteResults.lostSegments.clear();
        log.tracef("Found %s lost segments for identifier %s",segmentsToProcess,id);
      }
 else {
        if (segmentsToProcess != null) {
          segmentsToProcess=null;
        }
        log.tracef("Finished rehash aware operation for id %s",id);
      }
    }
  finally {
      csm.forgetOperation(id);
    }
  }
 while (segmentsToProcess != null && !segmentsToProcess.isEmpty());
  return remoteResults.currentValue;
}
