{
  final Cache<MagicKey,String> cache0=cache(0,CACHE_NAME);
  Cache<MagicKey,String> cache1=cache(1,CACHE_NAME);
  Cache<MagicKey,String> cache2=cache(2,CACHE_NAME);
  Map<MagicKey,String> originalValues=new HashMap<MagicKey,String>();
  originalValues.put(new MagicKey(cache0),"cache0");
  originalValues.put(new MagicKey(cache1),"cache1");
  originalValues.put(new MagicKey(cache2),"cache2");
  final MagicKey loaderKey=new MagicKey(cache0);
  final String loaderValue="loader0";
  cache0.putAll(originalValues);
  originalValues.put(loaderKey,loaderValue);
  PersistenceManager persistenceManager=TestingUtil.extractComponent(cache0,PersistenceManager.class);
  DummyInMemoryStore store=persistenceManager.getStores(DummyInMemoryStore.class).iterator().next();
  TestObjectStreamMarshaller sm=new TestObjectStreamMarshaller();
  PersistenceManager pm=null;
  try {
    store.write(new MarshalledEntryImpl(loaderKey,loaderValue,null,sm));
    final CheckPoint checkPoint=new CheckPoint();
    pm=waitUntilAboutToProcessStoreTask(cache0,checkPoint);
    Future<Void> future=fork(new Callable<Void>(){
      @Override public Void call() throws Exception {
        checkPoint.awaitStrict("pre_process_on_all_stores_invoked",10,TimeUnit.SECONDS);
        assertEquals(loaderValue,cache0.get(loaderKey));
        checkPoint.triggerForever("pre_process_on_all_stores_released");
        return null;
      }
    }
);
    EntryRetriever<MagicKey,String> retriever=cache1.getAdvancedCache().getComponentRegistry().getComponent(EntryRetriever.class);
    Iterator<CacheEntry<MagicKey,String>> iterator=retriever.retrieveEntries(null,new StringTruncator(1,3),null,null);
    int count=0;
    Map<MagicKey,String> results=new HashMap<MagicKey,String>();
    while (iterator.hasNext()) {
      Map.Entry<MagicKey,String> entry=iterator.next();
      results.put(entry.getKey(),entry.getValue());
      count++;
    }
    assertEquals(count,4);
    for (    Map.Entry<MagicKey,String> entry : originalValues.entrySet()) {
      assertEquals(entry.getValue().substring(1,4),results.get(entry.getKey()));
    }
    future.get(10,TimeUnit.SECONDS);
  }
  finally {
    if (pm != null) {
      TestingUtil.replaceComponent(cache0,PersistenceManager.class,pm,true);
    }
    sm.stop();
  }
}
