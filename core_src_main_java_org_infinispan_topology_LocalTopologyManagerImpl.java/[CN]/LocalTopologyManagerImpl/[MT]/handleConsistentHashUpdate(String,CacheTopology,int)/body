{
  if (!running) {
    log.debugf("Ignoring consistent hash update %s for cache %s, the local cache manager is not running",cacheTopology.getTopologyId(),cacheName);
    return;
  }
  waitForView(viewId);
  LocalCacheStatus cacheStatus=runningCaches.get(cacheName);
  if (cacheStatus == null) {
    log.tracef("Ignoring consistent hash update %s for cache %s that doesn't exist locally",cacheTopology.getTopologyId(),cacheName);
    return;
  }
synchronized (cacheStatus) {
    CacheTopology existingTopology=cacheStatus.getTopology();
    if (existingTopology != null && cacheTopology.getTopologyId() < existingTopology.getTopologyId()) {
      log.tracef("Ignoring consistent hash update %s for cache %s, we have already received a newer topology %s",cacheTopology.getTopologyId(),cacheName,existingTopology.getTopologyId());
      return;
    }
    log.debugf("Updating local consistent hash(es) for cache %s: new topology = %s",cacheName,cacheTopology);
    cacheStatus.setTopology(cacheTopology);
    ConsistentHash unionCH=null;
    if (cacheTopology.getPendingCH() != null) {
      unionCH=cacheStatus.getJoinInfo().getConsistentHashFactory().union(cacheTopology.getCurrentCH(),cacheTopology.getPendingCH());
    }
    CacheTopologyHandler handler=cacheStatus.getHandler();
    CacheTopology unionTopology=new CacheTopology(cacheTopology.getTopologyId(),cacheTopology.getCurrentCH(),unionCH);
    unionTopology.logRoutingTableInformation();
    if ((existingTopology == null || existingTopology.getPendingCH() == null) && unionCH != null) {
      log.tracef("This topology update has a pending CH, starting the rebalance now");
      handler.rebalance(unionTopology);
    }
 else {
      handler.updateConsistentHash(unionTopology);
    }
  }
}
