{
  try {
    waitForView(viewId);
  }
 catch (  InterruptedException e) {
    return;
  }
synchronized (cacheStatus) {
    if (cacheTopology == null) {
      return;
    }
    registerPersistentUUID(cacheTopology);
    CacheTopology existingTopology=cacheStatus.getCurrentTopology();
    if (existingTopology != null && cacheTopology.getTopologyId() <= existingTopology.getTopologyId()) {
      log.debugf("Ignoring late consistent hash update for cache %s, current topology is %s: %s",cacheName,existingTopology.getTopologyId(),cacheTopology);
      return;
    }
    CacheTopologyHandler handler=cacheStatus.getHandler();
    resetLocalTopologyBeforeRebalance(cacheName,cacheTopology,existingTopology,handler);
    if (!updateCacheTopology(cacheName,cacheTopology,viewId,sender,cacheStatus))     return;
    ConsistentHash unionCH=null;
    if (cacheTopology.getPendingCH() != null) {
      unionCH=cacheStatus.getJoinInfo().getConsistentHashFactory().union(cacheTopology.getCurrentCH(),cacheTopology.getPendingCH());
    }
    CacheTopology unionTopology=new CacheTopology(cacheTopology.getTopologyId(),cacheTopology.getRebalanceId(),cacheTopology.getCurrentCH(),cacheTopology.getPendingCH(),unionCH,cacheTopology.getActualMembers(),persistentUUIDManager.mapAddresses(cacheTopology.getActualMembers()));
    unionTopology.logRoutingTableInformation();
    boolean updateAvailabilityModeFirst=availabilityMode != AvailabilityMode.AVAILABLE;
    if (updateAvailabilityModeFirst && availabilityMode != null) {
      cacheStatus.getPartitionHandlingManager().setAvailabilityMode(availabilityMode);
    }
    if ((existingTopology == null || existingTopology.getRebalanceId() != cacheTopology.getRebalanceId()) && unionCH != null) {
      log.tracef("This topology update has a pending CH, starting the rebalance now");
      handler.rebalance(unionTopology);
    }
 else {
      handler.updateConsistentHash(unionTopology);
    }
    if (!updateAvailabilityModeFirst) {
      cacheStatus.getPartitionHandlingManager().setAvailabilityMode(availabilityMode);
    }
  }
}
