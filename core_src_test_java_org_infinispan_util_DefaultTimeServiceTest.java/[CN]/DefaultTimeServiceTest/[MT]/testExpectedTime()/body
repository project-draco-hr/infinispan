{
  TimeService timeService=new DefaultTimeService(){
    @Override public long time(){
      return 10;
    }
    @Override public long wallClockTime(){
      return 10;
    }
  }
;
  assertEquals(timeService.expectedEndTime(-1,TimeUnit.NANOSECONDS),10);
  assertEquals(timeService.expectedEndTime(0,TimeUnit.NANOSECONDS),10);
  assertEquals(timeService.expectedEndTime(1,TimeUnit.NANOSECONDS),11);
  assertEquals(timeService.expectedEndTime(9,TimeUnit.NANOSECONDS),19);
  assertEquals(timeService.expectedEndTime(10,TimeUnit.NANOSECONDS),20);
  assertEquals(timeService.expectedEndTime(11,TimeUnit.NANOSECONDS),21);
  assertEquals(timeService.expectedEndTime(11,TimeUnit.MICROSECONDS),11010);
  assertEquals(timeService.expectedEndTime(11,TimeUnit.MILLISECONDS),11000010);
}
