{
  TimeService timeService=new DefaultTimeService(){
    @Override public long time(){
      return 10;
    }
    @Override public long wallClockTime(){
      return 10;
    }
  }
;
  assertEquals(timeService.timeDuration(0,TimeUnit.NANOSECONDS),10);
  assertEquals(timeService.timeDuration(-1,TimeUnit.NANOSECONDS),11);
  assertEquals(timeService.timeDuration(10,TimeUnit.NANOSECONDS),0);
  assertEquals(timeService.timeDuration(11,TimeUnit.NANOSECONDS),0);
  assertEquals(timeService.timeDuration(9,TimeUnit.NANOSECONDS),1);
  assertEquals(timeService.timeDuration(9,TimeUnit.MICROSECONDS),0);
  assertEquals(timeService.timeDuration(9,TimeUnit.MILLISECONDS),0);
  assertEquals(timeService.timeDuration(0,1,TimeUnit.NANOSECONDS),1);
  assertEquals(timeService.timeDuration(0,-1,TimeUnit.NANOSECONDS),0);
  assertEquals(timeService.timeDuration(1,0,TimeUnit.NANOSECONDS),0);
  assertEquals(timeService.timeDuration(1,-1,TimeUnit.NANOSECONDS),0);
  assertEquals(timeService.timeDuration(-1,-1,TimeUnit.NANOSECONDS),0);
  assertEquals(timeService.timeDuration(0,0,TimeUnit.NANOSECONDS),0);
  assertEquals(timeService.timeDuration(0,1000,TimeUnit.MICROSECONDS),1);
  assertEquals(timeService.timeDuration(0,1000000,TimeUnit.MILLISECONDS),1);
}
