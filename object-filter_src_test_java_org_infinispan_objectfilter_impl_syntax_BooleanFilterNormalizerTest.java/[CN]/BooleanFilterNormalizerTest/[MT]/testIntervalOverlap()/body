{
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age = 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age != 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age < 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age <= 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age >= 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age > 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age = 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age != 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age < 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age <= 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age >= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age > 20","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age = 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age != 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age < 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age <= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age >= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age > 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age = 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age != 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age < 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age <= 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age >= 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age > 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age = 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age != 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age < 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age <= 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age >= 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age > 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age = 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age != 20","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age < 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age <= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age >= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age > 20","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age = 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age != 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age < 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age <= 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age >= 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age > 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age = 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age != 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age < 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age <= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age >= 20","OR(NOT_EQUAL(PROP(age), CONST(20)), GREATER_OR_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age > 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age = 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age != 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age < 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age <= 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age >= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age > 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age = 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age != 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age < 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age <= 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age >= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age > 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age = 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age != 20","OR(GREATER_OR_EQUAL(PROP(age), CONST(20)), NOT_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age < 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age <= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age >= 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age > 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age = 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age != 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age < 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age <= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age >= 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age > 20","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age = 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age != 30","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age < 30","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age <= 30","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age >= 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 and age > 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age = 30","EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age != 30","AND(NOT_EQUAL(PROP(age), CONST(20)), NOT_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age < 30","AND(NOT_EQUAL(PROP(age), CONST(20)), LESS(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age <= 30","AND(NOT_EQUAL(PROP(age), CONST(20)), LESS_OR_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age >= 30","GREATER_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 and age > 30","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age = 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age != 30","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age < 30","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age <= 30","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age >= 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 and age > 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age = 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age != 30","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age < 30","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age <= 30","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age >= 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 and age > 30","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age = 30","EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age != 30","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age < 30","AND(GREATER_OR_EQUAL(PROP(age), CONST(20)), LESS(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age <= 30","AND(GREATER_OR_EQUAL(PROP(age), CONST(20)), LESS_OR_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age >= 30","GREATER_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 and age > 30","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age = 30","EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age != 30","AND(GREATER(PROP(age), CONST(20)), NOT_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age < 30","AND(GREATER(PROP(age), CONST(20)), LESS(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age <= 30","AND(GREATER(PROP(age), CONST(20)), LESS_OR_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age >= 30","GREATER_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 and age > 30","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age = 30","OR(EQUAL(PROP(age), CONST(20)), EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age != 30","OR(EQUAL(PROP(age), CONST(20)), NOT_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age < 30","LESS(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age <= 30","LESS_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age >= 30","OR(EQUAL(PROP(age), CONST(20)), GREATER_OR_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 20 or age > 30","OR(EQUAL(PROP(age), CONST(20)), GREATER(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age = 30","OR(NOT_EQUAL(PROP(age), CONST(20)), EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age != 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age < 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age <= 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age >= 30","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 20 or age > 30","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age = 30","OR(LESS(PROP(age), CONST(20)), EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age != 30","NOT_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age < 30","LESS(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age <= 30","LESS_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age >= 30","OR(LESS(PROP(age), CONST(20)), GREATER_OR_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 20 or age > 30","OR(LESS(PROP(age), CONST(20)), GREATER(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age = 30","OR(LESS_OR_EQUAL(PROP(age), CONST(20)), EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age != 30","NOT_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age < 30","LESS(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age <= 30","LESS_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age >= 30","OR(LESS_OR_EQUAL(PROP(age), CONST(20)), GREATER_OR_EQUAL(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 20 or age > 30","OR(LESS_OR_EQUAL(PROP(age), CONST(20)), GREATER(PROP(age), CONST(30)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age = 30","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age != 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age < 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age <= 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age >= 30","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 20 or age > 30","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age = 30","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age != 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age < 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age <= 30","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age >= 30","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 20 or age > 30","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 and age = 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 and age != 20","EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 and age < 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 and age <= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 and age >= 20","EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 and age > 20","EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 and age = 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 and age != 20","AND(NOT_EQUAL(PROP(age), CONST(30)), NOT_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 and age < 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 and age <= 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 and age >= 20","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 and age > 20","AND(NOT_EQUAL(PROP(age), CONST(30)), GREATER(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 and age = 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 and age != 20","AND(LESS(PROP(age), CONST(30)), NOT_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 and age < 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 and age <= 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 and age >= 20","AND(LESS(PROP(age), CONST(30)), GREATER_OR_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 and age > 20","AND(LESS(PROP(age), CONST(30)), GREATER(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 and age = 20","EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 and age != 20","AND(LESS_OR_EQUAL(PROP(age), CONST(30)), NOT_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 and age < 20","LESS(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 and age <= 20","LESS_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 and age >= 20","AND(LESS_OR_EQUAL(PROP(age), CONST(30)), GREATER_OR_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 and age > 20","AND(LESS_OR_EQUAL(PROP(age), CONST(30)), GREATER(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 and age = 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 and age != 20","GREATER_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 and age < 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 and age <= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 and age >= 20","GREATER_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 and age > 20","GREATER_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 and age = 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 and age != 20","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 and age < 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 and age <= 20","CONST_FALSE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 and age >= 20","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 and age > 20","GREATER(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 or age = 20","OR(EQUAL(PROP(age), CONST(30)), EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 or age != 20","OR(EQUAL(PROP(age), CONST(30)), NOT_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 or age < 20","OR(EQUAL(PROP(age), CONST(30)), LESS(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 or age <= 20","OR(EQUAL(PROP(age), CONST(30)), LESS_OR_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 or age >= 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age = 30 or age > 20","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 or age = 20","OR(NOT_EQUAL(PROP(age), CONST(30)), EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 or age != 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 or age < 20","NOT_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 or age <= 20","NOT_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 or age >= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age != 30 or age > 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 or age = 20","LESS(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 or age != 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 or age < 20","LESS(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 or age <= 20","LESS(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 or age >= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age < 30 or age > 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 or age = 20","LESS_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 or age != 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 or age < 20","LESS_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 or age <= 20","LESS_OR_EQUAL(PROP(age), CONST(30))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 or age >= 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age <= 30 or age > 20","CONST_TRUE");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 or age = 20","OR(GREATER_OR_EQUAL(PROP(age), CONST(30)), EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 or age != 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 or age < 20","OR(GREATER_OR_EQUAL(PROP(age), CONST(30)), LESS(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 or age <= 20","OR(GREATER_OR_EQUAL(PROP(age), CONST(30)), LESS_OR_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 or age >= 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age >= 30 or age > 20","GREATER(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 or age = 20","OR(GREATER(PROP(age), CONST(30)), EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 or age != 20","NOT_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 or age < 20","OR(GREATER(PROP(age), CONST(30)), LESS(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 or age <= 20","OR(GREATER(PROP(age), CONST(30)), LESS_OR_EQUAL(PROP(age), CONST(20)))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 or age >= 20","GREATER_OR_EQUAL(PROP(age), CONST(20))");
  assertExpectedTree("from org.infinispan.objectfilter.test.model.Person where age > 30 or age > 20","GREATER(PROP(age), CONST(20))");
}
