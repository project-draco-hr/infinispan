{
  List<BENode> nodes=new ArrayList<>();
  List<Integer> treeCounters=new ArrayList<>();
  if (booleanExpr == null) {
    treeCounters.add(BETree.EXPR_TRUE);
  }
 else   if (booleanExpr instanceof ConstantBooleanExpr) {
    treeCounters.add(((ConstantBooleanExpr)booleanExpr).getValue() ? BETree.EXPR_TRUE : BETree.EXPR_FALSE);
  }
 else {
    preorderTraversal(null,booleanExpr,nodes,treeCounters);
  }
  int[] countersArray=new int[treeCounters.size()];
  for (int i=0; i < countersArray.length; i++) {
    countersArray[i]=treeCounters.get(i);
  }
  return new BETree(nodes.toArray(new BENode[nodes.size()]),countersArray);
}
