{
  BoundedEquivalentConcurrentHashMapV8<String,String> map=createMap(3,Eviction.LIRS);
  map.put("B","B");
  map.put("deleteme","deleteme");
  map.put("D","D");
  map.remove("deleteme");
  map.put("A","A");
  map.put("E","E");
  LIRSEvictionPolicy<String,String> policy=(LIRSEvictionPolicy<String,String>)map.evictionPolicy;
  verifyQueueContents(map,policy.queue.new Itr(),"E");
{
    Iterator<DequeNode<LIRSNode<String,String>>> stackItr=policy.stack.new Itr();
    assertTrue(stackItr.hasNext());
    DequeNode<LIRSNode<String,String>> node=stackItr.next();
    assertEquals(Recency.LIR_RESIDENT,node.item.state);
    assertEquals("B",node.item.key);
    assertEquals("B",map.innerPeek(node.item.key));
    assertTrue(stackItr.hasNext());
    node=stackItr.next();
    assertEquals(Recency.HIR_NONRESIDENT,node.item.state);
    assertEquals("D",node.item.key);
    assertEquals(BoundedEquivalentConcurrentHashMapV8.NULL_VALUE,map.innerPeek(node.item.key));
    assertTrue(stackItr.hasNext());
    node=stackItr.next();
    assertEquals(Recency.LIR_RESIDENT,node.item.state);
    assertEquals("A",node.item.key);
    assertEquals("A",map.innerPeek(node.item.key));
    assertTrue(stackItr.hasNext());
    node=stackItr.next();
    assertEquals(Recency.HIR_RESIDENT,node.item.state);
    assertEquals("E",node.item.key);
    assertEquals("E",map.innerPeek(node.item.key));
    assertFalse(stackItr.hasNext());
  }
  assertEquals(3,map.size());
  return map;
}
