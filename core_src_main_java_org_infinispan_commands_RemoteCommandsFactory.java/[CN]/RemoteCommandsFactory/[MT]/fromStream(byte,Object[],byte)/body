{
  ReplicableCommand command;
  if (type == 0) {
switch (id) {
case PutKeyValueCommand.COMMAND_ID:
      command=new PutKeyValueCommand();
    break;
case PutMapCommand.COMMAND_ID:
  command=new PutMapCommand();
break;
case RemoveCommand.COMMAND_ID:
command=new RemoveCommand();
break;
case ReplaceCommand.COMMAND_ID:
command=new ReplaceCommand();
break;
case GetKeyValueCommand.COMMAND_ID:
command=new GetKeyValueCommand();
break;
case ClearCommand.COMMAND_ID:
command=new ClearCommand();
break;
case InvalidateCommand.COMMAND_ID:
command=new InvalidateCommand();
break;
case InvalidateL1Command.COMMAND_ID:
command=new InvalidateL1Command();
break;
case StateTransferControlCommand.COMMAND_ID:
command=new StateTransferControlCommand();
((StateTransferControlCommand)command).init(transport);
break;
case DistributedExecuteCommand.COMMAND_ID:
command=new DistributedExecuteCommand<Object>();
break;
default :
throw new CacheException("Unknown command id " + id + "!");
}
}
 else {
ModuleCommandFactory mcf=commandFactories.get(id);
if (mcf != null) return mcf.fromStream(id,parameters);
 else throw new CacheException("Unknown command id " + id + "!");
}
command.setParameters(id,parameters);
return command;
}
