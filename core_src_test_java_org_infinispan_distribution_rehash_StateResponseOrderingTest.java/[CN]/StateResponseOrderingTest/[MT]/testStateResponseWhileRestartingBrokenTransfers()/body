{
  consistentHashFactory.setOwnerIndexes(new int[]{1,2,3},new int[]{2,1,3});
  consistentHashFactory.triggerRebalance(cache(0));
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return advancedCache(0).getDistributionManager().getReadConsistentHash().locatePrimaryOwnerForSegment(1).equals(address(2));
    }
  }
);
  StateSequencer sequencer=new StateSequencer();
  sequencer.logicalThread("st","st:block_first_state_response","st:kill_node","st:block_second_state_request","st:resume_first_state_response","st:after_first_state_response","st:check_incomplete","st:resume_second_state_request");
  final AtomicReference<Address> firstResponseSender=new AtomicReference<>();
  CommandMatcher firstStateResponseMatcher=new CommandMatcher(){
    CommandMatcher realMatcher=matchCommand(StateResponseCommand.class).matchCount(0).build();
    public boolean accept(    ReplicableCommand command){
      if (!realMatcher.accept(command))       return false;
      firstResponseSender.set(((StateResponseCommand)command).getOrigin());
      return true;
    }
  }
;
  advanceOnInboundRpc(sequencer,cache(0),firstStateResponseMatcher).before("st:block_first_state_response","st:resume_first_state_response").after("st:after_first_state_response");
  CommandMatcher secondStateRequestMatcher=new CommandMatcher(){
    private final AtomicInteger counter=new AtomicInteger();
    @Override public boolean accept(    ReplicableCommand command){
      if (command instanceof StateRequestCommand) {
        StateRequestCommand stateRequestCommand=(StateRequestCommand)command;
        if (stateRequestCommand.getType() == StateRequestCommand.Type.GET_TRANSACTIONS) {
          if (counter.getAndIncrement() == 2)           return true;
          log.debugf("Not blocking command %s",command);
        }
      }
      return false;
    }
  }
;
  advanceOnOutboundRpc(sequencer,cache(0),secondStateRequestMatcher).before("st:block_second_state_request","st:resume_second_state_request");
  final StateTransferManager stm0=advancedCache(0).getComponentRegistry().getStateTransferManager();
  MagicKey k1=new MagicKey("k1",cache(1));
  assertEquals(Arrays.asList(address(1),address(2),address(3)),stm0.getCacheTopology().getCurrentCH().locateOwners(k1));
  cache(0).put(k1,"v1");
  MagicKey k2=new MagicKey("k2",cache(2));
  assertEquals(Arrays.asList(address(2),address(1),address(3)),stm0.getCacheTopology().getCurrentCH().locateOwners(k2));
  cache(0).put(k2,"v2");
  consistentHashFactory.setOwnerIndexes(new int[]{0,1,2},new int[]{0,2,1});
  consistentHashFactory.triggerRebalance(cache(0));
  sequencer.enter("st:kill_node");
  assertNotNull(stm0.getCacheTopology().getPendingCH());
  int nodeToKeep=managerIndex(firstResponseSender.get());
  int nodeToKill=nodeToKeep == 1 ? 2 : 1;
  log.debugf("Blocked state response from %s, killing %s",firstResponseSender.get(),manager(nodeToKill));
  cache(nodeToKill).stop();
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return stm0.getCacheTopology().getMembers().size() == 3;
    }
  }
);
  sequencer.exit("st:kill_node");
  sequencer.enter("st:check_incomplete");
  assertTrue(stm0.isStateTransferInProgress());
  sequencer.exit("st:check_incomplete");
  waitForRehashToComplete(cache(0),cache(nodeToKeep),cache(3));
  assertTrue(stm0.getCacheTopology().getReadConsistentHash().isKeyLocalToNode(address(0),k1));
  assertTrue(stm0.getCacheTopology().getReadConsistentHash().isKeyLocalToNode(address(0),k2));
  assertEquals("v1",cache(0).get(k1));
  assertEquals("v2",cache(0).get(k2));
}
