{
  org.infinispan.client.hotrod.configuration.ConfigurationBuilder builder=new org.infinispan.client.hotrod.configuration.ConfigurationBuilder();
  HotRodServer server=server(0);
  builder.addServers(server.getHost() + ":" + server.getPort());
  builder.balancingStrategy(StickyServerLoadBalancingStrategy.class);
  RemoteCacheManager newClient=new RemoteCacheManager(builder.build());
  try {
    WithStateEventLogListener<Integer> withStateEventLogListener=new WithStateEventLogListener<>();
    EventLogListener<Integer> withoutStateEventLogListener=new EventLogListener<>();
    RemoteCache<Integer,String> c=newClient.getCache();
    c.put(0,"zero");
    c.remove(0);
    c.addClientListener(withoutStateEventLogListener);
    c.addClientListener(withStateEventLogListener);
    c.put(1,"one");
    withStateEventLogListener.expectOnlyCreatedEvent(1,cache(0));
    withoutStateEventLogListener.expectOnlyCreatedEvent(1,cache(0));
    findServerAndKill(newClient,servers,cacheManagers);
    c.put(2,"two");
    withoutStateEventLogListener.expectFailoverEvent();
    withStateEventLogListener.expectFailoverEvent();
    withoutStateEventLogListener.expectNoEvents();
    withStateEventLogListener.expectUnorderedEvents(ClientEvent.Type.CLIENT_CACHE_ENTRY_CREATED,1,2);
    c.remove(1);
    c.remove(2);
  }
  finally {
    killRemoteCacheManager(newClient);
  }
}
