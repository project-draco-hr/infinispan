{
  cacheConfigBuilder=getDefaultClusteredCacheConfig(cacheMode,isTransactional,true);
  if (isTransactional) {
    cacheConfigBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL).transactionManagerLookup(new DummyTransactionManagerLookup()).syncCommitPhase(true).syncRollbackPhase(true);
    if (isOptimistic) {
      cacheConfigBuilder.transaction().lockingMode(LockingMode.OPTIMISTIC).locking().writeSkewCheck(true).isolationLevel(IsolationLevel.REPEATABLE_READ).versioning().enable().scheme(VersioningScheme.SIMPLE);
    }
 else {
      cacheConfigBuilder.transaction().lockingMode(LockingMode.PESSIMISTIC);
    }
  }
  cacheConfigBuilder.clustering().hash().numSegments(10).numOwners(2).l1().disable().onRehash(false).locking().lockAcquisitionTimeout(1000l);
  cacheConfigBuilder.clustering().stateTransfer().fetchInMemoryState(true).awaitInitialTransfer(false);
  rebalanceGate=new ReclosableLatch(true);
  addClusterEnabledCacheManager(cacheConfigBuilder);
  waitForClusterToForm();
  TestingUtil.replaceComponent(manager(0),RebalancePolicy.class,new DefaultRebalancePolicy(){
    @Override public void updateCacheStatus(    String cacheName,    ClusterCacheStatus cacheStatus) throws Exception {
      if (cacheStatus.getCacheTopology().getPendingCH() != null) {
        try {
          rebalanceGate.await();
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
      super.updateCacheStatus(cacheName,cacheStatus);
    }
  }
,true);
}
