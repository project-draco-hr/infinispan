{
  Set<CacheEntry<Object,String>> valuesInserted=new HashSet<>();
  Cache<Object,String> cache=cache(0,CACHE_NAME);
  for (int i=0; i < 3; ++i) {
    Object key=getKeyTiedToCache(cache);
    TimeUnit unit=TimeUnit.MINUTES;
    cache.put(key,key.toString(),10,unit,i + 1,unit);
    valuesInserted.add(new TransientMortalCacheEntry(key,key.toString(),unit.toMillis(i + 1),unit.toMillis(10),System.currentTimeMillis()));
  }
  EntryRetriever<Object,String> retriever=cache(0,CACHE_NAME).getAdvancedCache().getComponentRegistry().getComponent(EntryRetriever.class);
  Set<CacheEntry<Object,String>> retrievedValues=new HashSet<>();
  try (CloseableIterator<CacheEntry<Object,String>> iterator=retriever.retrieveEntries(null,null,null,null)){
    while (iterator.hasNext()) {
      CacheEntry<Object,String> entry=iterator.next();
      retrievedValues.add(entry);
    }
  }
   assertEquals(retrievedValues.size(),valuesInserted.size());
  for (  CacheEntry<Object,String> inserted : valuesInserted) {
    CacheEntry<Object,String> found=null;
    for (    CacheEntry<Object,String> retrieved : retrievedValues) {
      if (retrieved.getKey().equals(inserted.getKey())) {
        found=retrieved;
        break;
      }
    }
    assertNotNull(found,"No retrieved Value matching" + inserted);
    assertEquals(found.getValue(),inserted.getValue());
    assertEquals(found.getMaxIdle(),inserted.getMaxIdle());
    assertEquals(found.getLifespan(),inserted.getLifespan());
  }
}
