{
  withCacheManagers(new MultiCacheManagerCallable(TestCacheManagerFactory.createCacheManager(CacheMode.DIST_SYNC,false),TestCacheManagerFactory.createCacheManager(CacheMode.DIST_SYNC,false),TestCacheManagerFactory.createCacheManager(CacheMode.DIST_SYNC,false)){
    @Override public void call() throws Exception {
      int msg=1;
      blockUntilViewReceived(cms[0].getCache(),3);
      for (int i=0; i < cms.length; i++) {
        EventLogger eventLogger=EventLogManager.getEventLogger(cms[i]);
        assertTrue(eventLogger.getClass().getName(),eventLogger instanceof ServerEventLogger);
        eventLogger.info(EventLogCategory.SECURITY,"message #" + Integer.toString(msg++));
        eventLogger.warn(EventLogCategory.SECURITY,"message #" + Integer.toString(msg++));
        eventLogger.info(EventLogCategory.TASKS,"message #" + Integer.toString(msg++));
        eventLogger.warn(EventLogCategory.TASKS,"message #" + Integer.toString(msg++));
      }
      for (int i=0; i < cms.length; i++) {
        EventLogger eventLogger=EventLogManager.getEventLogger(cms[i]);
        List<EventLog> events=eventLogger.getEvents(Instant.now(),10,Optional.of(EventLogCategory.TASKS),Optional.empty());
        assertEquals("Result count discrepancy on node " + i,2 * cms.length,events.size());
        for (        EventLog event : events) {
          assertEquals(EventLogCategory.TASKS,event.getCategory());
        }
        events=eventLogger.getEvents(Instant.now(),10,Optional.empty(),Optional.of(EventLogLevel.INFO));
        for (        EventLog event : events) {
          assertEquals(EventLogLevel.INFO,event.getLevel());
        }
      }
    }
  }
);
}
