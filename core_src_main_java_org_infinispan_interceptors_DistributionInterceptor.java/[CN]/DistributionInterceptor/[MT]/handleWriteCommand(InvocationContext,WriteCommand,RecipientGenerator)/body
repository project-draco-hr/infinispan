{
  boolean localModeForced=isLocalModeForced(ctx);
  remoteGetBeforeWrite(ctx,command.isConditional(),recipientGenerator.getKeys());
  if (localModeForced && ctx.isInTxScope())   return invokeNextInterceptor(ctx,command);
  Object returnValue=invokeNextInterceptor(ctx,command);
  if (command.isSuccessful()) {
    if (!ctx.isInTxScope()) {
      if (ctx.isOriginLocal()) {
        List<Address> rec=recipientGenerator.generateRecipients();
        if (trace)         log.trace("Invoking command {0} on hosts {1}",command,rec);
        boolean useFuture=ctx.isUseFutureReturnType();
        boolean sync=isSynchronous(ctx);
        NotifyingNotifiableFuture<Object> future=null;
        if (isL1CacheEnabled && rec != null && rpcManager.getTransport().getMembers().size() > rec.size()) {
          InvalidateCommand ic=cf.buildInvalidateFromL1Command(recipientGenerator.getKeys());
          if (useFuture) {
            future=new AggregatingNotifyingFutureImpl(returnValue,2);
            rpcManager.broadcastRpcCommandInFuture(ic,future);
          }
 else {
            rpcManager.broadcastRpcCommand(ic,sync);
          }
        }
        if (useFuture) {
          if (future == null)           future=new NotifyingFutureImpl(returnValue);
          rpcManager.anycastRpcCommandInFuture(rec,command,future);
          return future;
        }
 else {
          rpcManager.anycastRpcCommand(rec,command,sync);
        }
      }
    }
 else {
      if (!localModeForced) {
        ((TxInvocationContext)ctx).addTransactionParticipants(recipientGenerator.generateRecipients());
      }
    }
  }
  return returnValue;
}
