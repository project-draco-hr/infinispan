{
  TcpTransport tcpTransport=new TcpTransport(address,tcpTransportFactory);
  if (trace) {
    log.tracef("Created tcp transport: %s",tcpTransport);
  }
  List<String> serverMechs=mechList(tcpTransport,defaultCacheTopologyId);
  if (!serverMechs.contains(configuration.saslMechanism())) {
    throw log.unsupportedMech(configuration.saslMechanism(),serverMechs);
  }
  SaslClient saslClient;
  if (configuration.clientSubject() != null) {
    saslClient=Subject.doAs(configuration.clientSubject(),new PrivilegedExceptionAction<SaslClient>(){
      @Override public SaslClient run() throws Exception {
        CallbackHandler callbackHandler=configuration.callbackHandler();
        if (callbackHandler == null) {
          callbackHandler=NoOpCallbackHandler.INSTANCE;
        }
        return Sasl.createSaslClient(new String[]{configuration.saslMechanism()},null,"hotrod",configuration.serverName(),configuration.saslProperties(),callbackHandler);
      }
    }
);
  }
 else {
    saslClient=Sasl.createSaslClient(new String[]{configuration.saslMechanism()},null,"hotrod",configuration.serverName(),configuration.saslProperties(),configuration.callbackHandler());
  }
  if (trace) {
    log.tracef("Authenticating using mech: %s",configuration.saslMechanism());
  }
  byte response[]=saslClient.hasInitialResponse() ? evaluateChallenge(saslClient,EMPTY_BYTES) : EMPTY_BYTES;
  byte challenge[]=auth(tcpTransport,defaultCacheTopologyId,configuration.saslMechanism(),response);
  while (!saslClient.isComplete() && challenge != null) {
    response=evaluateChallenge(saslClient,challenge);
    if (response == null) {
      break;
    }
    challenge=auth(tcpTransport,defaultCacheTopologyId,"",response);
  }
  String qop=(String)saslClient.getNegotiatedProperty(Sasl.QOP);
  if (qop != null && (qop.equalsIgnoreCase(AUTH_INT) || qop.equalsIgnoreCase(AUTH_CONF))) {
    tcpTransport.setSaslClient(saslClient);
  }
 else {
    saslClient.dispose();
  }
  if (!firstPingExecuted) {
    log.trace("Executing first ping!");
    firstPingExecuted=true;
    ping(tcpTransport,defaultCacheTopologyId);
  }
  return tcpTransport;
}
