{
  if (attributeCondition.getAttributePath() == null || attributeCondition.getOperator() == null) {
    throw new IllegalStateException("Incomplete sentence. Missing attribute path or operator.");
  }
  StringBuilder sb=new StringBuilder();
  if (attributeCondition.getOperator() == AttributeCondition.Operator.IS_NULL) {
    sb.append(alias).append(".").append(attributeCondition.getAttributePath());
    sb.append(" IS ");
    if (attributeCondition.isNegated()) {
      sb.append("NOT ");
    }
    sb.append("NULL");
  }
 else   if (attributeCondition.getOperator() == AttributeCondition.Operator.BETWEEN) {
    ValueRange range=(ValueRange)attributeCondition.getArgument();
    if (attributeCondition.isNegated() || !range.isIncludeLower() || !range.isIncludeUpper()) {
      sb.append(alias).append(".").append(attributeCondition.getAttributePath());
      if (attributeCondition.isNegated()) {
        sb.append(range.isIncludeLower() ? " < " : " <= ");
      }
 else {
        sb.append(range.isIncludeLower() ? " >= " : " > ");
      }
      sb.append(getArgumentLiteral(range.getFrom()));
      sb.append(" AND ");
      sb.append(alias).append(".").append(attributeCondition.getAttributePath());
      if (attributeCondition.isNegated()) {
        sb.append(range.isIncludeUpper() ? " > " : " >= ");
      }
 else {
        sb.append(range.isIncludeUpper() ? " <= " : " < ");
      }
      sb.append(getArgumentLiteral(range.getTo()));
    }
 else {
      sb.append(alias).append(".").append(attributeCondition.getAttributePath());
      sb.append(" BETWEEN ");
      sb.append(getArgumentLiteral(range.getFrom()));
      sb.append(" AND ");
      sb.append(getArgumentLiteral(range.getTo()));
    }
  }
 else {
    sb.append(alias).append(".").append(attributeCondition.getAttributePath());
    sb.append(' ');
switch (attributeCondition.getOperator()) {
case EQ:
{
        sb.append(attributeCondition.isNegated() ? "!=" : "=");
        break;
      }
case LT:
{
      sb.append(attributeCondition.isNegated() ? ">=" : "<");
      break;
    }
case LTE:
{
    sb.append(attributeCondition.isNegated() ? ">" : "<=");
    break;
  }
case GT:
{
  sb.append(attributeCondition.isNegated() ? "<=" : ">");
  break;
}
case GTE:
{
sb.append(attributeCondition.isNegated() ? "<" : ">=");
break;
}
case IN:
{
sb.append(attributeCondition.isNegated() ? "NOT IN" : "IN");
break;
}
case LIKE:
{
sb.append(attributeCondition.isNegated() ? "NOT LIKE" : "LIKE");
break;
}
}
sb.append(' ');
sb.append(getArgumentLiteral(attributeCondition.getArgument()));
}
return sb.toString();
}
