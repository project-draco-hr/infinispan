{
  final String cacheName="asyncRepl";
  String xml1=INFINISPAN_START_TAG + "<cache-container name=\"1\" default-cache=\"" + cacheName+ "\">"+ "   <replicated-cache name=\""+ cacheName+ "\" mode=\"ASYNC\" async-marshalling=\"false\">\n"+ "      <state-transfer enabled=\"false\"/>\n"+ "      <locking isolation=\"REPEATABLE_READ\" concurrency-level=\"1000\" acquire-timeout=\"20000\"/>\n"+ "      <store-as-binary/>\n"+ "      <expiration interval=\"23\" lifespan=\"50012\" max-idle=\"1341\"/>\n"+ "   </replicated-cache>\n"+ "</cache-container>"+ TestingUtil.INFINISPAN_END_TAG;
  String xml2=INFINISPAN_START_TAG + "<cache-container name=\"2\" default-cache=\"" + cacheName+ "\">"+ "   <replicated-cache name=\""+ cacheName+ "\" mode=\"SYNC\" remote-timeout=\"30000\">\n"+ "      <state-transfer enabled=\"true\"/>\n"+ "      <locking isolation=\"READ_COMMITTED\" concurrency-level=\"30\" acquire-timeout=\"25000\"/>\n"+ "      <store-as-binary keys=\"false\" values=\"false\"/>\n"+ "   </replicated-cache>\n"+ "</cache-container>"+ TestingUtil.INFINISPAN_END_TAG;
  ConfigurationBuilderHolder holder=TestCacheManagerFactory.buildAggregateHolder(xml1,xml2);
  withCacheManager(new CacheManagerCallable(TestCacheManagerFactory.createClusteredCacheManager(holder)){
    @Override public void call(){
      Configuration c=cm.getCacheConfiguration(cacheName);
      Assert.assertEquals(c.clustering().cacheMode(),CacheMode.REPL_SYNC);
      Assert.assertEquals(c.clustering().stateTransfer().fetchInMemoryState(),true);
      Assert.assertEquals(c.clustering().sync().replTimeout(),30000);
      Assert.assertEquals(c.locking().isolationLevel(),IsolationLevel.READ_COMMITTED);
      Assert.assertEquals(c.locking().concurrencyLevel(),30);
      Assert.assertEquals(c.locking().lockAcquisitionTimeout(),25000);
      Assert.assertEquals(c.storeAsBinary().enabled(),false);
      Assert.assertEquals(c.expiration().wakeUpInterval(),23);
      Assert.assertEquals(c.expiration().lifespan(),50012);
      Assert.assertEquals(c.expiration().maxIdle(),1341);
    }
  }
);
}
