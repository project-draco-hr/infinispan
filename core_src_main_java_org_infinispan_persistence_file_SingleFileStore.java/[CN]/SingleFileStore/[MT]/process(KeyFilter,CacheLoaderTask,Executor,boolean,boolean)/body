{
  filter=PersistenceUtil.notNull(filter);
  Set<Object> keysToLoad=new HashSet<Object>(entries.size());
synchronized (entries) {
    for (    Object k : entries.keySet()) {
      if (filter.shouldLoadKey(k))       keysToLoad.add(k);
    }
  }
  ExecutorAllCompletionService eacs=new ExecutorAllCompletionService(executor);
  final TaskContextImpl taskContext=new TaskContextImpl();
  int taskCount=0;
  for (  final Object key : keysToLoad) {
    if (taskContext.isStopped())     break;
    eacs.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        try {
          final MarshalledEntry marshalledEntry=_load(key,fetchValue,fetchMetadata);
          if (marshalledEntry != null) {
            task.processEntry(marshalledEntry,taskContext);
          }
          return null;
        }
 catch (        Exception e) {
          log.errorExecutingParallelStoreTask(e);
          throw e;
        }
      }
    }
);
  }
  eacs.waitUntilAllCompleted();
  if (eacs.isExceptionThrown()) {
    throw new PersistenceException("Execution exception!",eacs.getFirstException());
  }
}
