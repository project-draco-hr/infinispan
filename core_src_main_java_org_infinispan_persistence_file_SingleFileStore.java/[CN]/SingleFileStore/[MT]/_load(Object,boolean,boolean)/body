{
  final FileEntry fe;
  final boolean expired;
  resizeLock.readLock().lock();
  try {
synchronized (entries) {
      fe=entries.get(key);
      if (fe == null)       return null;
      expired=fe.isExpired(timeService.wallClockTime());
      if (expired) {
        entries.remove(key);
      }
 else {
        fe.lock();
      }
    }
    if (expired) {
      try {
        free(fe);
      }
 catch (      IOException e) {
        throw new PersistenceException(e);
      }
      return null;
    }
  }
  finally {
    resizeLock.readLock().unlock();
  }
  final byte[] data;
  try {
    data=new byte[fe.keyLen + (loadValue || loadMetadata ? fe.dataLen : 0) + (loadMetadata ? fe.metadataLen : 0)];
    channel.read(ByteBuffer.wrap(data),fe.offset + KEY_POS);
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
 finally {
    fe.unlock();
  }
  if (trace)   log.tracef("Read entry %s at %d:%d",key,fe.offset,fe.actualSize());
  ByteBufferFactory factory=ctx.getByteBufferFactory();
  org.infinispan.commons.io.ByteBuffer keyBb=factory.newByteBuffer(data,0,fe.keyLen);
  org.infinispan.commons.io.ByteBuffer valueBb=null;
  org.infinispan.commons.io.ByteBuffer metadataBb=null;
  if (loadValue) {
    valueBb=factory.newByteBuffer(data,fe.keyLen,fe.dataLen);
  }
  if (loadMetadata && fe.metadataLen > 0) {
    metadataBb=factory.newByteBuffer(data,fe.keyLen + fe.dataLen,fe.metadataLen);
  }
  return ctx.getMarshalledEntryFactory().newMarshalledEntry(keyBb,valueBb,metadataBb);
}
