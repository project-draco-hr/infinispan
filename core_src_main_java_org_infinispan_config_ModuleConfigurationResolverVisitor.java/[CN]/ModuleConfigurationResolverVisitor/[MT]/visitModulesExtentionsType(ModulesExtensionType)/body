{
  List<ModuleConfigurationBean> list=bean.getModuleConfigs();
  for (  ModuleConfigurationBean module : list) {
    try {
      ModuleProperties props=ModuleProperties.loadModuleProperties(module.getName());
      if (props != null) {
        Class<AbstractConfigurationBean> configurationClass=module.resolveConfigurationClass(props.getConfigurationClassName());
        NodeList nodeList=root.getElementsByTagName(Configuration.ELEMENT_MODULE_NAME);
        findModuleInXML:         for (int i=nodeList.getLength() - 1; i >= 0; i--) {
          Element node=(Element)nodeList.item(i);
          String name=node.getAttribute(Configuration.MODULE_IDENTIFIER);
          if (name.equals(module.getName())) {
            NodeList childNodes=node.getChildNodes();
            for (int j=0; j < childNodes.getLength(); j++) {
              Node item=childNodes.item(j);
              if (item.getNodeType() == Node.ELEMENT_NODE) {
                AbstractConfigurationBean configBean=loadConfigurationBeanModule((Element)item,configurationClass);
                module.setConfigurationBean(configBean);
                break findModuleInXML;
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      throw new ConfigurationException("Could not load configuration bean for module " + module.getName(),e);
    }
  }
}
