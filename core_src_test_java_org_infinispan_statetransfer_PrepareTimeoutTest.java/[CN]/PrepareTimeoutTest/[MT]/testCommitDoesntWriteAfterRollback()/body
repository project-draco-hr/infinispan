{
  StateSequencer sequencer=new StateSequencer();
  sequencer.logicalThread("main","main:start","main:check");
  sequencer.logicalThread("primary","primary:block_prepare","primary:after_rollback","primary:resume_prepare","primary:after_prepare");
  sequencer.logicalThread("backup","backup:block_prepare","backup:after_rollback","backup:resume_prepare","backup:after_prepare");
  sequencer.order("main:start","primary:block_prepare","primary:after_prepare","main:check");
  sequencer.order("main:start","backup:block_prepare","backup:after_prepare","main:check");
  advanceOnInterceptor(sequencer,cache(1),StateTransferInterceptor.class,matchCommand(PrepareCommand.class).matchCount(0).build()).before("primary:block_prepare","primary:resume_prepare").after("primary:after_prepare");
  advanceOnInterceptor(sequencer,cache(1),StateTransferInterceptor.class,matchCommand(RollbackCommand.class).build()).after("primary:after_rollback");
  advanceOnInterceptor(sequencer,cache(2),StateTransferInterceptor.class,matchCommand(PrepareCommand.class).matchCount(0).build()).before("backup:block_prepare","backup:resume_prepare").after("backup:after_prepare");
  advanceOnInterceptor(sequencer,cache(2),StateTransferInterceptor.class,matchCommand(RollbackCommand.class).build()).after("backup:after_rollback");
  assertEquals(Arrays.asList(address(1),address(2)),advancedCache(0).getDistributionManager().locate(TEST_KEY));
  sequencer.advance("main:start");
  tm(0).begin();
  cache(0).put(TEST_KEY,TX1_VALUE);
  try {
    tm(0).commit();
    fail("Exception expected during commit");
  }
 catch (  Exception e) {
  }
  tm(0).begin();
  cache(0).put(TEST_KEY,TX2_VALUE);
  GlobalTransaction gtx1=transactionTable(0).getLocalTransaction(tm(0).getTransaction()).getGlobalTransaction();
  tm(0).commit();
  Thread.sleep(COMPLETED_TX_TIMEOUT + 1000);
  assertTrue(transactionTable(1).isTransactionCompleted(gtx1));
  assertTrue(transactionTable(2).isTransactionCompleted(gtx1));
  sequencer.advance("main:check");
  LockManager lockManager1=TestingUtil.extractLockManager(cache(1));
  assertFalse(lockManager1.isLocked(TEST_KEY));
  assertFalse(transactionTable(1).containRemoteTx(gtx1));
  assertFalse(transactionTable(2).containRemoteTx(gtx1));
  for (  Cache cache : caches()) {
    assertEquals(TX2_VALUE,cache.get(TEST_KEY));
  }
}
