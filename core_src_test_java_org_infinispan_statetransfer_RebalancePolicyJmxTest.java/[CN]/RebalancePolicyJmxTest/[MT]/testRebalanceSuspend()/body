{
  MBeanServer mBeanServer=PerThreadMBeanServerLookup.getThreadMBeanServer();
  String domain0=manager(1).getCacheManagerConfiguration().globalJmxStatistics().domain();
  ObjectName ltmName0=TestingUtil.getCacheManagerObjectName(domain0,"DefaultCacheManager","LocalTopologyManager");
  String domain1=manager(1).getCacheManagerConfiguration().globalJmxStatistics().domain();
  ObjectName ltmName1=TestingUtil.getCacheManagerObjectName(domain1,"DefaultCacheManager","LocalTopologyManager");
  StateTransferManager stm0=TestingUtil.extractComponent(cache(0),StateTransferManager.class);
  assertEquals(Arrays.asList(address(0),address(1)),stm0.getCacheTopology().getCurrentCH().getMembers());
  assertNull(stm0.getCacheTopology().getPendingCH());
  assertTrue(mBeanServer.isRegistered(ltmName0));
  assertTrue((Boolean)mBeanServer.getAttribute(ltmName0,"RebalancingEnabled"));
  mBeanServer.setAttribute(ltmName0,new Attribute("RebalancingEnabled",false));
  assertFalse((Boolean)mBeanServer.getAttribute(ltmName0,"RebalancingEnabled"));
  addClusterEnabledCacheManager(getGlobalConfigurationBuilder("r2"),getConfigurationBuilder());
  addClusterEnabledCacheManager(getGlobalConfigurationBuilder("r2"),getConfigurationBuilder());
  Thread.sleep(1000);
  assertFalse((Boolean)mBeanServer.getAttribute(ltmName1,"RebalancingEnabled"));
  assertNull(stm0.getCacheTopology().getPendingCH());
  assertEquals(Arrays.asList(address(0),address(1)),stm0.getCacheTopology().getCurrentCH().getMembers());
  mBeanServer.setAttribute(ltmName0,new Attribute("RebalancingEnabled",true));
  assertTrue((Boolean)mBeanServer.getAttribute(ltmName0,"RebalancingEnabled"));
  mBeanServer.setAttribute(ltmName0,new Attribute("RebalancingEnabled",true));
  TestingUtil.waitForRehashToComplete(cache(0),cache(1),cache(2),cache(3));
  assertNull(stm0.getCacheTopology().getPendingCH());
  ConsistentHash ch=stm0.getCacheTopology().getCurrentCH();
  assertEquals(Arrays.asList(address(0),address(1),address(2),address(3)),ch.getMembers());
  for (int i=0; i < ch.getNumSegments(); i++) {
    assertEquals(2,ch.locateOwnersForSegment(i).size());
  }
  mBeanServer.setAttribute(ltmName1,new Attribute("RebalancingEnabled",false));
  assertFalse((Boolean)mBeanServer.getAttribute(ltmName1,"RebalancingEnabled"));
  mBeanServer.setAttribute(ltmName1,new Attribute("RebalancingEnabled",false));
  killCacheManagers(manager(2),manager(3));
  Thread.sleep(1000);
  assertNull(stm0.getCacheTopology().getPendingCH());
  ch=stm0.getCacheTopology().getCurrentCH();
  assertEquals(Arrays.asList(address(0),address(1)),ch.getMembers());
  for (int i=0; i < ch.getNumSegments(); i++) {
    assertEquals(1,ch.locateOwnersForSegment(i).size());
  }
  mBeanServer.setAttribute(ltmName1,new Attribute("RebalancingEnabled",true));
  assertTrue((Boolean)mBeanServer.getAttribute(ltmName1,"RebalancingEnabled"));
  TestingUtil.waitForRehashToComplete(cache(0),cache(1));
  assertNull(stm0.getCacheTopology().getPendingCH());
  ch=stm0.getCacheTopology().getCurrentCH();
  assertEquals(Arrays.asList(address(0),address(1)),ch.getMembers());
  for (int i=0; i < ch.getNumSegments(); i++) {
    assertEquals(2,ch.locateOwnersForSegment(i).size());
  }
}
