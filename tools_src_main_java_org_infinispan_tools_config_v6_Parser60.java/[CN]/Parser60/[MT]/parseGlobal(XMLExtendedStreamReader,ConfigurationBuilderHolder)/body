{
  GlobalConfigurationBuilder builder=holder.getGlobalConfigurationBuilder();
  ParseUtils.requireNoAttributes(reader);
  boolean transportParsed=false;
  DefaultThreadFactory threadFactory=new DefaultThreadFactory(INFINISPAN_FACTORY,new ThreadGroup("infinispan"),1,"%G %i",null,null);
  while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
    Element element=Element.forName(reader.getLocalName());
switch (element) {
case ASYNC_LISTENER_EXECUTOR:
{
        ThreadPoolExecutorFactory executorFactory=createBlockingThreadPoolExecutorFactory(parseExecutor(reader));
        holder.getGlobalConfigurationBuilder().listenerThreadPool().threadFactory(threadFactory).threadPoolFactory(executorFactory);
        break;
      }
case PERSISTENCE_EXECUTOR:
{
      ThreadPoolExecutorFactory executorFactory=createBlockingThreadPoolExecutorFactory(parseExecutor(reader));
      holder.getGlobalConfigurationBuilder().persistenceThreadPool().threadFactory(threadFactory).threadPoolFactory(executorFactory);
      break;
    }
case ASYNC_TRANSPORT_EXECUTOR:
{
    ThreadPoolExecutorFactory executorFactory=createBlockingThreadPoolExecutorFactory(parseExecutor(reader));
    holder.getGlobalConfigurationBuilder().transport().transportThreadPool().threadFactory(threadFactory).threadPoolFactory(executorFactory);
    break;
  }
case REMOTE_COMMAND_EXECUTOR:
{
  ThreadPoolExecutorFactory executorFactory=createBlockingThreadPoolExecutorFactory(parseExecutor(reader));
  holder.getGlobalConfigurationBuilder().transport().remoteCommandThreadPool().threadFactory(threadFactory).threadPoolFactory(executorFactory);
  break;
}
case EVICTION_SCHEDULED_EXECUTOR:
{
ThreadPoolExecutorFactory executorFactory=createScheduledThreadPoolExecutorFactory(parseExecutor(reader));
holder.getGlobalConfigurationBuilder().expirationThreadPool().threadFactory(threadFactory).threadPoolFactory(executorFactory);
break;
}
case GLOBAL_JMX_STATISTICS:
{
parseGlobalJMXStatistics(reader,holder);
break;
}
case MODULES:
{
parseModules(reader,holder);
break;
}
case REPLICATION_QUEUE_SCHEDULED_EXECUTOR:
{
warnRemovedElement(element.getLocalName());
parseExecutor(reader);
break;
}
case SERIALIZATION:
{
parseSerialization(reader,holder);
break;
}
case SHUTDOWN:
{
parseShutdown(reader,holder);
break;
}
case TRANSPORT:
{
parseTransport(reader,holder);
transportParsed=true;
break;
}
case SITE:
{
parseGlobalSites(reader,holder);
break;
}
case TOTAL_ORDER_EXECUTOR:
warnRemovedElement(element.getLocalName());
parseExecutor(reader);
break;
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!transportParsed) {
builder.transport().transport(null);
}
 else {
if (builder.transport().getTransport() == null) {
builder.transport().defaultTransport();
}
}
}
