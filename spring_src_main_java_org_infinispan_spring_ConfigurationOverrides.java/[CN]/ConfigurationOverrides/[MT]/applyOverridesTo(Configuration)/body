{
  this.logger.debug("Applying configuration overrides to Configuration [" + configurationToOverride + "] ...");
  if (this.eagerDeadlockSpinDuration != null) {
    this.logger.debug("Overriding property [eagerDeadlockSpinDuration] with value [" + this.eagerDeadlockSpinDuration + "]");
    configurationToOverride.setDeadlockDetectionSpinDuration(this.eagerDeadlockSpinDuration);
  }
  if (this.useEagerDeadlockDetection != null) {
    this.logger.debug("Overriding property [useEagerDeadlockDetection] with value [" + this.useEagerDeadlockDetection + "]");
    configurationToOverride.setEnableDeadlockDetection(this.useEagerDeadlockDetection);
  }
  if (this.useLockStriping != null) {
    this.logger.debug("Overriding property [useLockStriping] with value [" + this.useLockStriping + "]");
    configurationToOverride.setUseLockStriping(this.useLockStriping);
  }
  if (this.unsafeUnreliableReturnValues != null) {
    this.logger.debug("Overriding property [unsafeUnreliableReturnValues] with value [" + this.unsafeUnreliableReturnValues + "]");
    configurationToOverride.setUnsafeUnreliableReturnValues(this.unsafeUnreliableReturnValues);
  }
  if (this.rehashRpcTimeout != null) {
    this.logger.debug("Overriding property [rehashRpcTimeout] with value [" + this.rehashRpcTimeout + "]");
    configurationToOverride.setRehashRpcTimeout(this.rehashRpcTimeout);
  }
  if (this.writeSkewCheck != null) {
    this.logger.debug("Overriding property [writeSkewCheck] with value [" + this.writeSkewCheck + "]");
    configurationToOverride.setWriteSkewCheck(this.writeSkewCheck);
  }
  if (this.concurrencyLevel != null) {
    this.logger.debug("Overriding property [concurrencyLevel] with value [" + this.concurrencyLevel + "]");
    configurationToOverride.setConcurrencyLevel(this.concurrencyLevel);
  }
  if (this.replQueueMaxElements != null) {
    this.logger.debug("Overriding property [replQueueMaxElements] with value [" + this.replQueueMaxElements + "]");
    configurationToOverride.setReplQueueMaxElements(this.replQueueMaxElements);
  }
  if (this.replQueueInterval != null) {
    this.logger.debug("Overriding property [replQueueInterval] with value [" + this.replQueueInterval + "]");
    configurationToOverride.setReplQueueInterval(this.replQueueInterval);
  }
  if (this.replQueueClass != null) {
    this.logger.debug("Overriding property [replQueueClass] with value [" + this.replQueueClass + "]");
    configurationToOverride.setReplQueueClass(this.replQueueClass);
  }
  if (this.exposeJmxStatistics != null) {
    this.logger.debug("Overriding property [exposeJmxStatistics] with value [" + this.exposeJmxStatistics + "]");
    configurationToOverride.setExposeJmxStatistics(this.exposeJmxStatistics);
  }
  if (this.invocationBatchingEnabled != null) {
    this.logger.debug("Overriding property [invocationBatchingEnabled] with value [" + this.invocationBatchingEnabled + "]");
    configurationToOverride.setInvocationBatchingEnabled(this.invocationBatchingEnabled);
  }
  if (this.fetchInMemoryState != null) {
    this.logger.debug("Overriding property [fetchInMemoryState] with value [" + this.fetchInMemoryState + "]");
    configurationToOverride.setFetchInMemoryState(this.fetchInMemoryState);
  }
  if (this.alwaysProvideInMemoryState != null) {
    this.logger.debug("Overriding property [alwaysProvideInMemoryState] with value [" + this.alwaysProvideInMemoryState + "]");
    configurationToOverride.setAlwaysProvideInMemoryState(this.alwaysProvideInMemoryState);
  }
  if (this.lockAcquisitionTimeout != null) {
    this.logger.debug("Overriding property [lockAcquisitionTimeout] with value [" + this.lockAcquisitionTimeout + "]");
    configurationToOverride.setLockAcquisitionTimeout(this.lockAcquisitionTimeout);
  }
  if (this.syncReplTimeout != null) {
    this.logger.debug("Overriding property [syncReplTimeout] with value [" + this.syncReplTimeout + "]");
    configurationToOverride.setSyncReplTimeout(this.syncReplTimeout);
  }
  if (this.cacheModeString != null) {
    this.logger.debug("Overriding property [cacheModeString] with value [" + this.cacheModeString + "]");
    configurationToOverride.setCacheModeString(this.cacheModeString);
  }
  if (this.expirationWakeUpInterval != null) {
    this.logger.debug("Overriding property [expirationWakeUpInterval] with value [" + this.expirationWakeUpInterval + "]");
    FluentConfiguration fluentConfiguration=new FluentConfiguration(configurationToOverride);
    fluentConfiguration.expiration().wakeUpInterval(expirationWakeUpInterval);
  }
  if (this.evictionStrategy != null) {
    this.logger.debug("Overriding property [evictionStrategy] with value [" + this.evictionStrategy + "]");
    configurationToOverride.setEvictionStrategy(this.evictionStrategy);
  }
  if (this.evictionStrategyClass != null) {
    this.logger.debug("Overriding property [evictionStrategyClass] with value [" + this.evictionStrategyClass + "]");
    configurationToOverride.setEvictionStrategy(this.evictionStrategyClass);
  }
  if (this.evictionThreadPolicy != null) {
    this.logger.debug("Overriding property [evictionThreadPolicy] with value [" + this.evictionThreadPolicy + "]");
    configurationToOverride.setEvictionThreadPolicy(this.evictionThreadPolicy);
  }
  if (this.evictionThreadPolicyClass != null) {
    this.logger.debug("Overriding property [evictionThreadPolicyClass] with value [" + this.evictionThreadPolicyClass + "]");
    configurationToOverride.setEvictionThreadPolicy(this.evictionThreadPolicyClass);
  }
  if (this.evictionMaxEntries != null) {
    this.logger.debug("Overriding property [evictionMaxEntries] with value [" + this.evictionMaxEntries + "]");
    configurationToOverride.setEvictionMaxEntries(this.evictionMaxEntries);
  }
  if (this.expirationLifespan != null) {
    this.logger.debug("Overriding property [expirationLifespan] with value [" + this.expirationLifespan + "]");
    configurationToOverride.setExpirationLifespan(this.expirationLifespan);
  }
  if (this.expirationMaxIdle != null) {
    this.logger.debug("Overriding property [expirationMaxIdle] with value [" + this.expirationMaxIdle + "]");
    configurationToOverride.setExpirationMaxIdle(this.expirationMaxIdle);
  }
  if (this.transactionManagerLookupClass != null) {
    this.logger.debug("Overriding property [transactionManagerLookupClass] with value [" + this.transactionManagerLookupClass + "]");
    configurationToOverride.setTransactionManagerLookupClass(this.transactionManagerLookupClass);
  }
  if (this.transactionManagerLookup != null) {
    this.logger.debug("Overriding property [transactionManagerLookup] with value [" + this.transactionManagerLookup + "]");
    configurationToOverride.setTransactionManagerLookup(this.transactionManagerLookup);
  }
  if (this.cacheLoaderManagerConfig != null) {
    this.logger.debug("Overriding property [cacheLoaderManagerConfig] with value [" + this.cacheLoaderManagerConfig + "]");
    configurationToOverride.setCacheLoaderManagerConfig(this.cacheLoaderManagerConfig);
  }
  if (this.syncCommitPhase != null) {
    this.logger.debug("Overriding property [syncCommitPhase] with value [" + this.syncCommitPhase + "]");
    configurationToOverride.setSyncCommitPhase(this.syncCommitPhase);
  }
  if (this.syncRollbackPhase != null) {
    this.logger.debug("Overriding property [syncRollbackPhase] with value [" + this.syncRollbackPhase + "]");
    configurationToOverride.setSyncRollbackPhase(this.syncRollbackPhase);
  }
  if (this.useEagerLocking != null) {
    this.logger.debug("Overriding property [useEagerLocking] with value [" + this.useEagerLocking + "]");
    configurationToOverride.setUseEagerLocking(this.useEagerLocking);
  }
  if (this.eagerLockSingleNode != null) {
    this.logger.debug("Overriding property [eagerLockSingleNode] with value [" + this.eagerLockSingleNode + "]");
    configurationToOverride.setEagerLockSingleNode(this.eagerLockSingleNode);
  }
  if (this.useReplQueue != null) {
    this.logger.debug("Overriding property [useReplQueue] with value [" + this.useReplQueue + "]");
    configurationToOverride.setUseReplQueue(this.useReplQueue);
  }
  if (this.isolationLevel != null) {
    this.logger.debug("Overriding property [isolationLevel] with value [" + this.isolationLevel + "]");
    configurationToOverride.setIsolationLevel(this.isolationLevel);
  }
  if (this.stateRetrievalTimeout != null) {
    this.logger.debug("Overriding property [stateRetrievalTimeout] with value [" + this.stateRetrievalTimeout + "]");
    configurationToOverride.setStateRetrievalTimeout(this.stateRetrievalTimeout);
  }
  if (this.stateRetrievalLogFlushTimeout != null) {
    this.logger.debug("Overriding property [stateRetrievalLogFlushTimeout] with value [" + this.stateRetrievalLogFlushTimeout + "]");
    configurationToOverride.setStateRetrievalLogFlushTimeout(this.stateRetrievalLogFlushTimeout);
  }
  if (this.stateRetrievalMaxNonProgressingLogWrites != null) {
    this.logger.debug("Overriding property [stateRetrievalMaxNonProgressingLogWrites] with value [" + this.stateRetrievalMaxNonProgressingLogWrites + "]");
    configurationToOverride.setStateRetrievalMaxNonProgressingLogWrites(this.stateRetrievalMaxNonProgressingLogWrites);
  }
  if (this.stateRetrievalInitialRetryWaitTime != null) {
    this.logger.debug("Overriding property [stateRetrievalInitialRetryWaitTime] with value [" + this.stateRetrievalInitialRetryWaitTime + "]");
    configurationToOverride.setStateRetrievalInitialRetryWaitTime(this.stateRetrievalInitialRetryWaitTime);
  }
  if (this.stateRetrievalRetryWaitTimeIncreaseFactor != null) {
    this.logger.debug("Overriding property [stateRetrievalRetryWaitTimeIncreaseFactor] with value [" + this.stateRetrievalRetryWaitTimeIncreaseFactor + "]");
    configurationToOverride.setStateRetrievalRetryWaitTimeIncreaseFactor(this.stateRetrievalRetryWaitTimeIncreaseFactor);
  }
  if (this.stateRetrievalNumRetries != null) {
    this.logger.debug("Overriding property [stateRetrievalNumRetries] with value [" + this.stateRetrievalNumRetries + "]");
    configurationToOverride.setStateRetrievalNumRetries(this.stateRetrievalNumRetries);
  }
  if (this.isolationLevelClass != null) {
    this.logger.debug("Overriding property [isolationLevelClass] with value [" + this.isolationLevelClass + "]");
    configurationToOverride.setIsolationLevel(this.isolationLevelClass);
  }
  if (this.useLazyDeserialization != null) {
    this.logger.debug("Overriding property [useLazyDeserialization] with value [" + this.useLazyDeserialization + "]");
    configurationToOverride.setUseLazyDeserialization(this.useLazyDeserialization);
  }
  if (this.l1CacheEnabled != null) {
    this.logger.debug("Overriding property [l1CacheEnabled] with value [" + this.l1CacheEnabled + "]");
    configurationToOverride.setL1CacheEnabled(this.l1CacheEnabled);
  }
  if (this.l1Lifespan != null) {
    this.logger.debug("Overriding property [l1Lifespan] with value [" + this.l1Lifespan + "]");
    configurationToOverride.setL1Lifespan(this.l1Lifespan);
  }
  if (this.l1OnRehash != null) {
    this.logger.debug("Overriding property [l1OnRehash] with value [" + this.l1OnRehash + "]");
    configurationToOverride.setL1OnRehash(this.l1OnRehash);
  }
  if (this.consistentHashClass != null) {
    this.logger.debug("Overriding property [consistentHashClass] with value [" + this.consistentHashClass + "]");
    configurationToOverride.setConsistentHashClass(this.consistentHashClass);
  }
  if (this.numOwners != null) {
    this.logger.debug("Overriding property [numOwners] with value [" + this.numOwners + "]");
    configurationToOverride.setNumOwners(this.numOwners);
  }
  if (this.rehashEnabled != null) {
    this.logger.debug("Overriding property [rehashEnabled] with value [" + this.rehashEnabled + "]");
    configurationToOverride.setRehashEnabled(this.rehashEnabled);
  }
  if (this.rehashWaitTime != null) {
    this.logger.debug("Overriding property [rehashWaitTime] with value [" + this.rehashWaitTime + "]");
    configurationToOverride.setRehashWaitTime(this.rehashWaitTime);
  }
  if (this.useAsyncMarshalling != null) {
    this.logger.debug("Overriding property [useAsyncMarshalling] with value [" + this.useAsyncMarshalling + "]");
    configurationToOverride.setUseAsyncMarshalling(this.useAsyncMarshalling);
  }
  if (this.indexingEnabled != null) {
    this.logger.debug("Overriding property [indexingEnabled] with value [" + this.indexingEnabled + "]");
    configurationToOverride.setIndexingEnabled(this.indexingEnabled);
  }
  if (this.indexLocalOnly != null) {
    this.logger.debug("Overriding property [indexLocalOnly] with value [" + this.indexLocalOnly + "]");
    configurationToOverride.setIndexLocalOnly(this.indexLocalOnly);
  }
  if (this.customInterceptors != null) {
    this.logger.debug("Overriding property [customInterceptors] with value [" + this.customInterceptors + "]");
    configurationToOverride.setCustomInterceptors(this.customInterceptors);
  }
  this.logger.debug("Finished applying configuration overrides to Configuration [" + configurationToOverride + "]");
}
