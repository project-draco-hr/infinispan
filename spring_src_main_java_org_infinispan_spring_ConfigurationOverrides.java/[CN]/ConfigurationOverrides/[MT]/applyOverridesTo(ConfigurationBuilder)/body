{
  this.logger.debug("Applying configuration overrides to Configuration [" + configurationToOverride + "] ...");
  if (this.eagerDeadlockSpinDuration != null) {
    this.logger.debug("Overriding property [eagerDeadlockSpinDuration] with value [" + this.eagerDeadlockSpinDuration + "]");
    configurationToOverride.deadlockDetection().spinDuration(this.eagerDeadlockSpinDuration);
  }
  if (this.useEagerDeadlockDetection != null) {
    this.logger.debug("Overriding property [useEagerDeadlockDetection] with value [" + this.useEagerDeadlockDetection + "]");
    configurationToOverride.deadlockDetection().enabled(this.useEagerDeadlockDetection);
  }
  if (this.useLockStriping != null) {
    this.logger.debug("Overriding property [useLockStriping] with value [" + this.useLockStriping + "]");
    configurationToOverride.locking().useLockStriping(this.useLockStriping);
  }
  if (this.unsafeUnreliableReturnValues != null) {
    this.logger.debug("Overriding property [unsafeUnreliableReturnValues] with value [" + this.unsafeUnreliableReturnValues + "]");
    configurationToOverride.unsafe().unreliableReturnValues(this.unsafeUnreliableReturnValues);
  }
  if (this.rehashRpcTimeout != null) {
    this.logger.debug("Overriding property [rehashRpcTimeout] with value [" + this.rehashRpcTimeout + "]");
    configurationToOverride.clustering().stateTransfer().timeout(this.rehashRpcTimeout);
  }
  if (this.writeSkewCheck != null) {
    this.logger.debug("Overriding property [writeSkewCheck] with value [" + this.writeSkewCheck + "]");
    configurationToOverride.locking().writeSkewCheck(this.writeSkewCheck);
  }
  if (this.concurrencyLevel != null) {
    this.logger.debug("Overriding property [concurrencyLevel] with value [" + this.concurrencyLevel + "]");
    configurationToOverride.locking().concurrencyLevel(this.concurrencyLevel);
  }
  if (this.replQueueMaxElements != null) {
    this.logger.debug("Overriding property [replQueueMaxElements] with value [" + this.replQueueMaxElements + "]");
    configurationToOverride.clustering().async().replQueueMaxElements(this.replQueueMaxElements);
  }
  if (this.replQueueInterval != null) {
    this.logger.debug("Overriding property [replQueueInterval] with value [" + this.replQueueInterval + "]");
    configurationToOverride.clustering().async().replQueueInterval(this.replQueueInterval);
  }
  if (this.replQueueClass != null) {
    this.logger.debug("Overriding property [replQueueClass] with value [" + this.replQueueClass + "]");
    configurationToOverride.clustering().async().replQueue(Util.<ReplicationQueue>getInstance(this.replQueueClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.exposeJmxStatistics != null) {
    this.logger.debug("Overriding property [exposeJmxStatistics] with value [" + this.exposeJmxStatistics + "]");
    configurationToOverride.jmxStatistics().enabled(this.exposeJmxStatistics);
  }
  if (this.invocationBatchingEnabled != null) {
    this.logger.debug("Overriding property [invocationBatchingEnabled] with value [" + this.invocationBatchingEnabled + "]");
    configurationToOverride.invocationBatching().enable(this.invocationBatchingEnabled);
  }
  if (this.fetchInMemoryState != null) {
    this.logger.debug("Overriding property [fetchInMemoryState] with value [" + this.fetchInMemoryState + "]");
    configurationToOverride.clustering().stateTransfer().fetchInMemoryState(this.fetchInMemoryState);
  }
  if (this.alwaysProvideInMemoryState != null) {
    this.logger.debug("Overriding property [alwaysProvideInMemoryState] with value [" + this.alwaysProvideInMemoryState + "]");
    configurationToOverride.clustering().stateTransfer().fetchInMemoryState(this.alwaysProvideInMemoryState);
  }
  if (this.lockAcquisitionTimeout != null) {
    this.logger.debug("Overriding property [lockAcquisitionTimeout] with value [" + this.lockAcquisitionTimeout + "]");
    configurationToOverride.locking().lockAcquisitionTimeout(this.lockAcquisitionTimeout);
  }
  if (this.syncReplTimeout != null) {
    this.logger.debug("Overriding property [syncReplTimeout] with value [" + this.syncReplTimeout + "]");
    configurationToOverride.clustering().sync().replTimeout(this.syncReplTimeout);
  }
  if (this.cacheModeString != null) {
    this.logger.debug("Overriding property [cacheModeString] with value [" + this.cacheModeString + "]");
    configurationToOverride.clustering().cacheMode(CacheMode.valueOf(this.cacheModeString));
  }
  if (this.expirationWakeUpInterval != null) {
    this.logger.debug("Overriding property [expirationWakeUpInterval] with value [" + this.expirationWakeUpInterval + "]");
    configurationToOverride.expiration().wakeUpInterval(expirationWakeUpInterval);
  }
  if (this.evictionStrategy != null) {
    this.logger.debug("Overriding property [evictionStrategy] with value [" + this.evictionStrategy + "]");
    configurationToOverride.eviction().strategy(this.evictionStrategy);
  }
  if (this.evictionStrategyClass != null) {
    this.logger.debug("Overriding property [evictionStrategyClass] with value [" + this.evictionStrategyClass + "]");
  }
  if (this.evictionThreadPolicy != null) {
    this.logger.debug("Overriding property [evictionThreadPolicy] with value [" + this.evictionThreadPolicy + "]");
    configurationToOverride.eviction().threadPolicy(this.evictionThreadPolicy);
  }
  if (this.evictionThreadPolicyClass != null) {
    this.logger.debug("Overriding property [evictionThreadPolicyClass] with value [" + this.evictionThreadPolicyClass + "]");
  }
  if (this.evictionMaxEntries != null) {
    this.logger.debug("Overriding property [evictionMaxEntries] with value [" + this.evictionMaxEntries + "]");
    configurationToOverride.eviction().maxEntries(this.evictionMaxEntries);
  }
  if (this.expirationLifespan != null) {
    this.logger.debug("Overriding property [expirationLifespan] with value [" + this.expirationLifespan + "]");
    configurationToOverride.expiration().lifespan(this.expirationLifespan);
  }
  if (this.expirationMaxIdle != null) {
    this.logger.debug("Overriding property [expirationMaxIdle] with value [" + this.expirationMaxIdle + "]");
    configurationToOverride.expiration().maxIdle(this.expirationMaxIdle);
  }
  if (this.transactionManagerLookupClass != null) {
    this.logger.debug("Overriding property [transactionManagerLookupClass] with value [" + this.transactionManagerLookupClass + "]");
    configurationToOverride.transaction().transactionManagerLookup(Util.<TransactionManagerLookup>getInstance(this.transactionManagerLookupClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.transactionManagerLookup != null) {
    this.logger.debug("Overriding property [transactionManagerLookup] with value [" + this.transactionManagerLookup + "]");
    configurationToOverride.transaction().transactionManagerLookup(this.transactionManagerLookup);
  }
  if (this.cacheLoaderManagerConfig != null) {
    this.logger.debug("Overriding property [cacheLoaderManagerConfig] with value [" + this.cacheLoaderManagerConfig + "]");
  }
  if (this.syncCommitPhase != null) {
    this.logger.debug("Overriding property [syncCommitPhase] with value [" + this.syncCommitPhase + "]");
    configurationToOverride.transaction().syncCommitPhase(this.syncCommitPhase);
  }
  if (this.syncRollbackPhase != null) {
    this.logger.debug("Overriding property [syncRollbackPhase] with value [" + this.syncRollbackPhase + "]");
    configurationToOverride.transaction().syncRollbackPhase(this.syncRollbackPhase);
  }
  if (this.useEagerLocking != null) {
    this.logger.debug("Overriding property [useEagerLocking] with value [" + this.useEagerLocking + "]");
    configurationToOverride.transaction().lockingMode(useEagerLocking ? LockingMode.PESSIMISTIC : LockingMode.OPTIMISTIC);
  }
  if (this.useReplQueue != null) {
    this.logger.debug("Overriding property [useReplQueue] with value [" + this.useReplQueue + "]");
    configurationToOverride.clustering().async().useReplQueue(this.useReplQueue);
  }
  if (this.isolationLevel != null) {
    this.logger.debug("Overriding property [isolationLevel] with value [" + this.isolationLevel + "]");
    configurationToOverride.locking().isolationLevel(this.isolationLevel);
  }
  if (this.stateRetrievalTimeout != null) {
    this.logger.debug("Overriding property [stateRetrievalTimeout] with value [" + this.stateRetrievalTimeout + "]");
    configurationToOverride.clustering().stateTransfer().timeout(this.stateRetrievalTimeout);
  }
  if (this.stateRetrievalMaxNonProgressingLogWrites != null) {
    this.logger.debug("Overriding property [stateRetrievalMaxNonProgressingLogWrites] with value [" + this.stateRetrievalMaxNonProgressingLogWrites + "]");
  }
  if (this.stateRetrievalChunkSize != null) {
    this.logger.debug("Overriding property [stateRetrievalChunkSize] with value [" + this.stateRetrievalChunkSize + "]");
    configurationToOverride.clustering().stateTransfer().chunkSize(this.stateRetrievalChunkSize);
  }
  if (this.stateRetrievalInitialRetryWaitTime != null) {
    this.logger.debug("Overriding property [stateRetrievalInitialRetryWaitTime] with value [" + this.stateRetrievalInitialRetryWaitTime + "]");
  }
  if (this.isolationLevelClass != null) {
    this.logger.debug("Overriding property [isolationLevelClass] with value [" + this.isolationLevelClass + "]");
  }
  if (this.useLazyDeserialization != null) {
    this.logger.debug("Overriding property [useLazyDeserialization] with value [" + this.useLazyDeserialization + "]");
  }
  if (this.l1CacheEnabled != null) {
    this.logger.debug("Overriding property [l1CacheEnabled] with value [" + this.l1CacheEnabled + "]");
    configurationToOverride.clustering().l1().enabled(this.l1CacheEnabled);
  }
  if (this.l1Lifespan != null) {
    this.logger.debug("Overriding property [l1Lifespan] with value [" + this.l1Lifespan + "]");
    configurationToOverride.clustering().l1().lifespan(this.l1Lifespan);
  }
  if (this.l1OnRehash != null) {
    this.logger.debug("Overriding property [l1OnRehash] with value [" + this.l1OnRehash + "]");
    configurationToOverride.clustering().l1().l1OnRehash(this.l1OnRehash);
  }
  if (this.consistentHashClass != null) {
    this.logger.debug("Overriding property [consistentHashClass] with value [" + this.consistentHashClass + "]");
    configurationToOverride.clustering().hash().consistentHash(Util.<ConsistentHash>getInstance(this.consistentHashClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.numOwners != null) {
    this.logger.debug("Overriding property [numOwners] with value [" + this.numOwners + "]");
    configurationToOverride.clustering().hash().numOwners(this.numOwners);
  }
  if (this.rehashEnabled != null) {
    this.logger.debug("Overriding property [rehashEnabled] with value [" + this.rehashEnabled + "]");
    configurationToOverride.clustering().stateTransfer().fetchInMemoryState(this.rehashEnabled);
  }
  if (this.rehashWaitTime != null) {
    this.logger.debug("Overriding property [rehashWaitTime] with value [" + this.rehashWaitTime + "]");
  }
  if (this.useAsyncMarshalling != null) {
    this.logger.debug("Overriding property [useAsyncMarshalling] with value [" + this.useAsyncMarshalling + "]");
    configurationToOverride.clustering().async().asyncMarshalling(this.useAsyncMarshalling);
  }
  if (this.indexingEnabled != null) {
    this.logger.debug("Overriding property [indexingEnabled] with value [" + this.indexingEnabled + "]");
    configurationToOverride.indexing().enabled(this.indexingEnabled);
  }
  if (this.indexLocalOnly != null) {
    this.logger.debug("Overriding property [indexLocalOnly] with value [" + this.indexLocalOnly + "]");
    configurationToOverride.indexing().indexLocalOnly(this.indexLocalOnly);
  }
  if (this.customInterceptors != null) {
    this.logger.debug("Overriding property [customInterceptors] with value [" + this.customInterceptors + "]");
  }
  this.logger.debug("Finished applying configuration overrides to Configuration [" + configurationToOverride + "]");
}
