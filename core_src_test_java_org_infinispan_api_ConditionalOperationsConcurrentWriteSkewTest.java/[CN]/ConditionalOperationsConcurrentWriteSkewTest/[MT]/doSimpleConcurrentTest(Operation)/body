{
  assertEquals("Wrong number of owner. Please change the configuration",2,cache(0).getCacheConfiguration().clustering().hash().numOwners());
  final Object key=new MagicKey(cache(0),cache(1));
  try {
    CommandInterceptorController controller=injectController(cache(1));
    if (operation == Operation.REMOVE || operation == Operation.REPLACE) {
      cache(0).put(key,"v1");
    }
    controller.awaitCommit=new CountDownLatch(1);
    controller.blockCommit=new CountDownLatch(1);
    final Future<Boolean> tx1=fork(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        tm(1).begin();
        cache(1).put(key,"tx1");
        tm(1).commit();
        return Boolean.TRUE;
      }
    }
);
    controller.awaitCommit.await();
    controller.awaitPrepare=new CountDownLatch(1);
    controller.blockRemoteGet=new CountDownLatch(1);
    final Future<Boolean> tx2=fork(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        tm(2).begin();
switch (operation) {
case REMOVE:
          cache(2).remove(key,"v1");
        break;
case REPLACE:
      cache(2).replace(key,"v1","tx2");
    break;
case PUT:
  cache(2).putIfAbsent(key,"tx2");
break;
}
tm(2).commit();
return Boolean.TRUE;
}
}
);
controller.awaitPrepare.await();
controller.reset();
assertTrue("Tx1 has not finished",tx1.get(20,TimeUnit.SECONDS));
assertTrue("Tx2 has not finished",tx2.get(20,TimeUnit.SECONDS));
assertNoTransactions();
for (Cache cache : caches()) {
assertEquals("Wrong value for cache " + address(cache),"tx1",cache.get(key));
}
}
  finally {
removeController(cache(1));
}
}
