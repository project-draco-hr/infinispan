{
  final int NUM_PROCESS_THREADS=Runtime.getRuntime().availableProcessors();
  File file=new File(location,CACHE_NAME + ".dat");
  assertTrue(file.exists());
  final ExecutorService executor=Executors.newFixedThreadPool(NUM_PROCESS_THREADS,getTestThreadFactory("process"));
  final AtomicInteger count=new AtomicInteger(0);
  store.process(new KeyFilter(){
    @Override public boolean accept(    Object key){
      return true;
    }
  }
,new AdvancedCacheLoader.CacheLoaderTask(){
    @Override public void processEntry(    MarshalledEntry marshalledEntry,    AdvancedCacheLoader.TaskContext taskContext) throws InterruptedException {
      count.incrementAndGet();
      Object key=marshalledEntry.getKey();
      Object value=marshalledEntry.getValue();
      assertEquals(key,((String)value).substring(0,((String)key).length()));
    }
  }
,executor,true,true);
  log.tracef("Processed %d entries from the store",count.get());
  return null;
}
