{
  final Cache<Object,String>[] owners=getOwners(key,2);
  final Cache<Object,String> ownerCache=owners[0];
  final Cache<Object,String> backupOwnerCache=owners[1];
  final Cache<Object,String> nonOwnerCache=getFirstNonOwner(key);
  ownerCache.put(key,firstValue);
  assertIsNotInL1(nonOwnerCache,key);
  CyclicBarrier getBarrier=new CyclicBarrier(3);
  addBlockingInterceptor(ownerCache,getBarrier,GetCacheEntryCommand.class,getL1InterceptorClass(),true);
  addBlockingInterceptor(backupOwnerCache,getBarrier,GetCacheEntryCommand.class,getL1InterceptorClass(),true);
  try {
    Future<String> future=nonOwnerCache.getAsync(key);
    getBarrier.await(10,TimeUnit.SECONDS);
    Assert.assertEquals(firstValue,ownerCache.put(key,secondValue));
    getBarrier.await(10,TimeUnit.SECONDS);
    final String expectedValue;
    expectedValue=firstValue;
    Assert.assertEquals(expectedValue,future.get(10,TimeUnit.SECONDS));
    assertIsNotInL1(nonOwnerCache,key);
  }
  finally {
    removeAllBlockingInterceptorsFromCache(ownerCache);
    removeAllBlockingInterceptorsFromCache(backupOwnerCache);
  }
}
