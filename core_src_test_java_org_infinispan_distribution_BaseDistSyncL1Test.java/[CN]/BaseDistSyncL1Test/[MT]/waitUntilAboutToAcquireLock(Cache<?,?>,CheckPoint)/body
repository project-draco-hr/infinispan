{
  StateTransferLock stl=TestingUtil.extractComponent(cache,StateTransferLock.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(stl);
  StateTransferLock mockLock=mock(StateTransferLock.class,withSettings().defaultAnswer(forwardedAnswer));
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      checkPoint.trigger("pre_acquire_shared_topology_lock_invoked");
      checkPoint.awaitStrict("pre_acquire_shared_topology_lock_released",10,TimeUnit.SECONDS);
      return forwardedAnswer.answer(invocation);
    }
  }
).when(mockLock).acquireSharedTopologyLock();
  TestingUtil.replaceComponent(cache,StateTransferLock.class,mockLock,true);
  return stl;
}
