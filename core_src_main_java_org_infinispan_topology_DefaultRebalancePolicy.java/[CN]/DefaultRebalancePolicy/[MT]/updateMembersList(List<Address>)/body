{
  this.clusterMembers=newClusterMembers;
  log.tracef("Updating cluster members for all the caches. New list is %s",newClusterMembers);
  for (  Map.Entry<String,CacheStatus> e : cacheStatusMap.entrySet()) {
    String cacheName=e.getKey();
    CacheStatus cacheStatus=e.getValue();
synchronized (cacheStatus) {
      cacheStatus.joiners.retainAll(newClusterMembers);
      ConsistentHash currentCH=cacheStatus.cacheTopology.getCurrentCH();
      if (currentCH == null)       continue;
      ConsistentHash pendingCH=cacheStatus.cacheTopology.getPendingCH();
      boolean currentMembersValid=newClusterMembers.containsAll(currentCH.getMembers());
      boolean pendingMembersValid=pendingCH == null || newClusterMembers.containsAll(pendingCH.getMembers());
      if (!currentMembersValid || !pendingMembersValid) {
        int topologyId=cacheStatus.cacheTopology.getTopologyId();
        ConsistentHashFactory consistentHashFactory=cacheStatus.joinInfo.getConsistentHashFactory();
        List<Address> newCurrentMembers=new ArrayList<Address>(currentCH.getMembers());
        newCurrentMembers.retainAll(newClusterMembers);
        ConsistentHash newCurrentCH=consistentHashFactory.updateMembers(currentCH,newCurrentMembers);
        ConsistentHash newPendingCH=null;
        if (pendingCH != null) {
          List<Address> newPendingMembers=new ArrayList<Address>(cacheStatus.cacheTopology.getMembers());
          newPendingMembers.retainAll(newClusterMembers);
          newPendingCH=consistentHashFactory.updateMembers(pendingCH,newPendingMembers);
        }
        CacheTopology cacheTopology=new CacheTopology(topologyId,newCurrentCH,newPendingCH);
        log.tracef("Updating cache %s topology: %s",cacheName,cacheTopology);
        cacheStatus.cacheTopology=cacheTopology;
        clusterTopologyManager.updateConsistentHash(cacheName,cacheStatus.cacheTopology);
      }
    }
  }
}
