{
synchronized (cacheStatus) {
    boolean isRebalanceInProgress=cacheStatus.getCacheTopology().getPendingCH() != null;
    if (isRebalanceInProgress) {
      log.tracef("Ignoring request to start rebalancing cache %s, there's already a rebalance in progress: %s",cacheName,cacheStatus.getCacheTopology());
      return;
    }
    log.tracef("Rebalancing consistent hash for cache %s",cacheName);
    int newTopologyId=cacheStatus.getCacheTopology().getTopologyId() + 1;
    ConsistentHash currentCH=cacheStatus.getCacheTopology().getCurrentCH();
    ConsistentHashFactory chFactory=cacheStatus.getJoinInfo().getConsistentHashFactory();
    ConsistentHash updatedMembersCH=chFactory.updateMembers(currentCH,newMembers);
    ConsistentHash balancedCH=chFactory.rebalance(updatedMembersCH);
    if (balancedCH.equals(currentCH)) {
      log.tracef("The balanced CH is the same as the current CH, stopping rebalance");
      return;
    }
    CacheTopology cacheTopology=new CacheTopology(newTopologyId,currentCH,balancedCH);
    log.tracef("Updating cache %s topology: %s",cacheName,cacheTopology);
    cacheStatus.setCacheTopology(cacheTopology);
  }
  clusterTopologyManager.rebalance(cacheName,cacheStatus.getCacheTopology());
}
