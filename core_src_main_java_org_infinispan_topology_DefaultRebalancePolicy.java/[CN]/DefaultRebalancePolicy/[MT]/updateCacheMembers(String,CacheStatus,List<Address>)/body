{
  CacheJoinInfo joinInfo=cacheStatus.getJoinInfo();
  int topologyId=cacheStatus.getCacheTopology().getTopologyId();
  ConsistentHash currentCH=cacheStatus.getCacheTopology().getCurrentCH();
  ConsistentHash pendingCH=cacheStatus.getCacheTopology().getPendingCH();
  ConsistentHash newPendingCH=null;
  if (pendingCH != null) {
    newMembers.retainAll(pendingCH.getMembers());
    if (!newMembers.isEmpty()) {
      newPendingCH=joinInfo.getConsistentHashFactory().updateMembers(pendingCH,newMembers);
    }
 else {
      log.tracef("Zero new members remaining for cache %s",cacheName);
    }
  }
  newMembers.retainAll(currentCH.getMembers());
  ConsistentHash newCurrentCH;
  if (!newMembers.isEmpty()) {
    newCurrentCH=joinInfo.getConsistentHashFactory().updateMembers(currentCH,newMembers);
  }
 else {
    log.tracef("Zero old members remaining for cache %s",cacheName);
    newCurrentCH=newPendingCH;
  }
  boolean hasMembers=newCurrentCH != null;
  CacheTopology cacheTopology=new CacheTopology(topologyId,newCurrentCH,newPendingCH);
  updateConsistentHash(cacheName,cacheStatus,cacheTopology,hasMembers);
  if (hasMembers) {
    triggerRebalance(cacheName,cacheStatus);
  }
}
