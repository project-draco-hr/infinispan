{
  CacheStatus cacheStatus=cacheStatusMap.get(cacheName);
  if (cacheStatus == null) {
    log.tracef("Ignoring members update for cache %s, as we haven't initialized it yet",cacheName);
    return;
  }
  CacheJoinInfo joinInfo=cacheStatus.joinInfo;
  if (!leavers.isEmpty()) {
synchronized (cacheStatus) {
      int topologyId=cacheStatus.cacheTopology.getTopologyId();
      ConsistentHash currentCH=cacheStatus.cacheTopology.getCurrentCH();
      ConsistentHash pendingCH=cacheStatus.cacheTopology.getPendingCH();
      List<Address> newMembers=new ArrayList<Address>(clusterMembers);
      ConsistentHash newPendingCH=null;
      if (pendingCH != null) {
        newMembers.retainAll(pendingCH.getMembers());
        newPendingCH=joinInfo.getConsistentHashFactory().updateMembers(pendingCH,newMembers);
      }
      newMembers.retainAll(currentCH.getMembers());
      ConsistentHash newCurrentCH=joinInfo.getConsistentHashFactory().updateMembers(currentCH,newMembers);
      cacheStatus.cacheTopology=new CacheTopology(topologyId,newCurrentCH,newPendingCH);
      clusterTopologyManager.updateConsistentHash(cacheName,cacheStatus.cacheTopology);
      startRebalance(cacheName,cacheStatus,newMembers);
    }
  }
  if (!joiners.isEmpty()) {
synchronized (cacheStatus) {
      cacheStatus.joiners.addAll(joiners);
      int topologyId=cacheStatus.cacheTopology.getTopologyId();
      ConsistentHash currentCH=cacheStatus.cacheTopology.getCurrentCH();
      ConsistentHash pendingCH=cacheStatus.cacheTopology.getPendingCH();
      if (pendingCH != null) {
        log.debugf("Received join request from %s, but there is already a rebalance operation " + "in progress. The node will join once the current rebalance has ended.",joiners);
        return;
      }
      List<Address> newMembers=new ArrayList<Address>(cacheStatus.cacheTopology.getMembers());
      newMembers.addAll(cacheStatus.joiners);
      cacheStatus.joiners=new ArrayList<Address>();
      newMembers.retainAll(clusterMembers);
      if (currentCH == null) {
        ConsistentHash balancedCH=joinInfo.getConsistentHashFactory().create(joinInfo.getHashFunction(),joinInfo.getNumOwners(),joinInfo.getNumSegments(),newMembers);
        int newTopologyId=topologyId + 1;
        cacheStatus.cacheTopology=new CacheTopology(newTopologyId,balancedCH,null);
        clusterTopologyManager.updateConsistentHash(cacheName,cacheStatus.cacheTopology);
      }
 else {
        startRebalance(cacheName,cacheStatus,newMembers);
      }
    }
  }
}
