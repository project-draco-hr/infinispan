{
  CacheStatus cacheStatus=cacheStatusMap.get(cacheName);
  if (cacheStatus == null) {
    log.tracef("Ignoring members update for cache %s, as we haven't initialized it yet",cacheName);
    return;
  }
  CacheJoinInfo joinInfo=cacheStatus.getJoinInfo();
  if (!leavers.isEmpty()) {
synchronized (cacheStatus) {
      int topologyId=cacheStatus.getCacheTopology().getTopologyId();
      ConsistentHash currentCH=cacheStatus.getCacheTopology().getCurrentCH();
      ConsistentHash pendingCH=cacheStatus.getCacheTopology().getPendingCH();
      List<Address> newMembers=new ArrayList<Address>(clusterMembers);
      newMembers.removeAll(leavers);
      ConsistentHash newPendingCH=null;
      if (pendingCH != null) {
        newMembers.retainAll(pendingCH.getMembers());
        if (newMembers.isEmpty()) {
          log.tracef("Zero members remaining for cache %s",cacheName);
          return;
        }
        newPendingCH=joinInfo.getConsistentHashFactory().updateMembers(pendingCH,newMembers);
      }
      newMembers.retainAll(currentCH.getMembers());
      if (newMembers.isEmpty()) {
        log.tracef("Zero members remaining for cache %s",cacheName);
        return;
      }
      ConsistentHash newCurrentCH=joinInfo.getConsistentHashFactory().updateMembers(currentCH,newMembers);
      CacheTopology cacheTopology=new CacheTopology(topologyId,newCurrentCH,newPendingCH);
      updateConsistentHash(cacheName,cacheStatus,cacheTopology);
      triggerRebalance(cacheName,cacheStatus);
    }
  }
  if (!joiners.isEmpty()) {
synchronized (cacheStatus) {
      addUniqueJoiners(cacheStatus.getJoiners(),joiners);
      ConsistentHash currentCH=cacheStatus.getCacheTopology().getCurrentCH();
      if (currentCH == null) {
        installInitialTopology(cacheName,cacheStatus);
      }
 else {
        triggerRebalance(cacheName,cacheStatus);
      }
    }
  }
}
