{
synchronized (cacheStatus) {
    boolean isRebalanceInProgress=cacheStatus.getCacheTopology().getPendingCH() != null;
    if (isRebalanceInProgress) {
      log.tracef("Ignoring request to start rebalancing cache %s, there's already a rebalance in progress: %s",cacheName,cacheStatus.getCacheTopology());
      return;
    }
    List<Address> newMembers=new ArrayList<Address>(cacheStatus.getCacheTopology().getMembers());
    addUniqueJoiners(newMembers,cacheStatus.getJoiners());
    newMembers.retainAll(clusterMembers);
    log.tracef("Rebalancing consistent hash for cache %s, members are %s",cacheName,newMembers);
    int newTopologyId=cacheStatus.getCacheTopology().getTopologyId() + 1;
    ConsistentHash currentCH=cacheStatus.getCacheTopology().getCurrentCH();
    ConsistentHashFactory chFactory=cacheStatus.getJoinInfo().getConsistentHashFactory();
    ConsistentHash updatedMembersCH=chFactory.updateMembers(currentCH,newMembers);
    ConsistentHash balancedCH=chFactory.rebalance(updatedMembersCH);
    if (balancedCH.equals(currentCH)) {
      log.tracef("The balanced CH is the same as the current CH, not rebalancing");
      return;
    }
    CacheTopology cacheTopology=new CacheTopology(newTopologyId,currentCH,balancedCH);
    log.tracef("Updating cache %s topology for rebalance: %s",cacheName,cacheTopology);
    cacheStatus.setCacheTopology(cacheTopology);
  }
  clusterTopologyManager.rebalance(cacheName,cacheStatus.getCacheTopology());
}
