{
  boolean trace=log.isTraceEnabled();
  if (trace)   log.trace("Get values metrics");
  for (  MeasurementScheduleRequest req : metrics) {
    if (trace)     log.trace("Inspect metric " + req);
    String metric=req.getName();
    try {
      EmsBean bean=queryComponentBean(metric);
      if (bean != null) {
        if (trace)         log.trace("Retrieved mbean with name " + bean.getBeanName());
        bean.refreshAttributes();
        String attName=metric.substring(metric.indexOf(".") + 1);
        EmsAttribute att=bean.getAttribute(attName);
        if (att != null) {
          Object o=att.getValue();
          Class<?> attrType=att.getTypeClass();
          DataType type=req.getDataType();
          if (type == DataType.MEASUREMENT) {
            if (o != null) {
              MeasurementDataNumeric res=constructNumericMeasure(attrType,o,req);
              if (res != null)               report.addData(res);
            }
 else {
              if (log.isDebugEnabled())               log.debug("Metric (" + req.getName() + ") has null value, do not add to report");
            }
          }
 else           if (type == DataType.TRAIT) {
            String value=(String)o;
            if (trace)             log.trace("Metric (" + req.getName() + ") is trait with value "+ value);
            MeasurementDataTrait res=new MeasurementDataTrait(req,value);
            report.addData(res);
          }
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn("Attribute " + attName + " not found");
          }
        }
      }
    }
 catch (    Exception e) {
      if (log.isWarnEnabled()) {
        log.warn("getValues failed for " + metric,e);
      }
    }
  }
}
