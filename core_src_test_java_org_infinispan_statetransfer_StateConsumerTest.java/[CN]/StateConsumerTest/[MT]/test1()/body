{
  ConfigurationBuilder cb=new ConfigurationBuilder();
  cb.clustering().invocationBatching().enable().clustering().cacheMode(CacheMode.DIST_SYNC).clustering().stateTransfer().timeout(10000).versioning().enable().scheme(VersioningScheme.SIMPLE).locking().lockAcquisitionTimeout(200).writeSkewCheck(true).isolationLevel(IsolationLevel.REPEATABLE_READ);
  GlobalConfigurationBuilder gcb=GlobalConfigurationBuilder.defaultClusteredBuilder();
  GlobalConfiguration globalConfiguration=gcb.build();
  Configuration configuration=cb.build();
  Address[] addresses=new Address[10];
  for (int i=0; i < 10; i++) {
    addresses[i]=new TestAddress(i);
  }
  List<Address> members1=Arrays.asList(addresses[0],addresses[1],addresses[2],addresses[3],addresses[4]);
  List<Address> members2=Arrays.asList(addresses[0],addresses[1],addresses[2],addresses[3]);
  DefaultConsistentHashFactory chf=new DefaultConsistentHashFactory();
  DefaultConsistentHash ch1=chf.create(new MurmurHash3(),2,4,members1);
  DefaultConsistentHash ch2=chf.updateMembers(ch1,members2);
  DefaultConsistentHash ch3=chf.rebalance(ch2);
  log.debug(ch1);
  log.debug(ch2);
  Cache cache=mock(Cache.class);
  when(cache.getName()).thenReturn("testCache");
  ThreadFactory threadFactory=new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      String name="PooledExecutorThread-" + getClass().getSimpleName() + "-"+ r.hashCode();
      return new Thread(r,name);
    }
  }
;
  pooledExecutorService=new ThreadPoolExecutor(10,20,0L,TimeUnit.MILLISECONDS,new LinkedBlockingDeque<Runnable>(),threadFactory,new ThreadPoolExecutor.CallerRunsPolicy());
  StateTransferManager stateTransferManager=mock(StateTransferManager.class);
  CacheNotifier cacheNotifier=mock(CacheNotifier.class);
  RpcManager rpcManager=mock(RpcManager.class);
  Transport transport=mock(Transport.class);
  CommandsFactory commandsFactory=mock(CommandsFactory.class);
  CacheLoaderManager cacheLoaderManager=mock(CacheLoaderManager.class);
  DataContainer dataContainer=mock(DataContainer.class);
  TransactionTable transactionTable=mock(TransactionTable.class);
  StateTransferLock stateTransferLock=mock(StateTransferLock.class);
  InterceptorChain interceptorChain=mock(InterceptorChain.class);
  InvocationContextContainer icc=mock(InvocationContextContainer.class);
  TotalOrderManager totalOrderManager=mock(TotalOrderManager.class);
  when(commandsFactory.buildStateRequestCommand(any(StateRequestCommand.Type.class),any(Address.class),anyInt(),any(Set.class))).thenAnswer(new Answer<StateRequestCommand>(){
    @Override public StateRequestCommand answer(    InvocationOnMock invocation){
      return new StateRequestCommand("cache1",(StateRequestCommand.Type)invocation.getArguments()[0],(Address)invocation.getArguments()[1],(Integer)invocation.getArguments()[2],(Set)invocation.getArguments()[3]);
    }
  }
);
  when(transport.getViewId()).thenReturn(1);
  when(rpcManager.getAddress()).thenReturn(new TestAddress(0));
  when(rpcManager.getTransport()).thenReturn(transport);
  when(rpcManager.invokeRemotely(any(Collection.class),any(ReplicableCommand.class),any(RpcOptions.class))).thenAnswer(new Answer<Map<Address,Response>>(){
    @Override public Map<Address,Response> answer(    InvocationOnMock invocation){
      Collection<Address> recipients=(Collection<Address>)invocation.getArguments()[0];
      ReplicableCommand rpcCommand=(ReplicableCommand)invocation.getArguments()[1];
      if (rpcCommand instanceof StateRequestCommand) {
        StateRequestCommand cmd=(StateRequestCommand)rpcCommand;
        Map<Address,Response> results=new HashMap<Address,Response>();
        if (cmd.getType().equals(StateRequestCommand.Type.GET_TRANSACTIONS)) {
          for (          Address recipient : recipients) {
            results.put(recipient,SuccessfulResponse.create(new ArrayList<TransactionInfo>()));
          }
        }
 else         if (cmd.getType().equals(StateRequestCommand.Type.START_STATE_TRANSFER) || cmd.getType().equals(StateRequestCommand.Type.CANCEL_STATE_TRANSFER)) {
          for (          Address recipient : recipients) {
            results.put(recipient,SuccessfulResponse.SUCCESSFUL_EMPTY_RESPONSE);
          }
        }
        return results;
      }
      return Collections.emptyMap();
    }
  }
);
  when(rpcManager.getRpcOptionsBuilder(any(ResponseMode.class))).thenAnswer(new Answer<RpcOptionsBuilder>(){
    public RpcOptionsBuilder answer(    InvocationOnMock invocation){
      Object[] args=invocation.getArguments();
      return new RpcOptionsBuilder(10000,TimeUnit.MILLISECONDS,(ResponseMode)args[0],true);
    }
  }
);
  StateConsumerImpl stateConsumer=new StateConsumerImpl();
  stateConsumer.init(cache,pooledExecutorService,stateTransferManager,interceptorChain,icc,configuration,rpcManager,null,commandsFactory,cacheLoaderManager,dataContainer,transactionTable,stateTransferLock,cacheNotifier,totalOrderManager);
  stateConsumer.start();
  final List<InternalCacheEntry> cacheEntries=new ArrayList<InternalCacheEntry>();
  Object key1=new TestKey("key1",0,ch1);
  Object key2=new TestKey("key2",0,ch1);
  cacheEntries.add(new ImmortalCacheEntry(key1,"value1"));
  cacheEntries.add(new ImmortalCacheEntry(key2,"value2"));
  when(dataContainer.iterator()).thenAnswer(new Answer<Iterator<InternalCacheEntry>>(){
    @Override public Iterator<InternalCacheEntry> answer(    InvocationOnMock invocation){
      return cacheEntries.iterator();
    }
  }
);
  when(transactionTable.getLocalTransactions()).thenReturn(Collections.<LocalTransaction>emptyList());
  when(transactionTable.getRemoteTransactions()).thenReturn(Collections.<RemoteTransaction>emptyList());
  Set<Integer> segments=new HashSet<Integer>(Arrays.asList(0,1,2,3,4));
  Set<Integer> seg=new HashSet<Integer>(Arrays.asList(0));
  assertFalse(stateConsumer.hasActiveTransfers());
  stateConsumer.onTopologyUpdate(new CacheTopology(1,ch2,null),false);
  assertTrue(stateConsumer.hasActiveTransfers());
  stateConsumer.onTopologyUpdate(new CacheTopology(2,ch2,ch3),true);
  assertTrue(stateConsumer.hasActiveTransfers());
  stateConsumer.stop();
  assertFalse(stateConsumer.hasActiveTransfers());
}
