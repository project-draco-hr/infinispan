{
  ConfigurationBuilder cfg=TestCacheManagerFactory.getDefaultCacheConfiguration(true);
  cfg.clustering().cacheMode(cacheMode).stateTransfer().awaitInitialTransfer(false).transaction().lockingMode(LockingMode.PESSIMISTIC);
  manager(0).defineConfiguration(CACHE_NAME,cfg.build());
  manager(1).defineConfiguration(CACHE_NAME,cfg.build());
  final CheckPoint checkpoint=new CheckPoint();
  final AdvancedCache<Object,Object> cache0=advancedCache(0,CACHE_NAME);
  final TransactionManager tm0=cache0.getTransactionManager();
  StateProvider stateProvider=TestingUtil.extractComponent(cache0,StateProvider.class);
  StateProvider spyProvider=spy(stateProvider);
  TestingUtil.replaceComponent(cache0,StateProvider.class,spyProvider,true);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Object[] arguments=invocation.getArguments();
      Address source=(Address)arguments[0];
      int topologyId=(Integer)arguments[1];
      checkpoint.trigger("pre_get_transactions_" + topologyId + "_from_"+ source);
      checkpoint.awaitStrict("allow_get_transactions_" + topologyId + "_from_"+ source,10,SECONDS);
      return invocation.callRealMethod();
    }
  }
).when(spyProvider).getTransactionsForSegments(any(Address.class),anyInt(),any(Set.class));
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Object[] arguments=invocation.getArguments();
      CacheTopology topology=(CacheTopology)arguments[0];
      checkpoint.trigger("pre_ch_update_" + topology.getTopologyId());
      checkpoint.awaitStrict("pre_ch_update_" + topology.getTopologyId(),10,SECONDS);
      return invocation.callRealMethod();
    }
  }
).when(spyProvider).onTopologyUpdate(any(CacheTopology.class),eq(false));
  CyclicBarrier prepareBarrier=new CyclicBarrier(2);
  cache0.addInterceptorBefore(new BlockingInterceptor(prepareBarrier,PrepareCommand.class,false),TxDistributionInterceptor.class);
  StateTransferManager stm0=TestingUtil.extractComponent(cache0,StateTransferManager.class);
  int initialTopologyId=stm0.getCacheTopology().getTopologyId();
  int rebalanceTopologyId=initialTopologyId + 1;
  AdvancedCache<Object,Object> cache1=advancedCache(1,CACHE_NAME);
  checkpoint.awaitStrict("pre_get_transactions_" + rebalanceTopologyId + "_from_"+ address(1),10,SECONDS);
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      tm0.begin();
      cache0.lock("testkey");
      tm0.commit();
      return null;
    }
  }
);
  prepareBarrier.await(10,SECONDS);
  checkpoint.trigger("allow_get_transactions_" + rebalanceTopologyId + "_from_"+ address(1));
  prepareBarrier.await(10,SECONDS);
  future.get(10,SECONDS);
  int finalTopologyId=rebalanceTopologyId + 1;
  checkpoint.trigger("allow_ch_update_" + finalTopologyId);
  TestingUtil.waitForRehashToComplete(caches(CACHE_NAME));
  final TransactionTable tt0=TestingUtil.extractComponent(cache0,TransactionTable.class);
  final TransactionTable tt1=TestingUtil.extractComponent(cache1,TransactionTable.class);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return tt0.getLocalTxCount() == 0 && tt1.getRemoteTxCount() == 0;
    }
  }
);
}
