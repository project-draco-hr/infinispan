{
  final StateSequencer sequencer=new StateSequencer();
  sequencer.logicalThread("st","st:block_get_transactions","st:resume_get_transactions","st:block_ch_update","st:resume_ch_update");
  sequencer.logicalThread("tx","tx:before_lock","tx:block_remote_lock","tx:resume_remote_lock","tx:after_commit");
  sequencer.order("st:block_get_transactions","tx:before_lock","tx:block_remote_lock","st:resume_get_transactions");
  sequencer.order("st:block_ch_update","tx:resume_remote_lock","tx:after_commit","st:resume_ch_update");
  ConfigurationBuilder cfg=TestCacheManagerFactory.getDefaultCacheConfiguration(true);
  cfg.clustering().cacheMode(cacheMode).stateTransfer().awaitInitialTransfer(false).transaction().lockingMode(LockingMode.PESSIMISTIC);
  manager(0).defineConfiguration(CACHE_NAME,cfg.build());
  manager(1).defineConfiguration(CACHE_NAME,cfg.build());
  AdvancedCache<Object,Object> cache0=advancedCache(0,CACHE_NAME);
  TransactionManager tm0=cache0.getTransactionManager();
  StateTransferManager stm0=TestingUtil.extractComponent(cache0,StateTransferManager.class);
  int initialTopologyId=stm0.getCacheTopology().getTopologyId();
  int rebalanceTopologyId=initialTopologyId + 1;
  final int finalTopologyId=rebalanceTopologyId + 1;
  advanceOnComponentMethod(sequencer,cache0,StateProvider.class,matchMethodCall("getTransactionsForSegments").build()).before("st:block_get_transactions","st:resume_get_transactions");
  advanceOnGlobalComponentMethod(sequencer,manager(0),LocalTopologyManager.class,matchMethodCall("handleTopologyUpdate").withMatcher(1,new CacheTopologyMatcher(finalTopologyId)).build()).before("st:block_ch_update","st:resume_ch_update");
  AdvancedCache<Object,Object> cache1=advancedCache(1,CACHE_NAME);
  advanceOnInboundRpc(sequencer,cache(1,CACHE_NAME),matchCommand(LockControlCommand.class).withCache(CACHE_NAME).build()).before("tx:block_remote_lock","tx:resume_remote_lock");
  sequencer.advance("tx:before_lock");
  assertEquals(rebalanceTopologyId,stm0.getCacheTopology().getTopologyId());
  MagicKey key=new MagicKey("testkey",cache0);
  tm0.begin();
  cache0.lock(key);
  tm0.commit();
  sequencer.advance("tx:after_commit");
  TestingUtil.waitForRehashToComplete(caches(CACHE_NAME));
  assertEquals(finalTopologyId,stm0.getCacheTopology().getTopologyId());
  final TransactionTable tt0=TestingUtil.extractComponent(cache0,TransactionTable.class);
  final TransactionTable tt1=TestingUtil.extractComponent(cache1,TransactionTable.class);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return tt0.getLocalTxCount() == 0 && tt1.getRemoteTxCount() == 0;
    }
  }
);
  sequencer.stop();
}
