{
  ConfigurationBuilder builder=createConfigurationBuilder(isOptimistic);
  createCluster(builder,3);
  waitForClusterToForm();
  final int numKeys=5;
  log.infof("Putting %d keys into cache ..",numKeys);
  for (int i=0; i < numKeys; i++) {
    cache(0).put(i,"before_st_" + i);
  }
  log.info("Finished putting keys");
  for (int i=0; i < numKeys; i++) {
    assertEquals("before_st_" + i,cache(0).get(i));
    assertEquals("before_st_" + i,cache(1).get(i));
    assertEquals("before_st_" + i,cache(2).get(i));
  }
  final CountDownLatch applyStateProceedLatch=new CountDownLatch(1);
  final CountDownLatch applyStateStartedLatch1=new CountDownLatch(1);
  advancedCache(0).addInterceptor(new CommandInterceptor(){
    @Override protected Object handleDefault(    InvocationContext ctx,    VisitableCommand cmd) throws Throwable {
      if (cmd instanceof PutKeyValueCommand && ((PutKeyValueCommand)cmd).hasFlag(Flag.PUT_FOR_STATE_TRANSFER)) {
        applyStateStartedLatch1.countDown();
        if (!applyStateProceedLatch.await(15,TimeUnit.SECONDS)) {
          throw new TimeoutException();
        }
      }
      return super.handleDefault(ctx,cmd);
    }
  }
,0);
  final CountDownLatch applyStateStartedLatch2=new CountDownLatch(1);
  advancedCache(2).addInterceptor(new CommandInterceptor(){
    @Override protected Object handleDefault(    InvocationContext ctx,    VisitableCommand cmd) throws Throwable {
      if (cmd instanceof PutKeyValueCommand && ((PutKeyValueCommand)cmd).hasFlag(Flag.PUT_FOR_STATE_TRANSFER)) {
        applyStateStartedLatch2.countDown();
        if (!applyStateProceedLatch.await(15,TimeUnit.SECONDS)) {
          throw new TimeoutException();
        }
      }
      return super.handleDefault(ctx,cmd);
    }
  }
,0);
  consistentHashFactory.setOwnerIndexes(new int[]{0,1},new int[]{1,0});
  log.info("Killing node 1 ..");
  TestingUtil.killCacheManagers(manager(1));
  log.info("Node 1 killed");
  DataContainer dc0=advancedCache(0).getDataContainer();
  DataContainer dc2=advancedCache(2).getDataContainer();
  if (!applyStateStartedLatch1.await(15,TimeUnit.SECONDS)) {
    throw new TimeoutException();
  }
  if (!applyStateStartedLatch2.await(15,TimeUnit.SECONDS)) {
    throw new TimeoutException();
  }
  if (op == Operation.CLEAR) {
    log.info("Clearing cache ..");
    cache(0).clear();
    log.info("Finished clearing cache");
    assertEquals(0,dc0.size());
    assertEquals(0,dc2.size());
  }
 else   if (op == Operation.REMOVE) {
    log.info("Removing all keys one by one ..");
    for (int i=0; i < numKeys; i++) {
      cache(0).remove(i);
    }
    log.info("Finished removing keys");
    assertEquals(0,dc0.size());
    assertEquals(0,dc2.size());
  }
 else   if (op == Operation.PUT || op == Operation.PUT_MAP || op == Operation.REPLACE || op == Operation.PUT_IF_ABSENT) {
    log.info("Updating all keys ..");
    if (op == Operation.PUT) {
      for (int i=0; i < numKeys; i++) {
        cache(0).put(i,"after_st_" + i);
      }
    }
 else     if (op == Operation.PUT_MAP) {
      Map<Integer,String> toPut=new HashMap<Integer,String>();
      for (int i=0; i < numKeys; i++) {
        toPut.put(i,"after_st_" + i);
      }
      cache(0).putAll(toPut);
    }
 else     if (op == Operation.REPLACE) {
      for (int i=0; i < numKeys; i++) {
        String expectedOldValue="before_st_" + i;
        boolean replaced=cache(0).replace(i,expectedOldValue,"after_st_" + i);
        assertTrue(replaced);
      }
    }
 else {
      for (int i=0; i < numKeys; i++) {
        String expectedOldValue="before_st_" + i;
        Object prevValue=cache(0).putIfAbsent(i,"after_st_" + i);
        assertEquals(expectedOldValue,prevValue);
      }
    }
    log.info("Finished updating keys");
  }
  applyStateProceedLatch.countDown();
  TestingUtil.waitForRehashToComplete(cache(0),cache(2));
  log.infof("Data container of NodeA has %d keys: %s",dc0.size(),dc0.entrySet());
  log.infof("Data container of NodeC has %d keys: %s",dc2.size(),dc2.entrySet());
  if (op == Operation.CLEAR || op == Operation.REMOVE) {
    for (int i=0; i < numKeys; i++) {
      assertNull(dc0.get(i));
      assertNull(dc2.get(i));
    }
  }
 else   if (op == Operation.PUT || op == Operation.PUT_MAP || op == Operation.REPLACE) {
    ConsistentHash ch=advancedCache(0).getComponentRegistry().getStateTransferManager().getCacheTopology().getReadConsistentHash();
    for (int i=0; i < numKeys; i++) {
      int owners=0;
      if (dc0.get(i) != null) {
        owners++;
      }
      if (dc2.get(i) != null) {
        owners++;
      }
      assertEquals("Wrong number of owners",ch.locateOwners(i).size(),owners);
      String expected="after_st_" + i;
      assertEquals(expected,cache(0).get(i));
      assertEquals("after_st_" + i,cache(2).get(i));
    }
  }
 else {
    ConsistentHash ch=advancedCache(0).getComponentRegistry().getStateTransferManager().getCacheTopology().getReadConsistentHash();
    for (int i=0; i < numKeys; i++) {
      int owners=0;
      if (dc0.get(i) != null) {
        owners++;
      }
      if (dc2.get(i) != null) {
        owners++;
      }
      assertEquals("Wrong number of owners",ch.locateOwners(i).size(),owners);
      String expected="before_st_" + i;
      assertEquals(expected,cache(0).get(i));
      assertEquals(expected,cache(2).get(i));
    }
  }
}
