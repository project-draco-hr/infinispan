def release():
    assert_python_minimum_version(2, 5)
    require_settings_file()
    missing_keys = []
    expected_keys = [svn_base_key, local_tags_dir_key]
    for expected_key in expected_keys:
        if (expected_key not in settings):
            missing_keys.append(expected_key)
    if (len(missing_keys) > 0):
        print ('Entries %s are missing in configuration file %s!  Cannot proceed!' % (missing_keys, settings_file))
        sys.exit(2)
    if (len(sys.argv) < 2):
        helpAndExit()
    base_dir = os.getcwd()
    version = validateVersion(sys.argv[1])
    print ('Releasing Infinispan version ' + version)
    print 'Please stand by!'
    newVersion = ('%s/tags/%s' % (settings[svn_base_key], version))
    print ('Step 1: Tagging trunk in SVN as %s' % newVersion)
    tagInSubversion(version, newVersion)
    print 'Step 1: Complete'
    workingDir = ((settings[local_tags_dir_key] + '/') + version)
    print 'Step 2: Updating version number in source files'
    updateVersions(version, workingDir, base_dir)
    print 'Step 2: Complete'
    print 'Step 3: Build and test in Maven2'
    buildAndTest(workingDir)
    print 'Step 3: Complete'
    async_processes = []
    print 'Step 4: Uploading Javadocs'
    do_task(uploadJavadocs, [base_dir, workingDir, version], async_processes)
    print 'Step 4: Complete'
    print 'Step 5: Uploading to Sourceforge'
    do_task(uploadArtifactsToSourceforge, [version], async_processes)
    print 'Step 5: Complete'
    print 'Step 6: Uploading to configuration XML schema'
    do_task(uploadSchema, [base_dir, workingDir, version], async_processes)
    print 'Step 6: Complete'
    for p in async_processes:
        p.start()
    for p in async_processes:
        p.join()
    print '\n\n\nDone!  Now all you need to do is the remaining post-release tasks as outlined in https://docspace.corp.redhat.com/docs/DOC-28594'
