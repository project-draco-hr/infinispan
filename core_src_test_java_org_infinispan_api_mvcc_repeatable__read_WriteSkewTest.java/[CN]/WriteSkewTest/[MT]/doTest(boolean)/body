{
  final String key="k";
  final Set<Exception> w1exceptions=new HashSet<Exception>();
  final Set<Exception> w2exceptions=new HashSet<Exception>();
  final CountDownLatch w1Signal=new CountDownLatch(1);
  final CountDownLatch w2Signal=new CountDownLatch(1);
  final CountDownLatch threadSignal=new CountDownLatch(2);
  cache.put(key,"v");
  Future<Void> w1=fork(new Callable<Void>(){
    @Override public Void call() throws Exception {
      try {
        tm.begin();
        assertEquals("Wrong value in Writer-1 for key " + key + ".","v",cache.get(key));
        threadSignal.countDown();
        w1Signal.await();
        cache.put(key,"v2");
        tm.commit();
      }
 catch (      Exception e) {
        w1exceptions.add(e);
        if (tm.getTransaction() != null) {
          tm.rollback();
        }
      }
      return null;
    }
  }
);
  Future<Void> w2=fork(new Callable<Void>(){
    @Override public Void call() throws Exception {
      try {
        tm.begin();
        assertEquals("Wrong value in Writer-2 for key " + key + ".","v",cache.get(key));
        threadSignal.countDown();
        w2Signal.await();
        cache.put(key,"v3");
        tm.commit();
      }
 catch (      Exception e) {
        w2exceptions.add(e);
        if (tm.getTransaction() != null) {
          tm.rollback();
        }
      }
      return null;
    }
  }
);
  threadSignal.await(10,SECONDS);
  w1Signal.countDown();
  w1.get(10,SECONDS);
  w2Signal.countDown();
  w2.get(10,SECONDS);
  if (allowWriteSkew) {
    throwExceptions(w1exceptions);
    throwExceptions(w2exceptions);
    assertEquals("W2 should have overwritten W1's work!","v3",cache.get(key));
    assertNoLocks();
  }
 else {
    Collection<Exception> combined=new HashSet<Exception>(w1exceptions);
    combined.addAll(w2exceptions);
    assertFalse("Exceptions are expected!",combined.isEmpty());
    assertEquals("Expects one exception.",1,combined.size());
    assertTrue("Wrong exception type.",combined.iterator().next() instanceof RollbackException);
  }
}
