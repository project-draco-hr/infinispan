{
  setCacheWithWriteSkewCheck();
  postStart();
  final CountDownLatch latch1=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(1);
  final CountDownLatch latch3=new CountDownLatch(1);
  Future<Void> t1=fork(new Callable<Void>(){
    @Override public Void call() throws Exception {
      latch1.await();
      tm.begin();
      try {
        try {
          cache.get("k1");
          cache.put("k1","v1");
          cache.put("k2","thread 1");
        }
  finally {
          latch2.countDown();
        }
        latch3.await();
        tm.commit();
        fail("Commit should have failed!");
      }
 catch (      Exception e) {
        if (tm.getTransaction() != null) {
          try {
            tm.rollback();
          }
 catch (          SystemException e1) {
            log.error("Failed to rollback",e1);
          }
        }
        assertTrue(e instanceof RollbackException);
      }
      return null;
    }
  }
);
  Future<Void> t2=fork(new Callable<Void>(){
    public Void call() throws Exception {
      latch2.await();
      tm.begin();
      try {
        try {
          cache.get("k1");
          cache.put("k1","v2");
          cache.put("k3","thread 2");
          tm.commit();
        }
  finally {
          latch3.countDown();
        }
      }
 catch (      Exception e) {
        if (tm.getTransaction() != null) {
          try {
            tm.rollback();
          }
 catch (          SystemException e1) {
            log.error("Failed to rollback",e1);
          }
        }
        throw e;
      }
      return null;
    }
  }
);
  latch1.countDown();
  t1.get(10,SECONDS);
  t2.get(10,SECONDS);
  assertTrue("k1 is expected to be in cache.",cache.containsKey("k1"));
  assertEquals("Wrong value for key k1.","v2",cache.get("k1"));
}
