{
  setCacheWithWriteSkewCheck();
  postStart();
  final AtomicInteger successes=new AtomicInteger();
  final AtomicInteger rollbacks=new AtomicInteger();
  final CountDownLatch latch1=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(1);
  final CountDownLatch latch3=new CountDownLatch(1);
  Thread t1=new Thread(new Runnable(){
    public void run(){
      try {
        latch1.await();
        tm.begin();
        try {
          try {
            cache.get("k1");
            cache.put("k1","v1");
            cache.put("k2","thread 1");
          }
  finally {
            latch2.countDown();
          }
          latch3.await();
          tm.commit();
          successes.incrementAndGet();
        }
 catch (        Exception e) {
          if (e instanceof RollbackException) {
            rollbacks.incrementAndGet();
          }
          if (tm.getTransaction() != null) {
            try {
              tm.rollback();
            }
 catch (            SystemException e1) {
              log.error("Failed to rollback",e1);
            }
          }
          throw e;
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
,"Thread-1, WriteSkewTest");
  Thread t2=new Thread(new Runnable(){
    public void run(){
      try {
        latch2.await();
        tm.begin();
        try {
          try {
            cache.get("k1");
            cache.put("k1","v2");
            cache.put("k3","thread 2");
            tm.commit();
            successes.incrementAndGet();
          }
  finally {
            latch3.countDown();
          }
        }
 catch (        Exception e) {
          if (e instanceof RollbackException) {
            rollbacks.incrementAndGet();
          }
          if (tm.getTransaction() != null) {
            try {
              tm.rollback();
            }
 catch (            SystemException e1) {
              log.error("Failed to rollback",e1);
            }
          }
          throw e;
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
,"Thread-2, WriteSkewTest");
  t1.start();
  t2.start();
  latch1.countDown();
  t1.join();
  t2.join();
  log.trace("successes= " + successes.get());
  log.trace("rollbacks= " + rollbacks.get());
  assertTrue("k1 is expected to be in cache.",cache.containsKey("k1"));
  assertEquals("Wrong value for key k1.","v2",cache.get("k1"));
  assertEquals("Expects only one thread to succeed.",1,successes.get());
  assertEquals("Expects only one thread to fail",1,rollbacks.get());
}
