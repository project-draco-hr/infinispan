{
  Cache<MagicKey,String> cache0=cache(0);
  cache0.put(new MagicKey(cache(1),cache(2)),"not-local");
  cache0.put(new MagicKey(cache(0),cache(1)),"local");
  CheckPoint cp=new CheckPoint();
  blockEntryRetrieverResponse(cp,cache0);
  try (CloseableIterator<CacheEntry<MagicKey,String>> iterator=cache0.getAdvancedCache().filterEntries(AcceptAllKeyValueFilter.getInstance()).iterator()){
    blockNotifierPartitionStatusChanged(cp,cache0);
    cp.triggerForever("pre_notify_partition_released");
    cp.triggerForever("post_notify_partition_released");
    splitCluster(new int[]{0,1},new int[]{2,3});
    cp.await("post_notify_partition_invoked",10,TimeUnit.SECONDS);
    cp.triggerForever("pre_receive_response_released");
    cp.triggerForever("post_receive_response_released");
    try {
      while (iterator.hasNext()) {
        iterator.next();
      }
      fail("Expected AvailabilityException");
    }
 catch (    AvailabilityException e) {
    }
  }
 }
