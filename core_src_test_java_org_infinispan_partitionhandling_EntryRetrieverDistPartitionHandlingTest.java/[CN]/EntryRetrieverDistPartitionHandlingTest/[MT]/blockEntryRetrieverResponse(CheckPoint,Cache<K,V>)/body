{
  EntryRetriever<K,V> retriever=TestingUtil.extractComponent(cache,EntryRetriever.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(retriever);
  EntryRetriever mockRetriever=mock(EntryRetriever.class,withSettings().defaultAnswer(forwardedAnswer));
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      checkPoint.trigger("pre_receive_response_invoked");
      checkPoint.await("pre_receive_response_released",10,TimeUnit.SECONDS);
      try {
        return forwardedAnswer.answer(invocation);
      }
  finally {
        checkPoint.trigger("post_receive_response_invoked");
        checkPoint.await("post_receive_response_released",10,TimeUnit.SECONDS);
      }
    }
  }
).when(mockRetriever).receiveResponse(any(UUID.class),any(Address.class),anySetOf(Integer.class),anySetOf(Integer.class),anyCollectionOf(CacheEntry.class));
  TestingUtil.replaceComponent(cache,EntryRetriever.class,mockRetriever,true);
  return retriever;
}
