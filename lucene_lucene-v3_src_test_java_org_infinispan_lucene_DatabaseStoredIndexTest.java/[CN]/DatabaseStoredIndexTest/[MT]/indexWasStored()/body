{
  cache=cacheManager.getCache();
  AssertJUnit.assertTrue(cache.isEmpty());
  boolean failed=false;
  for (  Object key : cacheCopy.keySet()) {
    if (key instanceof FileReadLockKey) {
      System.out.println("Key found in store, shouldn't have persisted this or should have cleaned up all readlocks on directory close:" + key);
      failed=true;
    }
 else {
      Object expected=cacheCopy.get(key);
      Object actual=cache.get(key);
      if (expected == null && actual == null)       continue;
      if (expected instanceof byte[]) {
        expected=Util.printArray((byte[])expected,false);
        actual=Util.printArray((byte[])actual,false);
      }
      if (expected == null || !expected.equals(actual)) {
        System.out.println("Failure on key[" + key.toString() + "] expected value:\n\t"+ expected+ "\tactual value:\n\t"+ actual);
        failed=true;
      }
    }
  }
  AssertJUnit.assertFalse(failed);
  AssertJUnit.assertEquals("have a different number of keys",cacheCopy.keySet().size(),cache.keySet().size());
  Directory dir=DirectoryBuilder.newDirectoryInstance(cache,cache,cache,INDEX_NAME).create();
  assertTextIsFoundInIds(dir,"index",1);
  dir.close();
}
