{
  Cache<Integer,String> cache=cc.getCache();
  Collection<String> values;
  Map<Integer,String> dataIn=new HashMap<>();
  dataIn.put(1,v(m,1));
  dataIn.put(2,v(m,2));
  final long startTime=now();
  final long lifespan=EXPIRATION_TIMEOUT;
  cache.putAll(dataIn,lifespan,TimeUnit.MILLISECONDS);
  cache.getAdvancedCache().getTransactionManager().begin();
  try {
    Map<Integer,String> txDataIn=new HashMap<>();
    txDataIn.put(3,v(m,3));
    Collection<String> allValuesIn=new ArrayList<>(dataIn.values());
    allValuesIn.addAll(txDataIn.values());
    cache.putAll(txDataIn);
    while (true) {
      values=new ArrayList<>(cache.values());
      if (moreThanDurationElapsed(startTime,lifespan))       break;
      assertTrue(allValuesIn.containsAll(values));
      Thread.sleep(100);
    }
    while (!moreThanDurationElapsed(startTime,lifespan + EVICTION_CHECK_TIMEOUT)) {
      values=cache.values();
      if (values.size() == 1)       break;
    }
  }
  finally {
    cache.getAdvancedCache().getTransactionManager().commit();
  }
  assertEquals(1,values.size());
}
