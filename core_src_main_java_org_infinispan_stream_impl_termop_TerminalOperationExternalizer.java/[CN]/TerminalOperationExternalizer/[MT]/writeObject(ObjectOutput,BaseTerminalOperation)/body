{
  int number=operations.get(object.getClass(),-1);
  output.writeByte(number);
  output.writeObject(object.getIntermediateOperations());
switch (number) {
case SINGLE:
    output.writeObject(((SingleRunOperation)object).getFunction());
  break;
case SEGMENT_RETRYING:
output.writeObject(((SegmentRetryingOperation)object).getFunction());
break;
case FLATMAP_ITERATOR:
UnsignedNumeric.writeUnsignedInt(output,((FlatMapIteratorOperation)object).getBatchSize());
break;
case MAP_ITERATOR:
UnsignedNumeric.writeUnsignedInt(output,((MapIteratorOperation)object).getBatchSize());
break;
case NOMAP_ITERATOR:
UnsignedNumeric.writeUnsignedInt(output,((NoMapIteratorOperation)object).getBatchSize());
break;
case FOREACH:
UnsignedNumeric.writeUnsignedInt(output,((ForEachOperation)object).getBatchSize());
output.writeObject(((ForEachOperation)object).getConsumer());
break;
case FOREACH_FLAT_DOUBLE:
UnsignedNumeric.writeUnsignedInt(output,((ForEachFlatMapDoubleOperation)object).getBatchSize());
output.writeObject(((ForEachFlatMapDoubleOperation)object).getConsumer());
break;
case FOREACH_FLAT_INT:
UnsignedNumeric.writeUnsignedInt(output,((ForEachFlatMapIntOperation)object).getBatchSize());
output.writeObject(((ForEachFlatMapIntOperation)object).getConsumer());
break;
case FOREACH_FLAT_LONG:
UnsignedNumeric.writeUnsignedInt(output,((ForEachFlatMapLongOperation)object).getBatchSize());
output.writeObject(((ForEachFlatMapLongOperation)object).getConsumer());
break;
case FOREACH_DOUBLE:
UnsignedNumeric.writeUnsignedInt(output,((ForEachDoubleOperation)object).getBatchSize());
output.writeObject(((ForEachDoubleOperation)object).getConsumer());
break;
case FOREACH_INT:
UnsignedNumeric.writeUnsignedInt(output,((ForEachIntOperation)object).getBatchSize());
output.writeObject(((ForEachIntOperation)object).getConsumer());
break;
case FOREACH_LONG:
UnsignedNumeric.writeUnsignedInt(output,((ForEachLongOperation)object).getBatchSize());
output.writeObject(((ForEachLongOperation)object).getConsumer());
break;
case FOREACH_BI:
UnsignedNumeric.writeUnsignedInt(output,((ForEachBiOperation)object).getBatchSize());
output.writeObject(((ForEachBiOperation)object).getConsumer());
break;
case FOREACH_OBJ_DOUBLE:
UnsignedNumeric.writeUnsignedInt(output,((ForEachObjDoubleOperation)object).getBatchSize());
output.writeObject(((ForEachObjDoubleOperation)object).getConsumer());
break;
case FOREACH_OBJ_INT:
UnsignedNumeric.writeUnsignedInt(output,((ForEachObjIntOperation)object).getBatchSize());
output.writeObject(((ForEachObjIntOperation<Object>)object).getConsumer());
break;
case FOREACH_OBJ_LONG:
UnsignedNumeric.writeUnsignedInt(output,((ForEachObjLongOperation)object).getBatchSize());
output.writeObject(((ForEachObjLongOperation)object).getConsumer());
break;
case FOREACH_FLAT_OBJ_DOUBLE:
UnsignedNumeric.writeUnsignedInt(output,((ForEachFlatMapObjDoubleOperation)object).getBatchSize());
output.writeObject(((ForEachFlatMapObjDoubleOperation)object).getConsumer());
break;
case FOREACH_FLAT_OBJ_INT:
UnsignedNumeric.writeUnsignedInt(output,((ForEachFlatMapObjIntOperation)object).getBatchSize());
output.writeObject(((ForEachFlatMapObjIntOperation)object).getConsumer());
break;
case FOREACH_FLAT_OBJ_LONG:
UnsignedNumeric.writeUnsignedInt(output,((ForEachFlatMapObjLongOperation)object).getBatchSize());
output.writeObject(((ForEachFlatMapObjLongOperation)object).getConsumer());
break;
default :
throw new IllegalArgumentException();
}
}
