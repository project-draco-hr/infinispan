{
  int number=input.readUnsignedByte();
switch (number) {
case SINGLE:
    return new SingleRunOperation((Iterable<IntermediateOperation>)input.readObject(),null,(Function)input.readObject());
case SEGMENT_RETRYING:
  return new SegmentRetryingOperation((Iterable<IntermediateOperation>)input.readObject(),null,(Function)input.readObject());
case FLATMAP_ITERATOR:
return new FlatMapIteratorOperation((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input));
case MAP_ITERATOR:
return new MapIteratorOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input));
case NOMAP_ITERATOR:
return new NoMapIteratorOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input));
case FOREACH:
return new ForEachOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(Consumer)input.readObject());
case FOREACH_FLAT_DOUBLE:
return new ForEachFlatMapDoubleOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(DoubleConsumer)input.readObject());
case FOREACH_FLAT_INT:
return new ForEachFlatMapIntOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(IntConsumer)input.readObject());
case FOREACH_FLAT_LONG:
return new ForEachFlatMapLongOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(LongConsumer)input.readObject());
case FOREACH_DOUBLE:
return new ForEachDoubleOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(DoubleConsumer)input.readObject());
case FOREACH_INT:
return new ForEachIntOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(IntConsumer)input.readObject());
case FOREACH_LONG:
return new ForEachLongOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(LongConsumer)input.readObject());
case FOREACH_BI:
return new ForEachBiOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(BiConsumer)input.readObject());
case FOREACH_OBJ_DOUBLE:
return new ForEachObjDoubleOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(ObjDoubleConsumer)input.readObject());
case FOREACH_OBJ_INT:
return new ForEachObjIntOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(ObjIntConsumer)input.readObject());
case FOREACH_OBJ_LONG:
return new ForEachObjLongOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(ObjLongConsumer)input.readObject());
case FOREACH_FLAT_OBJ_DOUBLE:
return new ForEachFlatMapObjDoubleOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(ObjDoubleConsumer)input.readObject());
case FOREACH_FLAT_OBJ_INT:
return new ForEachFlatMapObjIntOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(ObjIntConsumer)input.readObject());
case FOREACH_FLAT_OBJ_LONG:
return new ForEachFlatMapObjLongOperation<>((Iterable<IntermediateOperation>)input.readObject(),null,UnsignedNumeric.readUnsignedInt(input),(ObjLongConsumer)input.readObject());
default :
throw new IllegalArgumentException("Found invalid number " + number);
}
}
