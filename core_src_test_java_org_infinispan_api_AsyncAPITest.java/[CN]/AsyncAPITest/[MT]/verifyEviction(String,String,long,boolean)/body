{
  if (startTime == null) {
    throw new IllegalStateException("markStartTime() must be called before verifyEviction(..)");
  }
  final long pollInterval=50;
  try {
    assertTrue(expectedValue.equals(c.get(key)) || TestingUtil.moreThanDurationElapsed(startTime,expectedLifetime));
    eventually(new Condition(){
      @Override public boolean isSatisfied(){
        if (touchKey) {
          return !c.containsKey(key);
        }
 else {
          InternalCacheEntry entry=c.getAdvancedCache().getDataContainer().peek(key);
          return entry == null || entry.isExpired(System.currentTimeMillis());
        }
      }
    }
,3 * expectedLifetime,pollInterval,TimeUnit.MILLISECONDS);
    long waitTime=Util.currentMillisFromNanotime() - startTime;
    Object value=c.get(key);
    assertNull(value);
    long lowerBound=expectedLifetime - expectedLifetime / 4;
    assertTrue("Entry evicted too soon!",lowerBound <= waitTime);
  }
  finally {
    startTime=null;
  }
}
