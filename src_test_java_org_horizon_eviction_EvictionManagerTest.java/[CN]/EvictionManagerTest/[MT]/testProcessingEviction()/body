{
  EvictionManagerImpl em=new EvictionManagerImpl();
  Configuration cfg=getCfg();
  cfg.setEvictionWakeUpInterval(0);
  cfg.setEvictionMaxEntries(100);
  ScheduledExecutorService mockService=createMock(ScheduledExecutorService.class);
  DataContainer mockDataContainer=createMock(DataContainer.class);
  Cache mockCache=createMock(Cache.class);
  em.initialize(mockService,cfg,mockCache,mockDataContainer,null);
  replay(mockService);
  em.start();
  verify(mockService);
  reset(mockDataContainer,mockCache);
  mockDataContainer.purgeExpired();
  expectLastCall().once();
  SizeGenerator sg=new SizeGenerator(500,500,1000,101,100,99);
  expect(mockDataContainer.size()).andAnswer(sg).anyTimes();
  Iterator mockIterator=createMock(Iterator.class);
  expect(mockIterator.hasNext()).andReturn(true).anyTimes();
  expect(mockIterator.next()).andReturn(InternalEntryFactory.create("key","value")).anyTimes();
  expect(mockDataContainer.iterator()).andReturn(mockIterator).once();
  mockCache.evict(eq("key"));
  expectLastCall().times(3);
  replay(mockDataContainer,mockIterator,mockCache);
  em.processEviction();
  verify(mockDataContainer,mockIterator,mockCache);
}
