{
  workerThread1.put("k1","v1");
  workerThread1.put("k2","v2");
  assertEquals(1,c1.size());
  assertEquals(1,c2.size());
  assertEquals("v1",remoteCache.get("k1"));
  assertEquals(1,c1.size());
  assertEquals("v2",remoteCache.get("k2"));
  assertEquals(1,c2.size());
  assertEquals(1,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(1,connectionPool.getNumIdle(hrServ2Addr));
  DelayTransportInterceptor dt1=new DelayTransportInterceptor(true);
  DelayTransportInterceptor dt2=new DelayTransportInterceptor(true);
  c1.getAdvancedCache().addInterceptor(dt1,0);
  c2.getAdvancedCache().addInterceptor(dt2,0);
  log.info("Interceptors added");
  workerThread1.putAsync("k3","v3");
  workerThread2.putAsync("k4","v4");
  log.info("Async calls for k3 and k4 is done.");
  for (int i=0; i < 10; i++) {
    log.trace("Active for server " + hrServ1Addr + " are:"+ connectionPool.getNumActive(hrServ1Addr));
    log.trace("Active for server " + hrServ2Addr + " are:"+ connectionPool.getNumActive(hrServ2Addr));
    if (connectionPool.getNumActive(hrServ1Addr) == 1 && connectionPool.getNumActive(hrServ2Addr) == 1)     break;
    Thread.sleep(1000);
  }
  log.info("Connection pool is " + connectionPool);
  assertEquals(2,connectionPool.getNumActive(hrServ1Addr));
  assertEquals(1,connectionPool.getNumActive(hrServ2Addr));
  assertEquals(0,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(0,connectionPool.getNumIdle(hrServ2Addr));
  workerThread3.putAsync("k5","v5");
  workerThread4.putAsync("k6","v6");
  for (int i=0; i < 10; i++) {
    log.trace("Active for server " + hrServ1Addr + " are:"+ connectionPool.getNumActive(hrServ1Addr));
    log.trace("Active for server " + hrServ2Addr + " are:"+ connectionPool.getNumActive(hrServ2Addr));
    if (connectionPool.getNumActive(hrServ1Addr) == 2 && connectionPool.getNumActive(hrServ2Addr) == 2)     break;
    Thread.sleep(1000);
  }
  assertEquals(0,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(0,connectionPool.getNumIdle(hrServ2Addr));
  workerThread5.putAsync("k7","v7");
  workerThread6.putAsync("k8","v8");
  assertEquals(2,connectionPool.getNumActive(hrServ1Addr));
  assertEquals(2,connectionPool.getNumActive(hrServ2Addr));
  assertEquals(0,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(0,connectionPool.getNumIdle(hrServ2Addr));
  dt1.allow();
  dt2.allow();
  assertExistKeyValue("k3","v3");
  assertExistKeyValue("k4","v4");
  assertExistKeyValue("k5","v5");
  assertExistKeyValue("k6","v6");
  assertExistKeyValue("k7","v7");
  assertExistKeyValue("k8","v8");
  assertEquals(1,connectionPool.getNumActive(hrServ1Addr));
  assertEquals(0,connectionPool.getNumActive(hrServ2Addr));
  assertEquals(1,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(2,connectionPool.getNumIdle(hrServ2Addr));
  assertEquals(1,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(2,connectionPool.getNumIdle(hrServ2Addr));
}
