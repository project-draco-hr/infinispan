{
  workerThread1.put("k1","v1");
  workerThread1.put("k2","v2");
  assertEquals(1,c1.size());
  assertEquals(1,c2.size());
  assertEquals("v1",remoteCache.get("k1"));
  assertEquals(1,c1.size());
  assertEquals("v2",remoteCache.get("k2"));
  assertEquals(1,c2.size());
  assertEquals(0,connectionPool.getNumActive(hrServ1Addr));
  assertEquals(0,connectionPool.getNumActive(hrServ2Addr));
  assertEquals(1,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(1,connectionPool.getNumIdle(hrServ2Addr));
  DelayTransportInterceptor dt1=new DelayTransportInterceptor(true);
  DelayTransportInterceptor dt2=new DelayTransportInterceptor(true);
  c1.getAdvancedCache().addInterceptor(dt1,0);
  c2.getAdvancedCache().addInterceptor(dt2,0);
  log.info("Cache operations blocked");
  try {
    workerThread1.putAsync("k3","v3");
    workerThread2.putAsync("k4","v4");
    log.info("Async calls for k3 and k4 is done.");
    Thread.sleep(100);
    assertEquals(1,connectionPool.getNumActive(hrServ1Addr));
    assertEquals(1,connectionPool.getNumActive(hrServ2Addr));
    assertEquals(0,connectionPool.getNumIdle(hrServ1Addr));
    assertEquals(0,connectionPool.getNumIdle(hrServ2Addr));
    workerThread3.putAsync("k5","v5");
    workerThread4.putAsync("k6","v6");
    Thread.sleep(100);
    assertEquals(2,connectionPool.getNumActive(hrServ1Addr));
    assertEquals(2,connectionPool.getNumActive(hrServ2Addr));
    assertEquals(0,connectionPool.getNumIdle(hrServ1Addr));
    assertEquals(0,connectionPool.getNumIdle(hrServ2Addr));
    workerThread5.putAsync("k7","v7");
    workerThread6.putAsync("k8","v8");
    Thread.sleep(100);
    assertEquals(2,connectionPool.getNumActive(hrServ1Addr));
    assertEquals(2,connectionPool.getNumActive(hrServ2Addr));
    assertEquals(0,connectionPool.getNumIdle(hrServ1Addr));
    assertEquals(0,connectionPool.getNumIdle(hrServ2Addr));
  }
 catch (  Exception e) {
    log.error(e);
  }
 finally {
    dt1.allow();
    dt2.allow();
  }
  eventually(new Condition(){
    public boolean isSatisfied() throws Exception {
      return connectionPool.getNumActive() == 0;
    }
  }
,1000);
  assertExistKeyValue("k3","v3");
  assertExistKeyValue("k4","v4");
  assertExistKeyValue("k5","v5");
  assertExistKeyValue("k6","v6");
  assertExistKeyValue("k7","v7");
  assertExistKeyValue("k8","v8");
  assertEquals(0,connectionPool.getNumActive(hrServ1Addr));
  assertEquals(0,connectionPool.getNumActive(hrServ2Addr));
  assertEquals(2,connectionPool.getNumIdle(hrServ1Addr));
  assertEquals(2,connectionPool.getNumIdle(hrServ2Addr));
}
