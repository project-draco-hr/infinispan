{
  final EmbeddedCacheManager manager1=createCacheManager();
  Cache<Object,Object> cache1=manager1.getCache(cacheName);
  TestingUtil.replaceComponent(manager1,ClusterTopologyManager.class,new DelayingClusterTopologyManager(manager1),true);
  EmbeddedCacheManager manager2=createCacheManager();
  manager2.getCache(cacheName);
  writeInitialData(cache1);
  WritingThread writerThread=new WritingThread(cache1,tx);
  writerThread.start();
  manager2.stop();
  TestingUtil.blockUntilViewsReceived(60000,false,cache1);
  TestingUtil.waitForRehashToComplete(cache1);
  EmbeddedCacheManager manager3=createCacheManager();
  Cache<Object,Object> cache3=manager3.getCache(cacheName);
  TestingUtil.blockUntilViewsReceived(60000,cache1,cache3);
  TestingUtil.waitForRehashToComplete(cache1,cache3);
  writerThread.stopThread();
  writerThread.join(60000);
  verifyInitialData(cache3);
  int count=writerThread.result();
  final ReplicationQueue replQueue1=cache1.getAdvancedCache().getComponentRegistry().getComponent(ReplicationQueue.class);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return replQueue1.getElementsCount() == 0;
    }
  }
);
  Thread.sleep(1000);
  for (int c=0; c < count; c++) {
    Object o=cache3.get("test" + c);
    assertNull(o);
  }
}
