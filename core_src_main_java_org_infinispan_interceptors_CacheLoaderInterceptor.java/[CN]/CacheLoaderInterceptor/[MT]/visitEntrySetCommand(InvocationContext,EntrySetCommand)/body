{
  Object entrySet=super.visitEntrySetCommand(ctx,command);
  if (enabled && !hasSkipLoadFlag(command)) {
    final ConcurrentHashSet<InternalCacheEntry> union=new ConcurrentHashSet<InternalCacheEntry>();
    final ConcurrentHashSet<Object> processedKeys=new ConcurrentHashSet<Object>();
    for (    InternalCacheEntry ice : (Set<InternalCacheEntry>)entrySet)     processedKeys.add(ice.getKey());
    persistenceManager.processOnAllStores(new CollectionKeyFilter(processedKeys),new AdvancedCacheLoader.CacheLoaderTask(){
      @Override public void processEntry(      MarshalledEntry marshalledEntry,      AdvancedCacheLoader.TaskContext taskContext) throws InterruptedException {
        union.add(iceFactory.create(marshalledEntry.getKey(),marshalledEntry.getValue(),marshalledEntry.getMetadata()));
      }
    }
,true,true);
    for (    InternalCacheEntry ice : (Set<InternalCacheEntry>)entrySet)     union.add(ice);
    return Collections.unmodifiableSet(union);
  }
  return entrySet;
}
