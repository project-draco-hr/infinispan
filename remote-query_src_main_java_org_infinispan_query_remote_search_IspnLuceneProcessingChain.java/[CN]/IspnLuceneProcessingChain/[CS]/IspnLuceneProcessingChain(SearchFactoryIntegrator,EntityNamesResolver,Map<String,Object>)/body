{
  queryResolverDelegate=new IspnLuceneQueryResolverDelegate();
  resolverProcessor=new QueryResolverProcessor(queryResolverDelegate);
  LucenePropertyHelper propertyHelper=new LucenePropertyHelper(searchFactory){
    @Override public Object convertToPropertyType(    String value,    Class<?> entityType,    String... propertyPath){
      Descriptors.FieldDescriptor field=queryResolverDelegate.getTargetType().findFieldByName(propertyPath[propertyPath.length - 1]);
      if (field != null) {
switch (field.getJavaType()) {
case INT:
          return Integer.parseInt(value);
case LONG:
        return Long.parseLong(value);
case FLOAT:
      return Float.parseFloat(value);
case DOUBLE:
    return Double.parseDouble(value);
case BOOLEAN:
  return Boolean.valueOf(value) ? TRUE_INT : FALSE_INT;
case ENUM:
return field.getEnumType().findValueByName(value).getNumber();
}
}
return value;
}
}
;
SingleEntityQueryBuilder<Query> queryBuilder=SingleEntityQueryBuilder.getInstance(new IspnLucenePredicateFactory(searchFactory.buildQueryBuilder(),propertyHelper),propertyHelper);
rendererDelegate=new LuceneQueryRendererDelegate(entityNames,queryBuilder,namedParameters);
rendererProcessor=new QueryRendererProcessor(rendererDelegate);
}
