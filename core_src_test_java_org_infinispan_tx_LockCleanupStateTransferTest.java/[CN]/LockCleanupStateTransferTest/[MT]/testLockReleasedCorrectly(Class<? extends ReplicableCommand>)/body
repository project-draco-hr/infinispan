{
  ComponentRegistry componentRegistry=advancedCache(1).getComponentRegistry();
  final ControlledCommandFactory ccf=new ControlledCommandFactory(componentRegistry.getCommandsFactory(),toBlock);
  TestingUtil.replaceField(ccf,"commandsFactory",componentRegistry,ComponentRegistry.class);
  advancedCache(1).getComponentRegistry().getGlobalComponentRegistry().registerNamedComponentRegistry(componentRegistry,EmbeddedCacheManager.DEFAULT_CACHE_NAME);
  ccf.gate.close();
  final Set<Object> keys=new HashSet<Object>(KEY_SET_SIZE);
  fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      tm(0).begin();
      for (int i=0; i < KEY_SET_SIZE; i++) {
        Object k=getKeyForCache(1);
        keys.add(k);
        cache(0).put(k,k);
      }
      tm(0).commit();
      return null;
    }
  }
);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      log.tracef("receivedCommands == %s",ccf.receivedCommands.get());
      return ccf.receivedCommands.get() == 1;
    }
  }
);
  if (toBlock == TxCompletionNotificationCommand.class) {
    DataContainer dc=advancedCache(1).getDataContainer();
    for (    Object k : keys) {
      assertEquals(k,dc.get(k).getValue());
    }
  }
  log.trace("Before state transfer");
  addClusterEnabledCacheManager(dcc);
  waitForClusterToForm();
  log.trace("After state transfer");
  final Set<Object> migratedKeys=new HashSet<Object>(KEY_SET_SIZE);
  for (  Object key : keys) {
    if (keyMapsToNode(key,2)) {
      migratedKeys.add(key);
    }
  }
  log.tracef("Number of migrated keys is %s",migratedKeys.size());
  if (migratedKeys.size() == 0)   return;
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      int remoteTxCount=TestingUtil.getTransactionTable(cache(2)).getRemoteTxCount();
      log.tracef("remoteTxCount=%s",remoteTxCount);
      return remoteTxCount == 1;
    }
  }
);
  log.trace("Releasing the gate");
  ccf.gate.open();
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      int remoteTxCount=TestingUtil.getTransactionTable(cache(2)).getRemoteTxCount();
      return remoteTxCount == 0;
    }
  }
);
  for (int i=0; i < 3; i++) {
    TransactionTable tt=TestingUtil.getTransactionTable(cache(i));
    assertEquals("For cache " + i,0,tt.getLocalTxCount());
    assertEquals("For cache " + i,0,tt.getRemoteTxCount());
  }
  for (  Object key : keys) {
    assertNotLocked(key);
    assertEquals(key,cache(0).get(key));
  }
  for (  Object k : migratedKeys) {
    assertFalse(advancedCache(0).getDataContainer().containsKey(k));
    assertFalse(advancedCache(1).getDataContainer().containsKey(k));
    assertTrue(advancedCache(2).getDataContainer().containsKey(k));
  }
}
