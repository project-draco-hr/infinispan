{
  if (configuration.getEvictionConfig() != null) {
    evictionConfig=configuration.getEvictionConfig();
    int size=evictionConfig.getEventQueueSize();
    capacityWarnThreshold=(98 * size) / 100 - 100;
    if (capacityWarnThreshold <= 0) {
      if (log.isWarnEnabled())       log.warn("Capacity warn threshold used in eviction is smaller than 1.");
    }
    evictionEventQueue=new LinkedBlockingQueue<EvictionEvent>(size);
    evictionAlgorithmConfig=evictionConfig.getAlgorithmConfig();
    evictionAlgorithm=createEvictionAlgorithm(evictionAlgorithmConfig,evictionConfig.getActionPolicyClass());
    evictionAlgorithm.start();
    if (evictionConfig.getWakeUpInterval() <= 0) {
      log.info("wakeUpInterval is <= 0, not starting eviction thread");
    }
 else {
      evictionTask=executor.scheduleWithFixedDelay(new ScheduledTask(),evictionConfig.getWakeUpInterval(),evictionConfig.getWakeUpInterval(),TimeUnit.MILLISECONDS);
    }
  }
}
