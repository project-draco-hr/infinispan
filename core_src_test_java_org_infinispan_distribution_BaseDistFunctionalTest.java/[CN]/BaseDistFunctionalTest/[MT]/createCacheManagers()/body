{
  cacheName="dist";
  configuration=getDefaultClusteredConfig(sync ? Configuration.CacheMode.DIST_SYNC : Configuration.CacheMode.DIST_ASYNC,tx);
  configuration.setRehashEnabled(performRehashing);
  configuration.setNumOwners(numOwners);
  if (!testRetVals) {
    configuration.setUnsafeUnreliableReturnValues(true);
    configuration.setIsolationLevel(IsolationLevel.REPEATABLE_READ);
  }
  configuration.setInvocationBatchingEnabled(batchingEnabled);
  configuration.setSyncReplTimeout(60,TimeUnit.SECONDS);
  configuration.setLockAcquisitionTimeout(lockTimeout,TimeUnit.SECONDS);
  configuration.setL1CacheEnabled(l1CacheEnabled);
  configuration.fluent().clustering().hash().numVirtualNodes(numVirtualNodes);
  if (groupsEnabled) {
    configuration.fluent().hash().groups().enabled(true);
    configuration.fluent().hash().groups().groupers(groupers);
  }
  if (l1CacheEnabled)   configuration.setL1OnRehash(l1OnRehash);
  if (l1CacheEnabled)   configuration.setL1InvalidationThreshold(l1Threshold);
  caches=createClusteredCaches(INIT_CLUSTER_SIZE,cacheName,configuration,new TransportFlags().withFD(true));
  reorderBasedOnCHPositions();
  if (INIT_CLUSTER_SIZE > 0)   c1=caches.get(0);
  if (INIT_CLUSTER_SIZE > 1)   c2=caches.get(1);
  if (INIT_CLUSTER_SIZE > 2)   c3=caches.get(2);
  if (INIT_CLUSTER_SIZE > 3)   c4=caches.get(3);
  cacheAddresses=new ArrayList<Address>(INIT_CLUSTER_SIZE);
  for (  Cache cache : caches) {
    EmbeddedCacheManager cacheManager=cache.getCacheManager();
    cacheAddresses.add(cacheManager.getAddress());
  }
}
