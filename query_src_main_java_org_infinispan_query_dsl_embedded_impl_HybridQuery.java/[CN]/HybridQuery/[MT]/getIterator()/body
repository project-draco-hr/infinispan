{
  return new CloseableIterator<ObjectFilter.FilterResult>(){
    private final Iterator<?> it=getBaseIterator();
    private ObjectFilter.FilterResult nextResult=null;
    private boolean isReady=false;
    @Override public void close(){
    }
    @Override public boolean hasNext(){
      updateNext();
      return nextResult != null;
    }
    @Override public ObjectFilter.FilterResult next(){
      updateNext();
      if (nextResult != null) {
        ObjectFilter.FilterResult next=nextResult;
        isReady=false;
        nextResult=null;
        return next;
      }
 else {
        throw new NoSuchElementException();
      }
    }
    private void updateNext(){
      if (!isReady) {
        while (it.hasNext()) {
          Object next=it.next();
          nextResult=objectFilter.filter(next);
          if (nextResult != null) {
            break;
          }
        }
        isReady=true;
      }
    }
  }
;
}
