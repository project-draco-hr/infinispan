{
  ClusteringDependentLogic cdl1=cache.getComponentRegistry().getComponent(ClusteringDependentLogic.class);
  ClusteringDependentLogic replaceCdl=new ClusteringDependentLogicDelegator(cdl1){
    @Override public void commitEntry(    CacheEntry entry,    Metadata metadata,    FlagAffectedCommand command,    InvocationContext ctx,    Flag trackFlag,    boolean l1Invalidation){
      if (entry instanceof ClearCacheEntry) {
        super.commitEntry(entry,metadata,command,ctx,trackFlag,l1Invalidation);
        return;
      }
      final Address source=ctx.getOrigin();
      if (entry instanceof ClearCacheEntry) {
        super.commitEntry(entry,metadata,command,ctx,trackFlag,l1Invalidation);
      }
 else {
        CacheEntry newEntry=new CacheEntryDelegator(entry){
          @Override public void commit(          DataContainer container,          Metadata metadata){
            checkPoint.trigger("pre_commit_entry_" + getKey() + "_from_"+ source);
            try {
              checkPoint.awaitStrict("resume_commit_entry_" + getKey() + "_from_"+ source,10,SECONDS);
            }
 catch (            InterruptedException e) {
              throw new RuntimeException(e);
            }
catch (            TimeoutException e) {
              throw new RuntimeException(e);
            }
            super.commit(container,metadata);
            checkPoint.trigger("post_commit_entry_" + getKey() + "_from_"+ source);
          }
        }
;
        super.commitEntry(newEntry,metadata,command,ctx,trackFlag,l1Invalidation);
      }
    }
  }
;
  TestingUtil.replaceComponent(cache,ClusteringDependentLogic.class,replaceCdl,true);
}
