{
  final AdvancedCache<Object,Object> cache0=advancedCache(0);
  final String key="key";
  final Object previousValue=op.getPreviousValue();
  if (previousValue != null) {
    cache0.put(key,previousValue);
    assertEquals(previousValue,cache0.get(key));
    log.tracef("Previous value inserted: %s = %s",key,previousValue);
  }
  int preJoinTopologyId=cache0.getComponentRegistry().getStateTransferManager().getCacheTopology().getTopologyId();
  final CheckPoint checkPoint=new CheckPoint();
  ControlledRpcManager blockingRpcManager0=blockStateResponseCommand(cache0);
  blockRebalanceConfirmation(manager(0),checkPoint);
  log.tracef("Starting the cache on the joiner");
  ConfigurationBuilder c=getConfigurationBuilder();
  c.clustering().stateTransfer().awaitInitialTransfer(false);
  addClusterEnabledCacheManager(c);
  final AdvancedCache<Object,Object> cache1=advancedCache(1);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return cache0.getRpcManager().getMembers().size() == 2 && cache1.getRpcManager().getMembers().size() == 2;
    }
  }
);
  blockEntryCommit(checkPoint,cache1);
  blockingRpcManager0.waitForCommandToBlock();
  blockingRpcManager0.stopBlocking();
  checkPoint.awaitStrict("pre_commit_entry_" + key + "_from_"+ null,5,SECONDS);
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return op.perform(cache0,key);
    }
  }
);
  boolean blocked=checkPoint.peek(3,SECONDS,"pre_commit_entry_" + key + "_from_"+ address(0)) == null;
  assertTrue(blocked);
  checkPoint.trigger("resume_commit_entry_" + key + "_from_"+ null);
  checkPoint.awaitStrict("pre_commit_entry_" + key + "_from_"+ address(0),5,SECONDS);
  checkPoint.trigger("resume_commit_entry_" + key + "_from_"+ address(0));
  checkPoint.awaitStrict("post_commit_entry_" + key + "_from_"+ null,10,SECONDS);
  checkPoint.awaitStrict("post_commit_entry_" + key + "_from_"+ address(0),10,SECONDS);
  Object result=future.get(10,TimeUnit.SECONDS);
  assertEquals(op.getReturnValue(),result);
  log.tracef("%s operation is done",op);
  int rebalanceTopologyId=preJoinTopologyId + 1;
  checkPoint.trigger("resume_rebalance_confirmation_" + rebalanceTopologyId + "_from_"+ address(0));
  checkPoint.trigger("resume_rebalance_confirmation_" + rebalanceTopologyId + "_from_"+ address(1));
  TestingUtil.waitForRehashToComplete(cache0,cache1);
  assertEquals(op.getValue(),cache0.get(key));
  assertEquals(op.getValue(),cache1.get(key));
}
