{
  EmbeddedCacheManager cm1=addClusterEnabledCacheManager(buildConfig(true));
  final Cache<Object,Object> c1=cm1.getCache();
  DelayInterceptor di1=findInterceptor(c1,DelayInterceptor.class);
  int initialTopologyId=extractComponent(c1,StateTransferManager.class).getCacheTopology().getTopologyId();
  EmbeddedCacheManager cm2=addClusterEnabledCacheManager(buildConfig(true));
  Cache c2=cm2.getCache();
  DelayInterceptor di2=findInterceptor(c2,DelayInterceptor.class);
  waitForStateTransfer(initialTopologyId + 2,c1,c2);
  Future<Object> f=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      log.tracef("Initiating a transaction on %s",c1);
      c1.put("k","v");
      return null;
    }
  }
);
  EmbeddedCacheManager cm3=addClusterEnabledCacheManager(buildConfig(true));
  Cache c3=cm3.getCache();
  DelayInterceptor di3=findInterceptor(c3,DelayInterceptor.class);
  waitForStateTransfer(initialTopologyId + 4,c1,c2,c3);
  log.tracef("Forwarding the prepare command from %s",c2);
  di2.unblock(1);
  EmbeddedCacheManager cm4=addClusterEnabledCacheManager(buildConfig(true));
  Cache c4=cm4.getCache();
  DelayInterceptor di4=findInterceptor(c4,DelayInterceptor.class);
  waitForStateTransfer(initialTopologyId + 6,c1,c2,c3,c4);
  log.tracef("Forwarding the prepare command from %s",c3);
  di3.unblock(1);
  di2.unblock(2);
  di4.unblock(1);
  log.tracef("Forwarding the prepare command from %s",c1);
  di1.unblock(1);
  di2.unblock(3);
  di3.unblock(2);
  di4.unblock(2);
  log.tracef("Waiting for the transaction to finish on %s",c1);
  f.get(10,TimeUnit.SECONDS);
  log.tracef("Transaction finished on %s",c1);
  assertEquals(di1.getCounter(),1);
  assertEquals(di2.getCounter(),3);
  assertEquals(di3.getCounter(),2);
  assertEquals(di4.getCounter(),2);
}
