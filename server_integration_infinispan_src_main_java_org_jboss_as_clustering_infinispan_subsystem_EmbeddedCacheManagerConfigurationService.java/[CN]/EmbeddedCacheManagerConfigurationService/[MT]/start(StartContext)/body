{
  GlobalConfigurationBuilder builder=new GlobalConfigurationBuilder();
  ModuleLoader moduleLoader=this.dependencies.getModuleLoader();
  builder.serialization().classResolver(ModularClassResolver.getInstance(moduleLoader));
  ClassLoader loader=null;
  try {
    loader=(this.moduleId != null) ? moduleLoader.loadModule(this.moduleId).getClassLoader() : EmbeddedCacheManagerConfiguration.class.getClassLoader();
    builder.classLoader(loader);
    int id=Ids.MAX_ID;
    for (    SimpleExternalizer<?> externalizer : ServiceFinder.load(SimpleExternalizer.class,loader)) {
      builder.serialization().addAdvancedExternalizer(id++,externalizer);
    }
  }
 catch (  ModuleLoadException e) {
    throw new StartException(e);
  }
  builder.shutdown().hookBehavior(ShutdownHookBehavior.DONT_REGISTER);
  TransportConfiguration transport=this.dependencies.getTransportConfiguration();
  TransportConfigurationBuilder transportBuilder=builder.transport();
  if (transport != null) {
    transportBuilder.transport(new ChannelTransport(context.getController().getServiceContainer(),ChannelService.getServiceName(this.name)));
    Long timeout=transport.getLockTimeout();
    if (timeout != null) {
      transportBuilder.distributedSyncTimeout(timeout.longValue());
    }
    org.jboss.as.clustering.jgroups.TransportConfiguration.Topology topology=transport.getChannelFactory().getProtocolStackConfiguration().getTransport().getTopology();
    if (topology != null) {
      String site=topology.getSite();
      if (site != null) {
        transportBuilder.siteId(site);
      }
      String rack=topology.getRack();
      if (rack != null) {
        transportBuilder.rackId(rack);
      }
      String machine=topology.getMachine();
      if (machine != null) {
        transportBuilder.machineId(machine);
      }
    }
    transportBuilder.clusterName(this.name);
    Executor executor=transport.getExecutor();
    if (executor != null) {
      builder.transport().transportThreadPool().threadPoolFactory(new ManagedExecutorFactory(executor));
    }
    Executor totalOrderExecutor=transport.getTotalOrderExecutor();
    if (totalOrderExecutor != null) {
      builder.transport().totalOrderThreadPool().threadPoolFactory(new ManagedExecutorFactory(totalOrderExecutor));
    }
    Executor remoteCommandExecutor=transport.getRemoteCommandExecutor();
    if (remoteCommandExecutor != null) {
      builder.transport().remoteCommandThreadPool().threadPoolFactory(new ManagedExecutorFactory(remoteCommandExecutor));
    }
  }
  AuthorizationConfiguration authorization=this.dependencies.getAuthorizationConfiguration();
  GlobalAuthorizationConfigurationBuilder authorizationBuilder=builder.security().authorization();
  if (authorization != null) {
    authorizationBuilder.enable();
    if (authorization.getPrincipalMapper() != null) {
      try {
        authorizationBuilder.principalRoleMapper(Class.forName(authorization.getPrincipalMapper(),true,loader).asSubclass(PrincipalRoleMapper.class).newInstance());
      }
 catch (      Exception e) {
        throw new StartException(e);
      }
    }
 else {
      authorizationBuilder.principalRoleMapper(new ClusterRoleMapper());
    }
    for (    Entry<String,List<String>> role : authorization.getRoles().entrySet()) {
      GlobalRoleConfigurationBuilder roleBuilder=authorizationBuilder.role(role.getKey());
      for (      String perm : role.getValue()) {
        roleBuilder.permission(perm);
      }
    }
  }
  Executor listenerExecutor=this.dependencies.getListenerExecutor();
  if (listenerExecutor != null) {
    builder.listenerThreadPool().threadPoolFactory(new ManagedExecutorFactory(listenerExecutor));
  }
  Executor asyncExecutor=this.dependencies.getAsyncExecutor();
  if (asyncExecutor != null) {
    builder.asyncThreadPool().threadPoolFactory(ThreadPoolExecutorFactories.mkManagedExecutorFactory(asyncExecutor));
  }
  ScheduledExecutorService expirationExecutor=this.dependencies.getExpirationExecutor();
  if (expirationExecutor != null) {
    builder.expirationThreadPool().threadPoolFactory(new ManagedScheduledExecutorFactory(expirationExecutor));
  }
  ScheduledExecutorService replicationQueueExecutor=this.dependencies.getReplicationQueueExecutor();
  if (replicationQueueExecutor != null) {
    builder.replicationQueueThreadPool().threadPoolFactory(new ManagedScheduledExecutorFactory(replicationQueueExecutor));
  }
  Executor stateTransferExecutor=this.dependencies.getStateTransferExecutor();
  if (stateTransferExecutor != null) {
    builder.stateTransferThreadPool().threadPoolFactory(new ManagedExecutorFactory(stateTransferExecutor));
  }
  GlobalJmxStatisticsConfigurationBuilder jmxBuilder=builder.globalJmxStatistics().cacheManagerName(this.name);
  jmxBuilder.jmxDomain(EmbeddedCacheManagerService.getServiceName(null).getCanonicalName());
  MBeanServer server=this.dependencies.getMBeanServer();
  if (server != null && this.statistics) {
    jmxBuilder.enable().mBeanServerLookup(new MBeanServerProvider(server)).allowDuplicateDomains(true);
  }
 else {
    jmxBuilder.disable();
  }
  this.config=builder.build();
}
