{
  super.start();
  if (constructInternalBlobstores) {
    if (cfg.getCloudService() == null)     throw new ConfigurationException("CloudService must be set!");
    if (cfg.getIdentity() == null)     throw new ConfigurationException("Identity must be set");
    if (cfg.getPassword() == null)     throw new ConfigurationException("Password must be set");
  }
  if (cfg.getBucketPrefix() == null)   throw new ConfigurationException("CloudBucket must be set");
  containerName=getThisContainerName();
  try {
    if (constructInternalBlobstores) {
      ctx=new BlobStoreContextFactory().createContext(cfg.getCloudService(),cfg.getIdentity(),cfg.getPassword(),ImmutableSet.of(new EnterpriseConfigurationModule(),new Log4JLoggingModule()),new Properties());
      blobStore=ctx.getBlobStore();
      asyncBlobStore=ctx.getAsyncBlobStore();
    }
    if (!blobStore.containerExists(containerName)) {
      Location chosenLoc=null;
      if (cfg.getCloudServiceLocation() != null && cfg.getCloudServiceLocation().trim().length() > 0) {
        Map<String,? extends Location> idToLocation=Maps.uniqueIndex(blobStore.listAssignableLocations(),new Function<Location,String>(){
          @Override public String apply(          Location input){
            return input.getId();
          }
        }
);
        String loc=cfg.getCloudServiceLocation().trim().toLowerCase();
        chosenLoc=idToLocation.get(loc);
        if (chosenLoc == null) {
          log.warn(String.format("Unable to use configured Cloud Service Location [%s].  Available locations for Cloud Service [%s] are %s",loc,cfg.getCloudService(),idToLocation.keySet()));
        }
      }
      blobStore.createContainerInLocation(chosenLoc,containerName);
    }
    pollFutures=!cfg.getAsyncStoreConfig().isEnabled();
  }
 catch (  RuntimeException ioe) {
    throw new CacheLoaderException("Unable to create context",ioe);
  }
}
