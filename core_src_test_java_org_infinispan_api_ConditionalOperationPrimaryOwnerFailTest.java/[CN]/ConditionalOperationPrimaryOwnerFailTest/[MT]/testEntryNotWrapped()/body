{
  assertClusterSize("Wrong cluster size!",3);
  final Object key=new MagicKey(cache(0),cache(1));
  final Cache<Object,Object> futureBackupOwnerCache=cache(2);
  cache(0).put(key,INITIAL_VALUE);
  final InboundInvocationHandler spyHandler=spyInvocationHandler(futureBackupOwnerCache);
  final EntryFactory spyEntryFactory=spyEntryFactory(futureBackupOwnerCache);
  final CountDownLatch latch1=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(1);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      CacheRpcCommand command=(CacheRpcCommand)invocation.getArguments()[0];
      if (command instanceof StateResponseCommand) {
        log.debugf("Blocking command %s",command);
        latch2.countDown();
        latch1.await();
      }
      return invocation.callRealMethod();
    }
  }
).when(spyHandler).handle(any(CacheRpcCommand.class),any(Address.class),any(Response.class),anyBoolean());
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      InvocationContext context=(InvocationContext)invocation.getArguments()[0];
      log.debugf("wrapEntryForPut invoked with %s",context);
      assertFalse("Entry should not be wrapped!",context.isOriginLocal());
      return invocation.callRealMethod();
    }
  }
).when(spyEntryFactory).wrapEntryForPut(any(InvocationContext.class),anyObject(),any(InternalCacheEntry.class),anyBoolean(),any(FlagAffectedCommand.class),anyBoolean());
  fork(new Runnable(){
    @Override public void run(){
      killMember(1);
    }
  }
,false);
  latch2.await();
  futureBackupOwnerCache.put(key,FINAL_VALUE);
  latch1.countDown();
}
