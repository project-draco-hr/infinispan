{
  final ObjectPropertyHelper<?> propertyHelper=getFirstPhaseMatcher().getPropertyHelper();
class PropertyReplacer implements Visitor {
    @Override public BooleanExpr visit(    NotExpr notExpr){
      return new NotExpr(notExpr.getChild().acceptVisitor(this));
    }
    @Override public BooleanExpr visit(    OrExpr orExpr){
      List<BooleanExpr> visitedChildren=new ArrayList<BooleanExpr>();
      for (      BooleanExpr c : orExpr.getChildren()) {
        visitedChildren.add(c.acceptVisitor(this));
      }
      return new OrExpr(visitedChildren);
    }
    @Override public BooleanExpr visit(    AndExpr andExpr){
      List<BooleanExpr> visitedChildren=new ArrayList<BooleanExpr>();
      for (      BooleanExpr c : andExpr.getChildren()) {
        visitedChildren.add(c.acceptVisitor(this));
      }
      return new AndExpr(visitedChildren);
    }
    @Override public BooleanExpr visit(    ConstantBooleanExpr constantBooleanExpr){
      return constantBooleanExpr;
    }
    @Override public BooleanExpr visit(    IsNullExpr isNullExpr){
      return new IsNullExpr(isNullExpr.getChild().acceptVisitor(this));
    }
    @Override public BooleanExpr visit(    ComparisonExpr comparisonExpr){
      return new ComparisonExpr(comparisonExpr.getLeftChild().acceptVisitor(this),comparisonExpr.getRightChild(),comparisonExpr.getComparisonType());
    }
    @Override public BooleanExpr visit(    LikeExpr likeExpr){
      return new LikeExpr(likeExpr.getChild().acceptVisitor(this),likeExpr.getPattern());
    }
    @Override public ValueExpr visit(    ConstantValueExpr constantValueExpr){
      return constantValueExpr;
    }
    @Override public ValueExpr visit(    PropertyValueExpr propertyValueExpr){
      PropertyPath p=new PropertyPath(null,propertyValueExpr.getPropertyPath());
      RowPropertyHelper.ColumnMetadata c=columns.get(p);
      if (c == null) {
        throw new ParsingException("The expression '" + propertyValueExpr.toJpaString() + "' must be part of an aggregate function or it should be included in the GROUP BY clause");
      }
      return new PropertyValueExpr(c.getColumnName(),propertyValueExpr.isRepeated());
    }
    @Override public ValueExpr visit(    AggregationExpr aggregationExpr){
      PropertyPath p=new PropertyPath(aggregationExpr.getAggregationType(),aggregationExpr.getPropertyPath());
      RowPropertyHelper.ColumnMetadata c=columns.get(p);
      if (c == null) {
        int idx=columns.size();
        Class<?> propertyType=propertyHelper.getPrimitivePropertyType(parsingResult.getTargetEntityName(),aggregationExpr.getPropertyPath());
        c=new RowPropertyHelper.ColumnMetadata(idx,"C" + idx,propertyType);
        columns.put(p,c);
      }
      return new PropertyValueExpr(c.getColumnName(),aggregationExpr.isRepeated());
    }
  }
  return expr.acceptVisitor(new PropertyReplacer());
}
