{
  final EntityNamesResolver entityNamesResolver=new EntityNamesResolver(){
    @Override public Class<?> getClassFromName(    String entityName){
      try {
        return Util.loadClassStrict(entityName,null);
      }
 catch (      ClassNotFoundException e) {
        return null;
      }
    }
  }
;
  FieldBridgeProvider fieldBridgeProvider=new FieldBridgeProvider(){
    private final ClassBasedLucenePropertyHelper propertyHelper=new ClassBasedLucenePropertyHelper(getSearchFactory(),entityNamesResolver);
    @Override public FieldBridge getFieldBridge(    String type,    String propertyPath){
      return propertyHelper.getFieldBridge(type,Arrays.asList(propertyPath.split("[.]")));
    }
  }
;
  return new LuceneProcessingChain.Builder(getSearchFactory(),entityNamesResolver).namedParameters(namedParameters).buildProcessingChainForClassBasedEntities(fieldBridgeProvider);
}
