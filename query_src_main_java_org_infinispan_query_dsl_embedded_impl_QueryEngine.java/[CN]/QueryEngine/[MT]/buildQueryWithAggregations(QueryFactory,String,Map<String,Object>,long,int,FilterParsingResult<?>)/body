{
  if (parsingResult.getProjectedPaths() == null) {
    throw new ParsingException("Queries containing grouping and aggregation functions must use projections.");
  }
  LinkedHashMap<PropertyPath,RowPropertyHelper.ColumnMetadata> columns=new LinkedHashMap<PropertyPath,RowPropertyHelper.ColumnMetadata>();
  ObjectPropertyHelper<?> propertyHelper=getFirstPhaseMatcher().getPropertyHelper();
  LinkedHashSet<Integer> groupFieldPositions=new LinkedHashSet<Integer>();
  if (parsingResult.getGroupBy() != null) {
    for (    PropertyPath p : parsingResult.getGroupBy()) {
      if (!columns.containsKey(p)) {
        Class<?> propertyType=propertyHelper.getPrimitivePropertyType(parsingResult.getTargetEntityName(),p.getPath());
        int idx=columns.size();
        columns.put(p,new RowPropertyHelper.ColumnMetadata(idx,"C" + idx,propertyType));
        groupFieldPositions.add(idx);
      }
    }
  }
  for (  PropertyPath p : parsingResult.getProjectedPaths()) {
    RowPropertyHelper.ColumnMetadata c=columns.get(p);
    if (p.getAggregationType() == null) {
      if (c == null || !groupFieldPositions.contains(c.getColumnIndex())) {
        throw new ParsingException("The expression '" + p + "' must be part of an aggregate function or it should be included in the GROUP BY clause");
      }
    }
    if (c == null) {
      Class<?> propertyType=propertyHelper.getPrimitivePropertyType(parsingResult.getTargetEntityName(),p.getPath());
      int idx=columns.size();
      columns.put(p,new RowPropertyHelper.ColumnMetadata(idx,"C" + idx,propertyType));
    }
  }
  if (parsingResult.getSortFields() != null) {
    for (    SortField sortField : parsingResult.getSortFields()) {
      PropertyPath p=sortField.getPath();
      RowPropertyHelper.ColumnMetadata c=columns.get(p);
      if (p.getAggregationType() == null) {
        if (c == null || !groupFieldPositions.contains(c.getColumnIndex())) {
          throw new ParsingException("The expression '" + p + "' must be part of an aggregate function or it should be included in the GROUP BY clause");
        }
      }
      if (c == null) {
        Class<?> propertyType=propertyHelper.getPrimitivePropertyType(parsingResult.getTargetEntityName(),p.getPath());
        int idx=columns.size();
        columns.put(p,new RowPropertyHelper.ColumnMetadata(idx,"C" + idx,propertyType));
      }
    }
  }
  String havingClause=null;
  if (parsingResult.getHavingClause() != null) {
    BooleanExpr normalizedHavingClause=booleanFilterNormalizer.normalize(parsingResult.getHavingClause());
    if (normalizedHavingClause == ConstantBooleanExpr.FALSE) {
      return new EmptyResultQuery(queryFactory,cache,jpqlString,namedParameters,startOffset,maxResults);
    }
    if (normalizedHavingClause != ConstantBooleanExpr.TRUE) {
      havingClause=JPATreePrinter.printTree(swapVariables(normalizedHavingClause,parsingResult.getTargetEntityName(),columns));
    }
  }
  StringBuilder firstPhaseQuery=new StringBuilder();
  firstPhaseQuery.append("SELECT ");
{
    boolean isFirst=true;
    for (    PropertyPath c : columns.keySet()) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        firstPhaseQuery.append(", ");
      }
      firstPhaseQuery.append(JPAQueryGenerator.DEFAULT_ALIAS).append('.').append(c.asStringPath());
    }
  }
  firstPhaseQuery.append(" FROM ").append(parsingResult.getTargetEntityName()).append(' ').append(JPAQueryGenerator.DEFAULT_ALIAS);
  if (parsingResult.getWhereClause() != null) {
    BooleanExpr normalizedWhereClause=booleanFilterNormalizer.normalize(parsingResult.getWhereClause());
    if (normalizedWhereClause == ConstantBooleanExpr.FALSE) {
      return new EmptyResultQuery(queryFactory,cache,jpqlString,namedParameters,startOffset,maxResults);
    }
    if (normalizedWhereClause != ConstantBooleanExpr.TRUE) {
      firstPhaseQuery.append(' ').append(JPATreePrinter.printTree(normalizedWhereClause));
    }
  }
  StringBuilder secondPhaseQuery=new StringBuilder();
  secondPhaseQuery.append("SELECT ");
{
    boolean isFirst=true;
    for (    PropertyPath p : parsingResult.getProjectedPaths()) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        secondPhaseQuery.append(", ");
      }
      RowPropertyHelper.ColumnMetadata c=columns.get(p);
      secondPhaseQuery.append(c.getColumnName());
    }
  }
  secondPhaseQuery.append(" FROM Row ");
  if (havingClause != null) {
    secondPhaseQuery.append(' ').append(havingClause);
  }
  if (parsingResult.getSortFields() != null) {
    secondPhaseQuery.append(" ORDER BY ");
    boolean isFirst=true;
    for (    SortField sortField : parsingResult.getSortFields()) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        secondPhaseQuery.append(", ");
      }
      RowPropertyHelper.ColumnMetadata c=columns.get(sortField.getPath());
      secondPhaseQuery.append(c.getColumnName()).append(' ').append(sortField.isAscending() ? "ASC" : "DESC");
    }
  }
  List<FieldAccumulator> accumulators=new LinkedList<FieldAccumulator>();
  RowPropertyHelper.ColumnMetadata[] _columns=new RowPropertyHelper.ColumnMetadata[columns.size()];
  for (  PropertyPath p : columns.keySet()) {
    RowPropertyHelper.ColumnMetadata c=columns.get(p);
    _columns[c.getColumnIndex()]=c;
    if (p.getAggregationType() != null) {
switch (p.getAggregationType()) {
case SUM:
        accumulators.add(new SumAccumulator(c.getColumnIndex(),c.getPropertyType()));
      break;
case AVG:
    accumulators.add(new AvgAccumulator(c.getColumnIndex(),c.getPropertyType()));
  break;
case MIN:
accumulators.add(new MinAccumulator(c.getColumnIndex(),c.getPropertyType()));
break;
case MAX:
accumulators.add(new MaxAccumulator(c.getColumnIndex(),c.getPropertyType()));
break;
case COUNT:
accumulators.add(new CountAccumulator(c.getColumnIndex()));
break;
default :
throw new IllegalStateException("Aggregation " + p.getAggregationType().name() + " is not supported");
}
}
 else {
groupFieldPositions.add(c.getColumnIndex());
}
}
int[] _groupFieldPositions=new int[groupFieldPositions.size()];
int i=0;
for (Integer pos : groupFieldPositions) {
_groupFieldPositions[i++]=pos;
}
FieldAccumulator[] _accumulators=accumulators.toArray(new FieldAccumulator[accumulators.size()]);
String firstPhaseQueryStr=firstPhaseQuery.toString();
Query baseQuery=buildQueryNoAggregations(queryFactory,firstPhaseQueryStr,namedParameters,-1,-1,parse(firstPhaseQueryStr,namedParameters));
String secondPhaseQueryStr=secondPhaseQuery.toString();
return new AggregatingQuery(queryFactory,cache,secondPhaseQueryStr,namedParameters,_groupFieldPositions,_accumulators,getObjectFilter(new RowMatcher(_columns),secondPhaseQueryStr,namedParameters),startOffset,maxResults,baseQuery);
}
