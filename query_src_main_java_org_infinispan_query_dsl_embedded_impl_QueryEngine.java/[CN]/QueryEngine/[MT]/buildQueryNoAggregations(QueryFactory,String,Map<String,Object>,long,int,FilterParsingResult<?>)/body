{
  if (parsingResult.hasGroupingOrAggregations()) {
    throw log.queryMustNotUseGroupingOrAggregation();
  }
  if (parsingResult.getSortFields() != null) {
    ObjectPropertyHelper<?> propertyHelper=getFirstPhaseMatcher().getPropertyHelper();
    for (    SortField sortField : parsingResult.getSortFields()) {
      PropertyPath p=sortField.getPath();
      if (propertyHelper.isRepeatedProperty(parsingResult.getTargetEntityName(),p.getPath())) {
        throw log.multivaluedPropertyCannotBeUsedInOrderBy(p.toString());
      }
    }
  }
  BooleanExpr normalizedWhereClause=booleanFilterNormalizer.normalize(parsingResult.getWhereClause());
  if (normalizedWhereClause == ConstantBooleanExpr.FALSE) {
    return new EmptyResultQuery(queryFactory,cache,jpqlString,namedParameters,startOffset,maxResults);
  }
  if (normalizedWhereClause == null || normalizedWhereClause == ConstantBooleanExpr.TRUE || searchManager == null) {
    return new EmbeddedQuery(this,queryFactory,cache,jpqlString,namedParameters,parsingResult.getProjections(),startOffset,maxResults);
  }
  BooleShannonExpansion.IndexedFieldProvider indexedFieldProvider=getIndexedFieldProvider(parsingResult);
  boolean allProjectionsAreStored=true;
  LinkedHashMap<String,List<Integer>> projectionsMap=null;
  if (parsingResult.getProjectedPaths() != null) {
    projectionsMap=new LinkedHashMap<String,List<Integer>>();
    for (int i=0; i < parsingResult.getProjectedPaths().length; i++) {
      PropertyPath p=parsingResult.getProjectedPaths()[i];
      List<Integer> idx=projectionsMap.get(p.asStringPath());
      if (idx == null) {
        idx=new ArrayList<Integer>();
        projectionsMap.put(p.asStringPath(),idx);
        if (!indexedFieldProvider.isStored(p.getPath())) {
          allProjectionsAreStored=false;
        }
      }
      idx.add(i);
    }
  }
  boolean allSortFieldsAreStored=true;
  SortField[] sortFields=parsingResult.getSortFields();
  if (sortFields != null) {
    LinkedHashMap<String,SortField> sortFieldMap=new LinkedHashMap<String,SortField>();
    for (    SortField sf : sortFields) {
      PropertyPath p=sf.getPath();
      String asStringPath=p.asStringPath();
      if (!sortFieldMap.containsKey(asStringPath)) {
        sortFieldMap.put(asStringPath,sf);
        if (!indexedFieldProvider.isStored(p.getPath())) {
          allSortFieldsAreStored=false;
        }
      }
    }
    sortFields=sortFieldMap.values().toArray(new SortField[sortFieldMap.size()]);
  }
  BooleShannonExpansion bse=new BooleShannonExpansion(MAX_EXPANSION_COFACTORS,indexedFieldProvider);
  BooleanExpr expansion=bse.expand(normalizedWhereClause);
  if (expansion == normalizedWhereClause) {
    if (allSortFieldsAreStored) {
      if (allProjectionsAreStored) {
        RowProcessor rowProcessor=null;
        if (parsingResult.getProjectedPaths() != null) {
          if (projectionsMap.size() != parsingResult.getProjectedPaths().length) {
            final Class<?>[] projectedTypes=new Class<?>[projectionsMap.size()];
            final int[] map=new int[parsingResult.getProjectedPaths().length];
            int j=0;
            for (            List<Integer> idx : projectionsMap.values()) {
              int i=idx.get(0);
              projectedTypes[j]=parsingResult.getProjectedTypes()[i];
              for (              int k : idx) {
                map[k]=j;
              }
              j++;
            }
            rowProcessor=new RowProcessor(){
              final RowProcessor delegate=makeTypeConversionRowProcessor(projectedTypes);
              @Override public Object[] process(              Object[] inRow){
                if (delegate != null) {
                  inRow=delegate.process(inRow);
                }
                Object[] outRow=new Object[map.length];
                for (int i=0; i < map.length; i++) {
                  outRow[i]=inRow[map[i]];
                }
                return outRow;
              }
            }
;
          }
 else {
            rowProcessor=makeTypeConversionRowProcessor(parsingResult.getProjectedTypes());
          }
        }
        return new EmbeddedLuceneQuery(this,queryFactory,jpqlString,namedParameters,parsingResult.getProjections(),rowProcessor,startOffset,maxResults);
      }
 else {
        String indexQueryStr=JPATreePrinter.printTree(parsingResult.getTargetEntityName(),null,normalizedWhereClause,sortFields);
        Query indexQuery=new EmbeddedLuceneQuery(this,queryFactory,indexQueryStr,namedParameters,null,null,startOffset,maxResults);
        String projectionQueryStr=JPATreePrinter.printTree(parsingResult.getTargetEntityName(),parsingResult.getProjectedPaths(),null,null);
        return new HybridQuery(queryFactory,cache,projectionQueryStr,null,getObjectFilter(getSecondPhaseMatcher(),projectionQueryStr,null),-1,-1,indexQuery);
      }
    }
 else {
      String indexQueryStr=JPATreePrinter.printTree(parsingResult.getTargetEntityName(),null,normalizedWhereClause,null);
      Query indexQuery=new EmbeddedLuceneQuery(this,queryFactory,indexQueryStr,namedParameters,null,null,-1,-1);
      String projectionQueryStr=JPATreePrinter.printTree(parsingResult.getTargetEntityName(),parsingResult.getProjectedPaths(),null,sortFields);
      return new HybridQuery(queryFactory,cache,projectionQueryStr,null,getObjectFilter(getSecondPhaseMatcher(),projectionQueryStr,null),startOffset,maxResults,indexQuery);
    }
  }
  if (expansion == ConstantBooleanExpr.TRUE) {
    return new EmbeddedQuery(this,queryFactory,cache,jpqlString,namedParameters,parsingResult.getProjections(),startOffset,maxResults);
  }
  String expandedQueryStr=JPATreePrinter.printTree(parsingResult.getTargetEntityName(),null,expansion,null);
  Query expandedQuery=new EmbeddedLuceneQuery(this,queryFactory,expandedQueryStr,namedParameters,null,null,-1,-1);
  return new HybridQuery(queryFactory,cache,jpqlString,namedParameters,getObjectFilter(getSecondPhaseMatcher(),jpqlString,namedParameters),startOffset,maxResults,expandedQuery);
}
