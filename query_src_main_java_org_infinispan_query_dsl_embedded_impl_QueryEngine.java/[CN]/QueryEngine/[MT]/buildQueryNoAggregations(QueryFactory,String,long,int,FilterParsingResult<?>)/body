{
  if (parsingResult.hasGroupingOrAggregations()) {
    throw new IllegalArgumentException("The query must not use grouping or aggregation");
  }
  BooleanExpr normalizedWhereClause=booleanFilterNormalizer.normalize(parsingResult.getWhereClause());
  if (normalizedWhereClause == ConstantBooleanExpr.FALSE) {
    return new EmptyResultQuery(queryFactory,cache,jpqlString,startOffset,maxResults);
  }
  if (normalizedWhereClause == null || normalizedWhereClause == ConstantBooleanExpr.TRUE || searchManager == null) {
    return new EmbeddedQuery(queryFactory,cache,makeFilter(jpqlString),startOffset,maxResults);
  }
  BooleShannonExpansion bse=new BooleShannonExpansion(getIndexedFieldProvider(parsingResult));
  BooleanExpr expansion=bse.expand(normalizedWhereClause);
  if (expansion == normalizedWhereClause) {
    return buildLuceneQuery(queryFactory,jpqlString,startOffset,maxResults);
  }
  if (expansion == ConstantBooleanExpr.TRUE) {
    return new EmbeddedQuery(queryFactory,cache,makeFilter(jpqlString),startOffset,maxResults);
  }
  String expandedJpaOut=JPATreePrinter.printTree(parsingResult.getTargetEntityName(),expansion,null);
  Query expandedQuery=buildLuceneQuery(queryFactory,expandedJpaOut,-1,-1);
  return new HybridQuery(queryFactory,cache,jpqlString,getObjectFilter(jpqlString,getSecondPhaseMatcher()),startOffset,maxResults,expandedQuery);
}
