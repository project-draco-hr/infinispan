{
  if (index < 0 || (index != 0 && index >= size))   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);
  return new ListIterator<E>(){
    private ListIterator<?> i=ImmutableListCopy.this.listIterator(index + offset);
    @Override public boolean hasNext(){
      return nextIndex() < size;
    }
    @Override @SuppressWarnings("unchecked") public E next(){
      if (hasNext())       return (E)i.next();
 else       throw new NoSuchElementException();
    }
    @Override public boolean hasPrevious(){
      return previousIndex() >= 0;
    }
    @Override @SuppressWarnings("unchecked") public E previous(){
      if (hasPrevious())       return (E)i.previous();
 else       throw new NoSuchElementException();
    }
    @Override public int nextIndex(){
      return i.nextIndex() - offset;
    }
    @Override public int previousIndex(){
      return i.previousIndex() - offset;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override public void set(    E o){
      throw new UnsupportedOperationException();
    }
    @Override public void add(    E o){
      throw new UnsupportedOperationException();
    }
  }
;
}
