{
  if (!ctx.isInTxScope()) {
    lockManager.acquireLock(ctx,key,lockTimeout,skipLocking);
    return;
  }
  TxInvocationContext txContext=(TxInvocationContext)ctx;
  int transactionViewId=-1;
  boolean useStrictComparison=true;
  boolean checkForPendingLocks=false;
  if (clustered) {
    transactionViewId=txContext.getCacheTransaction().getViewId();
    if (transactionViewId != TransactionTable.CACHE_STOPPED_VIEW_ID) {
      useStrictComparison=txTable.useStrictTopologyIdComparison();
      checkForPendingLocks=isFromOlderTopology(txTable.getMinViewId(),transactionViewId,useStrictComparison);
    }
  }
  if (checkForPendingLocks) {
    getLog().tracef("Checking for pending locks and then locking key %s",key);
    final long expectedEndTime=nowMillis() + cacheConfiguration.locking().lockAcquisitionTimeout();
    waitForTransactionsToComplete(txContext,txTable.getLocalTransactions(),key,transactionViewId,useStrictComparison,expectedEndTime);
    waitForTransactionsToComplete(txContext,txTable.getRemoteTransactions(),key,transactionViewId,useStrictComparison,expectedEndTime);
    final long remaining=expectedEndTime - nowMillis();
    if (remaining <= 0) {
      throw newTimeoutException(key,txContext);
    }
 else {
      getLog().tracef("Finished waiting for other potential lockers, trying to acquire the lock on %s",key);
      lockManager.acquireLock(ctx,key,remaining,skipLocking);
    }
  }
 else {
    getLog().tracef("Locking key %s, no need to check for pending locks.",key);
    lockManager.acquireLock(ctx,key,lockTimeout,skipLocking);
  }
}
