{
  List<List<AttributeId>> translatedProjections=null;
  if (projection != null && !projection.isEmpty()) {
    translatedProjections=new ArrayList<List<AttributeId>>(projection.size());
    for (    String projectionPath : projection) {
      translatedProjections.add(metadataAdapter.translatePropertyPath(StringHelper.splitPropertyPath(projectionPath)));
    }
  }
  List<List<AttributeId>> translatedSortFields=null;
  if (sortFields != null && !sortFields.isEmpty()) {
    translatedSortFields=new ArrayList<List<AttributeId>>(sortFields.size());
    for (    SortField sortField : sortFields) {
      translatedSortFields.add(metadataAdapter.translatePropertyPath(StringHelper.splitPropertyPath(sortField.getPath())));
    }
  }
  BETree beTree=treeMaker.make(normalizedFilter);
  FilterSubscriptionImpl<TypeMetadata,AttributeMetadata,AttributeId> filterSubscription=new FilterSubscriptionImpl<TypeMetadata,AttributeMetadata,AttributeId>(metadataAdapter,beTree,callback,projection,translatedProjections,sortFields,translatedSortFields);
  filterSubscription.registerProjection(predicateIndex);
  filterSubscription.subscribe(predicateIndex);
  filterSubscription.index=filterSubscriptions.size();
  filterSubscriptions.add(filterSubscription);
  return filterSubscription;
}
