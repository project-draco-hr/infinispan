{
  BETree beTree=treeMaker.make(normalizedFilter);
  final FilterSubscriptionImpl filterSubscription=new FilterSubscriptionImpl(typeName,beTree,projection,callback);
  for (  BENode node : beTree.getNodes()) {
    if (node instanceof PredicateNode) {
      final PredicateNode<AttributeId> predicateNode=(PredicateNode<AttributeId>)node;
      Predicate.Callback predicateCallback=new Predicate.Callback(){
        @Override public void handleValue(        MatcherEvalContext<?> ctx,        boolean isMatching){
          FilterEvalContext context=ctx.getFilterContext(filterSubscription);
          predicateNode.handleChildValue(predicateNode,isMatching,context);
        }
      }
;
      predicateNode.subscribe(predicateIndex,predicateCallback);
    }
  }
  filterSubscriptions.add(filterSubscription);
  return filterSubscription;
}
