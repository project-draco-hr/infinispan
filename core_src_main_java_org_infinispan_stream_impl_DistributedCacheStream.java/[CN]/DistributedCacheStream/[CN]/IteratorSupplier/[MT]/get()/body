{
  R entry=queue.poll();
  if (entry == null) {
    if (completed.get()) {
      if (exception != null) {
        throw exception;
      }
 else       if ((entry=queue.poll()) != null) {
        if (consumer != null) {
          consumer.accept(entry);
        }
        return entry;
      }
      return null;
    }
    nextLock.lock();
    try {
      boolean interrupted=false;
      while (!completed.get()) {
        if ((entry=queue.poll()) != null) {
          break;
        }
        try {
          nextCondition.await(100,TimeUnit.MILLISECONDS);
        }
 catch (        InterruptedException e) {
          interrupted=true;
        }
      }
      if (entry == null) {
        entry=queue.poll();
        if (entry == null) {
          if (exception != null) {
            throw exception;
          }
          return null;
        }
      }
 else       if (interrupted) {
        Thread.currentThread().interrupt();
      }
    }
  finally {
      nextLock.unlock();
    }
  }
  if (consumer != null && entry != null) {
    consumer.accept(entry);
  }
  return entry;
}
