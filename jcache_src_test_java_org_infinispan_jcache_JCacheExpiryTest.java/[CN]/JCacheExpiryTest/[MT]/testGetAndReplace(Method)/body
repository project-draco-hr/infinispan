{
  final MutableConfiguration<Integer,String> cfg=new MutableConfiguration<Integer,String>();
  cfg.setExpiryPolicyFactory(new Factory<ExpiryPolicy<? super Integer,? super String>>(){
    @Override public ExpiryPolicy<? super Integer,? super String> create(){
      return new ExpiryPolicy<Integer,String>(){
        @Override public Configuration.Duration getTTLForCreatedEntry(        Cache.Entry<? extends Integer,? extends String> entry){
          return Configuration.Duration.ETERNAL;
        }
        @Override public Configuration.Duration getTTLForAccessedEntry(        Cache.Entry<? extends Integer,? extends String> entry,        Configuration.Duration duration){
          return null;
        }
        @Override public Configuration.Duration getTTLForModifiedEntry(        Cache.Entry<? extends Integer,? extends String> entry,        Configuration.Duration duration){
          return Configuration.Duration.ZERO;
        }
      }
;
    }
  }
);
  final String name=getName(m);
  withCachingProvider(new JCacheRunnable(){
    @Override public void run(    CachingProvider provider){
      CacheManager cm=provider.getCacheManager();
      Cache<Integer,String> cache=cm.configureCache(name,cfg);
      cache.put(1,"v1");
      assertTrue(cache.containsKey(1));
      assertEquals("v1",cache.get(1));
      cache.getAndReplace(1,"v2");
      assertFalse(cache.containsKey(1));
      assertNull(cache.get(1));
    }
  }
);
}
