{
  UserHS user=new UserHS();
  user.setId(1);
  user.setName("John");
  cache.put("user_" + user.getId(),user);
  QueryEngine queryEngine=TestingUtil.extractComponent(cache,QueryEngine.class);
  QueryCache queryCache=(QueryCache)TestingUtil.extractField(QueryEngine.class,queryEngine,"queryCache");
  QueryCache queryCacheSpy=spy(queryCache);
  TestingUtil.replaceField(queryCacheSpy,"queryCache",queryEngine,QueryEngine.class);
  QueryFactory qf=Search.getQueryFactory(cache);
  QueryBuilder queryQueryBuilder=qf.from(UserHS.class).having("name").eq("John").toBuilder();
  String jpaQuery=((BaseQueryBuilder)queryQueryBuilder).accept(new JPAQueryGenerator());
  AtomicReference<Object> lastGetResult=captureLastGetResult(queryCacheSpy);
  KeyValuePair<String,Class> queryCacheKey=new KeyValuePair<String,Class>(jpaQuery,LuceneQueryParsingResult.class);
  LuceneQueryParsingResult cachedParsingResult=queryCache.get(queryCacheKey);
  assertNull(cachedParsingResult);
  queryQueryBuilder.build().list();
  cachedParsingResult=queryCache.get(queryCacheKey);
  assertNotNull(cachedParsingResult);
  InOrder inOrder=inOrder(queryCacheSpy);
  inOrder.verify(queryCacheSpy,calls(1)).get(queryCacheKey);
  ArgumentCaptor<LuceneQueryParsingResult> captor=ArgumentCaptor.forClass(LuceneQueryParsingResult.class);
  inOrder.verify(queryCacheSpy,calls(1)).put(eq(queryCacheKey),captor.capture());
  inOrder.verifyNoMoreInteractions();
  assertNull(lastGetResult.get());
  assertTrue(captor.getValue() == cachedParsingResult);
  reset(queryCacheSpy);
  lastGetResult=captureLastGetResult(queryCacheSpy);
  queryQueryBuilder.build().list();
  inOrder=inOrder(queryCacheSpy);
  inOrder.verify(queryCacheSpy,calls(1)).get(queryCacheKey);
  inOrder.verify(queryCacheSpy,never()).put(any(KeyValuePair.class),any(LuceneQueryParsingResult.class));
  inOrder.verifyNoMoreInteractions();
  assertTrue(lastGetResult.get() == cachedParsingResult);
}
