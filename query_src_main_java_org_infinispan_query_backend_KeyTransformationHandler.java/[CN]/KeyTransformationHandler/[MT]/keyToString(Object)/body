{
  char prefix=' ';
  Transformer tf=null;
  if (isStringOrPrimitive(key)) {
    if (key instanceof String)     prefix='S';
 else     if (key instanceof Integer)     prefix='I';
 else     if (key instanceof Boolean)     prefix='B';
 else     if (key instanceof Long)     prefix='L';
 else     if (key instanceof Float)     prefix='F';
 else     if (key instanceof Double)     prefix='D';
 else     if (key instanceof Short)     prefix='X';
 else     if (key instanceof Byte)     prefix='Y';
 else     if (key instanceof Character)     prefix='C';
 else     if (key instanceof UUID)     prefix='U';
    return prefix + ":" + key;
  }
 else   if ((tf=getTransformer(key.getClass())) != null) {
    return "T:" + key.getClass().getName() + ":"+ tf.toString(key);
  }
 else   throw new IllegalArgumentException("Indexing only works with entries keyed on Strings, primitives " + "and classes that have the @Transformable annotation - you passed in a " + key.getClass().toString() + ". Alternatively, see org.infinispan.query.SearchManager#registerKeyTransformer");
}
