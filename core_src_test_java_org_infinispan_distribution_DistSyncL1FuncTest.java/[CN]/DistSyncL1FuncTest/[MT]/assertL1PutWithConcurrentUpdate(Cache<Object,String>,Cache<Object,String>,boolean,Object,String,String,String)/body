{
  CyclicBarrier barrier=new CyclicBarrier(2);
  BlockingInterceptor blockingInterceptor=addBlockingInterceptorBeforeTx(nonOwnerCache,barrier,replace ? ReplaceCommand.class : PutKeyValueCommand.class);
  try {
    Future<String> future=fork(new Callable<String>(){
      @Override public String call() throws Exception {
        if (replace) {
          if (nonOwnerCache.replace(key,originalValue,nonOwnerValue)) {
            return originalValue;
          }
          return nonOwnerCache.get(key);
        }
 else {
          return nonOwnerCache.put(key,nonOwnerValue);
        }
      }
    }
);
    barrier.await(5,TimeUnit.SECONDS);
    blockingInterceptor.suspend(true);
    assertEquals(nonOwnerValue,ownerCache.put(key,updateValue));
    barrier.await(5,TimeUnit.SECONDS);
    assertEquals(originalValue,future.get(5,TimeUnit.SECONDS));
    removeAllBlockingInterceptorsFromCache(nonOwnerCache);
    assertL1StateOnLocalWrite(nonOwnerCache,ownerCache,key,updateValue);
    assertEquals(updateValue,nonOwnerCache.get(key));
    assertIsInL1(nonOwnerCache,key);
  }
  finally {
    removeAllBlockingInterceptorsFromCache(nonOwnerCache);
  }
}
