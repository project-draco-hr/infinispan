{
  final Cache<Object,String>[] owners=getOwners(key,2);
  final Cache<Object,String> ownerCache=owners[0];
  final Cache<Object,String> backupOwnerCache=owners[1];
  final Cache<Object,String> nonOwnerCache=getFirstNonOwner(key);
  ownerCache.put(key,firstValue);
  assertEquals(firstValue,nonOwnerCache.get(key));
  assertIsInL1(nonOwnerCache,key);
  CyclicBarrier ownerGetBarrier=new CyclicBarrier(2);
  addBlockingInterceptor(ownerCache,ownerGetBarrier,GetKeyValueCommand.class,L1NonTxInterceptor.class,false);
  CyclicBarrier backupOwnerWriteBarrier=new CyclicBarrier(2);
  addBlockingInterceptor(backupOwnerCache,backupOwnerWriteBarrier,PutKeyValueCommand.class,L1NonTxInterceptor.class,true);
  try {
    Future<String> future=fork(new Callable<String>(){
      @Override public String call() throws Exception {
        return ownerCache.put(key,secondValue);
      }
    }
);
    backupOwnerWriteBarrier.await(5,TimeUnit.SECONDS);
    eventually(new Condition(){
      @Override public boolean isSatisfied() throws Exception {
        return !isInL1(nonOwnerCache,key);
      }
    }
,5000,250);
    assertEquals(firstValue,nonOwnerCache.get(key));
    assertIsInL1(nonOwnerCache,key);
    backupOwnerWriteBarrier.await(5,TimeUnit.SECONDS);
    future.get(5,TimeUnit.SECONDS);
    eventually(new Condition(){
      @Override public boolean isSatisfied() throws Exception {
        return !isInL1(nonOwnerCache,key);
      }
    }
,5000,250);
    assertIsNotInL1(nonOwnerCache,key);
    ownerGetBarrier.await(5,TimeUnit.SECONDS);
    ownerGetBarrier.await(5,TimeUnit.SECONDS);
    assertIsNotInL1(nonOwnerCache,key);
  }
  finally {
    removeAllBlockingInterceptorsFromCache(ownerCache);
    removeAllBlockingInterceptorsFromCache(backupOwnerCache);
  }
}
