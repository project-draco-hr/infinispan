{
  Cache<String,String> nonSecCache=cache("nonSecuredCache");
  nonSecCache.put("a","value");
  assertEquals("value",nonSecCache.get("a"));
  String result=Security.doAs(PHEIDIPPIDES,new PrivilegedExceptionAction<String>(){
    @Override public String run() throws Exception {
      return (String)scriptingManager.runScript("testRoleWithCache.js",new TaskContext().addParameter("a","a").cache(nonSecCache)).get();
    }
  }
);
  assertEquals("a",result);
  assertEquals("a",nonSecCache.get("a"));
}
