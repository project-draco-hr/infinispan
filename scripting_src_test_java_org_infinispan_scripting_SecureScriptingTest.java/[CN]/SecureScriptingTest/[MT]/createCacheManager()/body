{
  GlobalConfigurationBuilder global=new GlobalConfigurationBuilder();
  GlobalAuthorizationConfigurationBuilder globalRoles=global.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper());
  ConfigurationBuilder config=TestCacheManagerFactory.getDefaultCacheConfiguration(true);
  AuthorizationConfigurationBuilder authConfig=config.security().authorization().enable();
  globalRoles.role("achilles").permission(AuthorizationPermission.READ).permission(AuthorizationPermission.WRITE).role("runner").permission(AuthorizationPermission.EXEC).permission(AuthorizationPermission.READ).permission(AuthorizationPermission.WRITE).role("pheidippides").permission(AuthorizationPermission.EXEC).permission(AuthorizationPermission.READ).permission(AuthorizationPermission.WRITE).role("admin").permission(AuthorizationPermission.ALL);
  authConfig.role("runner").role("pheidippides").role("admin");
  EmbeddedCacheManager cm=TestCacheManagerFactory.createCacheManager(global,config);
  Security.doAs(ADMIN,new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      cm.getCache(ScriptingTest.CACHE_NAME);
      cm.getCache(SecureScriptingTest.CACHE_NAME);
      return null;
    }
  }
);
  return cm;
}
