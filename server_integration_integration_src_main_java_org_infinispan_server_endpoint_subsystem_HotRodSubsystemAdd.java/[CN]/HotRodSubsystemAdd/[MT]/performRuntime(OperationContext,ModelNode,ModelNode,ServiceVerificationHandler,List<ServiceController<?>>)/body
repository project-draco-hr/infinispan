{
  ModelNode config=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  HotRodServerConfigurationBuilder configurationBuilder=new HotRodServerConfigurationBuilder();
  configureProtocolServer(configurationBuilder,config);
  configureProtocolServerSecurity(configurationBuilder,config);
  configureProtocolServerTopology(configurationBuilder,config);
  final ProtocolServerService service=new ProtocolServerService(getServiceName(operation),HotRodServer.class,configurationBuilder);
  ServiceBuilder<?> builder=context.getServiceTarget().addService(EndpointUtils.getServiceName(operation,"hotrod"),service);
  EndpointUtils.addCacheContainerConfigurationDependency(builder,getCacheContainerName(operation),service.getCacheManagerConfiguration());
  EndpointUtils.addCacheContainerDependency(builder,getCacheContainerName(operation),service.getCacheManager());
  EndpointUtils.addSocketBindingDependency(builder,getSocketBindingName(operation),service.getSocketBinding());
  if (config.hasDefined(ModelKeys.SECURITY) && config.get(ModelKeys.SECURITY,ModelKeys.SECURITY_NAME).isDefined()) {
    EndpointUtils.addSecurityRealmDependency(builder,config.get(ModelKeys.SECURITY,ModelKeys.SECURITY_NAME,ModelKeys.SECURITY_REALM).asString(),service.getSecurityRealm());
  }
  builder.install();
}
