{
  assertEquals(2,configuration.servers().size());
  assertEqualsConfig(SomeAsyncExecutorFactory.class,ASYNC_EXECUTOR_FACTORY,configuration);
  assertEqualsConfig(SomeRequestBalancingStrategy.class,REQUEST_BALANCING_STRATEGY,configuration);
  assertEqualsConfig(SomeTransportfactory.class,TRANSPORT_FACTORY,configuration);
  assertEquals(null,configuration.consistentHashImpl(1));
  assertEquals(SomeCustomConsistentHashV2.class,configuration.consistentHashImpl(2));
  assertEqualsConfig(100,"maxActive",configuration);
  assertEqualsConfig(150,"maxTotal",configuration);
  assertEqualsConfig(1000L,"maxWait",configuration);
  assertEqualsConfig(20,"maxIdle",configuration);
  assertEqualsConfig(10,"minIdle",configuration);
  assertEqualsConfig(ExhaustedAction.WAIT,"exhaustedAction",configuration);
  assertEqualsConfig(5,"numTestsPerEvictionRun",configuration);
  assertEqualsConfig(15000L,"timeBetweenEvictionRunsMillis",configuration);
  assertEqualsConfig(12000L,"minEvictableIdleTimeMillis",configuration);
  assertEqualsConfig(true,"testOnBorrow",configuration);
  assertEqualsConfig(true,"testOnReturn",configuration);
  assertEqualsConfig(false,"testWhileIdle",configuration);
  assertEqualsConfig(100,CONNECT_TIMEOUT,configuration);
  assertEqualsConfig(100,SO_TIMEOUT,configuration);
  assertEqualsConfig(false,TCP_NO_DELAY,configuration);
  assertEqualsConfig(true,TCP_KEEP_ALIVE,configuration);
  assertEqualsConfig(128,KEY_SIZE_ESTIMATE,configuration);
  assertEqualsConfig(1024,VALUE_SIZE_ESTIMATE,configuration);
  assertEqualsConfig(0,MAX_RETRIES,configuration);
  assertEqualsConfig(true,USE_SSL,configuration);
  assertEqualsConfig("my-key-store.file",KEY_STORE_FILE_NAME,configuration);
  assertEqualsConfig("my-key-store.password",KEY_STORE_PASSWORD,configuration);
  assertEqualsConfig("my-key-store-certificate.password",KEY_STORE_CERTIFICATE_PASSWORD,configuration);
  assertEqualsConfig("my-trust-store.file",TRUST_STORE_FILE_NAME,configuration);
  assertEqualsConfig("my-trust-store.password",TRUST_STORE_PASSWORD,configuration);
  assertEqualsConfig(true,USE_AUTH,configuration);
  assertEqualsConfig("my-sasl-mechanism",SASL_MECHANISM,configuration);
  assertEqualsConfig(callbackHandler,AUTH_CALLBACK_HANDLER,configuration);
  assertEqualsConfig("my-server-name",AUTH_SERVER_NAME,configuration);
  assertEqualsConfig(clientSubject,AUTH_CLIENT_SUBJECT,configuration);
  assertEqualsConfig("1",SASL_PROPERTIES_PREFIX + ".A",configuration);
  assertEqualsConfig("2",SASL_PROPERTIES_PREFIX + ".B",configuration);
  assertEqualsConfig("3",SASL_PROPERTIES_PREFIX + ".C",configuration);
}
