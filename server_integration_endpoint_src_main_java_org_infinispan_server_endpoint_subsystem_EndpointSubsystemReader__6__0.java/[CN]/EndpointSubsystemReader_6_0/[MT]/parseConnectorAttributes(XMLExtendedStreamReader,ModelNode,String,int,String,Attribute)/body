{
switch (attribute) {
case CACHE_CONTAINER:
{
      CommonConnectorResource.CACHE_CONTAINER.parseAndSetParameter(value,connector,reader);
      break;
    }
case IDLE_TIMEOUT:
{
    ProtocolServerConnectorResource.IDLE_TIMEOUT.parseAndSetParameter(value,connector,reader);
    break;
  }
case NAME:
{
  CommonConnectorResource.NAME.parseAndSetParameter(value,connector,reader);
  name=value;
  break;
}
case RECEIVE_BUFFER_SIZE:
{
ProtocolServerConnectorResource.RECEIVE_BUFFER_SIZE.parseAndSetParameter(value,connector,reader);
break;
}
case SEND_BUFFER_SIZE:
{
ProtocolServerConnectorResource.SEND_BUFFER_SIZE.parseAndSetParameter(value,connector,reader);
break;
}
case SOCKET_BINDING:
{
ProtocolServerConnectorResource.SOCKET_BINDING.parseAndSetParameter(value,connector,reader);
break;
}
case TCP_NODELAY:
{
ProtocolServerConnectorResource.TCP_NODELAY.parseAndSetParameter(value,connector,reader);
break;
}
case WORKER_THREADS:
{
ProtocolServerConnectorResource.WORKER_THREADS.parseAndSetParameter(value,connector,reader);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
return name;
}
