{
  boolean trace=log.isTraceEnabled();
  if (stopped) {
    log.debug("Discovery protocol already stopped, so don't look for members");
    return;
  }
  boolean discardEnabled=isDiscardEnabled(this);
  if (discardEnabled) {
    log.debug("Not sending discovery because DISCARD is on");
    return;
  }
  Map<Address,TEST_PING> discoveries=getTestDiscoveries();
synchronized (discoveries) {
    if (initialDiscovery) {
      boolean firstNode=discoveries.isEmpty();
      TEST_PING prev=discoveries.putIfAbsent(local_addr,this);
      if (prev == null) {
        if (trace)         log.trace("Added discovery for %s. Registered discoveries: %s",local_addr,discoveries);
      }
 else {
        if (prev != this) {
          throw new IllegalStateException("Trying to add two discoveries for the same address: " + local_addr);
        }
      }
      if (firstNode) {
        log.debug("No other nodes yet, marking this node as coord");
        is_coord=true;
        return;
      }
    }
    for (    TEST_PING discovery : discoveries.values()) {
      if (discovery != this) {
        boolean remoteDiscardEnabled=isDiscardEnabled(discovery);
        if (!remoteDiscardEnabled && !discovery.stopped) {
          addPingRsp(pingDatas,discovery);
        }
 else         if (discovery.stopped) {
          log.debug(String.format("%s is stopped, so no ping responses will be received",discovery.getLocalAddr()));
        }
 else {
          if (trace)           log.trace("Ignoring discovery for %s because DISCARD is on",discovery.getLocalAddr());
          addPingRsp(null,discovery);
        }
      }
 else {
        if (trace)         log.trace("Skipping sending discovery to self");
      }
    }
  }
}
