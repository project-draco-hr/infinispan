{
  if (!enabled)   return;
  AdvancedCacheLoader preloadCl=null;
  for (  CacheLoader l : loaders) {
    if (configMap.get(l).preload()) {
      if (!(l instanceof AdvancedCacheLoader)) {
        throw new PersistenceException("Cannot preload from cache loader '" + l.getClass().getName() + "' as it doesn't implement '"+ AdvancedCacheLoader.class.getName()+ "'");
      }
      preloadCl=(AdvancedCacheLoader)l;
      break;
    }
  }
  if (preloadCl == null)   return;
  long start=timeService.time();
  final int maxEntries=getMaxEntries();
  final AtomicInteger loadedEntries=new AtomicInteger(0);
  final AdvancedCache<Object,Object> flaggedCache=getCacheForStateInsertion();
  preloadCl.process(null,new AdvancedCacheLoader.CacheLoaderTask(){
    @Override public void processEntry(    MarshalledEntry me,    AdvancedCacheLoader.TaskContext taskContext) throws InterruptedException {
      if (loadedEntries.getAndIncrement() >= maxEntries) {
        taskContext.stop();
        return;
      }
      Metadata metadata=me.getMetadata() != null ? ((InternalMetadataImpl)me.getMetadata()).getActual() : null;
      preloadKey(flaggedCache,me.getKey(),me.getValue(),metadata);
    }
  }
,new WithinThreadExecutor(),true,true);
  log.debugf("Preloaded %s keys in %s",loadedEntries,Util.prettyPrintTime(timeService.timeDuration(start,MILLISECONDS)));
}
