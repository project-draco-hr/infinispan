{
  ReplicableCommand command;
switch (id) {
case PutKeyValueCommand.COMMAND_ID:
    command=new PutKeyValueCommand();
  break;
case PutMapCommand.COMMAND_ID:
command=new PutMapCommand();
break;
case RemoveCommand.COMMAND_ID:
command=new RemoveCommand();
break;
case ReplaceCommand.METHOD_ID:
command=new ReplaceCommand();
break;
case GetKeyValueCommand.METHOD_ID:
command=new GetKeyValueCommand();
break;
case ClearCommand.COMMAND_ID:
command=new ClearCommand();
break;
case PrepareCommand.COMMAND_ID:
command=new PrepareCommand();
break;
case CommitCommand.METHOD_ID:
command=new CommitCommand();
break;
case RollbackCommand.METHOD_ID:
command=new RollbackCommand();
break;
case MultipleRpcCommand.COMMAND_ID:
command=new MultipleRpcCommand();
break;
case SingleRpcCommand.COMMAND_ID:
command=new SingleRpcCommand();
break;
case InvalidateCommand.COMMAND_ID:
command=new InvalidateCommand();
break;
case InvalidateL1Command.COMMAND_ID:
command=new InvalidateL1Command();
break;
case StateTransferControlCommand.METHOD_ID:
command=new StateTransferControlCommand();
((StateTransferControlCommand)command).init(rpcManager);
break;
case ClusteredGetCommand.COMMAND_ID:
command=new ClusteredGetCommand();
break;
default :
throw new CacheException("Unknown command id " + id + "!");
}
command.setParameters(id,parameters);
return command;
}
