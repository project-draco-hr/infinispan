{
  final String cacheName="ourCache";
  String xml1=INFINISPAN_START_TAG + "   <default>\n" + "      <clustering mode=\"repl\">\n"+ "         <stateTransfer fetchInMemoryState=\"false\"/>\n"+ "         <async useReplQueue=\"false\" asyncMarshalling=\"false\"/>\n"+ "      </clustering>\n"+ "      <locking isolationLevel=\"REPEATABLE_READ\" concurrencyLevel=\"1000\" lockAcquisitionTimeout=\"20000\"/>\n"+ "      <storeAsBinary enabled=\"true\"/>\n"+ "      <expiration wakeUpInterval=\"23\" lifespan=\"50012\" maxIdle=\"1341\"/>\n"+ "      <deadlockDetection enabled=\"true\" spinDuration=\"1221\"/>\n"+ "   </default>\n"+ "   <namedCache name=\""+ cacheName+ "\">\n"+ "      <clustering>\n"+ "         <async useReplQueue=\"true\" replQueueInterval=\"105\" replQueueMaxElements=\"341\"/>\n"+ "      </clustering>\n"+ "      <jmxStatistics enabled=\"true\"/>\n"+ "      <deadlockDetection enabled=\"true\" spinDuration=\"502\"/>\n"+ "      <deadlockDetection enabled=\"true\" spinDuration=\"1223\"/>\n"+ "   </namedCache>"+ TestingUtil.INFINISPAN_END_TAG;
  String xml2=INFINISPAN_START_TAG + "   <default>\n" + "      <clustering mode=\"repl\">\n"+ "         <stateTransfer fetchInMemoryState=\"true\"/>\n"+ "         <sync replTimeout=\"30000\"/>\n"+ "      </clustering>\n"+ "      <locking isolationLevel=\"READ_COMMITTED\" concurrencyLevel=\"30\" lockAcquisitionTimeout=\"25000\"/>\n"+ "      <storeAsBinary enabled=\"false\"/>\n"+ "      <deadlockDetection enabled=\"true\" spinDuration=\"1222\"/>\n"+ "   </default>\n"+ "   <namedCache name=\""+ cacheName+ "\">\n"+ "      <clustering mode=\"dist\">\n"+ "         <hash numOwners=\"3\" numVirtualNodes=\"51\"/>\n"+ "         <l1 enabled=\"true\" lifespan=\"12345\"/>\n"+ "         <async useReplQueue=\"false\"/>\n"+ "      </clustering>\n"+ "      <jmxStatistics enabled=\"true\"/>\n"+ "      <deadlockDetection enabled=\"true\" spinDuration=\"1224\"/>\n"+ "   </namedCache>"+ TestingUtil.INFINISPAN_END_TAG;
  ConfigurationBuilderHolder holder=getHolder(xml1,xml2);
  withCacheManager(new CacheManagerCallable(fromHolder(holder)){
    @Override public void call() throws Exception {
      Configuration c=cm.getCacheConfiguration(cacheName);
      Assert.assertEquals(c.clustering().cacheMode(),CacheMode.DIST_ASYNC);
      Assert.assertEquals(c.clustering().hash().numOwners(),3);
      Assert.assertEquals(c.clustering().hash().numVirtualNodes(),51);
      Assert.assertEquals(c.clustering().l1().enabled(),true);
      Assert.assertEquals(c.clustering().l1().lifespan(),12345);
      Assert.assertEquals(c.clustering().stateTransfer().fetchInMemoryState(),true);
      Assert.assertEquals(c.clustering().async().useReplQueue(),false);
      Assert.assertEquals(c.clustering().async().replQueueInterval(),105);
      Assert.assertEquals(c.clustering().async().replQueueMaxElements(),341);
      Assert.assertEquals(c.jmxStatistics().enabled(),true);
      Assert.assertEquals(c.locking().isolationLevel(),IsolationLevel.READ_COMMITTED);
      Assert.assertEquals(c.locking().concurrencyLevel(),30);
      Assert.assertEquals(c.locking().lockAcquisitionTimeout(),25000);
      Assert.assertEquals(c.storeAsBinary().enabled(),false);
      Assert.assertEquals(c.expiration().wakeUpInterval(),23);
      Assert.assertEquals(c.expiration().lifespan(),50012);
      Assert.assertEquals(c.expiration().maxIdle(),1341);
      Assert.assertEquals(c.deadlockDetection().enabled(),true);
      Assert.assertEquals(c.deadlockDetection().spinDuration(),1224);
    }
  }
);
}
