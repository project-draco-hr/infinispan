{
  int actualNumOwners=computeActualNumOwners(baseCH.getNumOwners(),newMembers,lfMap);
  DefaultConsistentHash updatedMembersCH=chf.updateMembers(baseCH,newMembers,lfMap);
  assertEquals(lfMap,updatedMembersCH.getCapacityFactors());
  if (nodesToRemove > 0) {
    for (int l=0; l < updatedMembersCH.getNumSegments(); l++) {
      assertTrue(updatedMembersCH.locateOwnersForSegment(l).size() > 0);
      assertTrue(updatedMembersCH.locateOwnersForSegment(l).size() <= actualNumOwners);
    }
  }
  DefaultConsistentHash rebalancedCH=chf.rebalance(updatedMembersCH);
  checkDistribution(rebalancedCH,lfMap,false);
  for (int l=0; l < rebalancedCH.getNumSegments(); l++) {
    assertTrue(rebalancedCH.locateOwnersForSegment(l).size() >= actualNumOwners);
  }
  checkMovedSegments(baseCH,rebalancedCH);
  DefaultConsistentHash unionCH=chf.union(updatedMembersCH,rebalancedCH);
  for (int l=0; l < updatedMembersCH.getNumSegments(); l++) {
    assertTrue(unionCH.locateOwnersForSegment(l).containsAll(updatedMembersCH.locateOwnersForSegment(l)));
    assertTrue(unionCH.locateOwnersForSegment(l).containsAll(rebalancedCH.locateOwnersForSegment(l)));
  }
  assertEquals(rebalancedCH.getNumSegments(),baseCH.getNumSegments());
  assertEquals(rebalancedCH.getNumOwners(),baseCH.getNumOwners());
  assertEquals(rebalancedCH.getMembers(),newMembers);
  baseCH=rebalancedCH;
  return baseCH;
}
