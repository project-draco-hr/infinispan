{
  int[] numSegments={1,2,4,8,16,50,100,500};
  int[] numNodes={1,2,3,4,5,7,10,100};
  int[] numOwners={1,2,3,5};
  float[][] capacityFactors={null,{1},{2},{1,100},{2,0,1}};
  ConsistentHashFactory<DefaultConsistentHash> chf=createConsistentHashFactory();
  Hash hashFunction=new MurmurHash3();
  for (  int nn : numNodes) {
    List<Address> nodes=new ArrayList<Address>(nn);
    for (int j=0; j < nn; j++) {
      nodes.add(new TestAddress(j,"TA"));
    }
    for (    int ns : numSegments) {
      if (nn < ns) {
        for (        int no : numOwners) {
          for (          float[] lf : capacityFactors) {
            Map<Address,Float> lfMap=null;
            if (lf != null) {
              lfMap=new HashMap<Address,Float>();
              for (int i=0; i < nn; i++) {
                lfMap.put(nodes.get(i),lf[i % lf.length]);
              }
            }
            testConsistentHashModifications(chf,hashFunction,nodes,ns,no,lfMap);
          }
        }
      }
    }
  }
}
