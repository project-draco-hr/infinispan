{
  int[][] nodeChanges={{1,0},{2,0},{0,1},{0,2},{1,1},{1,2},{2,1},{10,0},{0,10}};
  assertSame(baseCH,chf.updateMembers(baseCH,baseCH.getMembers()));
  assertSame(baseCH,chf.rebalance(baseCH));
  int nodeIndex=baseCH.getMembers().size();
  for (int i=0; i < nodeChanges.length; i++) {
    int nodesToAdd=nodeChanges[i][0];
    int nodesToRemove=nodeChanges[i][1];
    if (nodesToRemove > baseCH.getMembers().size())     break;
    List<Address> newMembers=new ArrayList<Address>(baseCH.getMembers());
    for (int k=0; k < nodesToRemove; k++) {
      newMembers.remove(Math.abs(baseCH.getHashFunction().hash(k) % newMembers.size()));
    }
    for (int k=0; k < nodesToAdd; k++) {
      newMembers.add(new TestAddress(nodeIndex++));
    }
    log.debugf("Testing consistent hash modifications iteration %d. Initial CH is %s. New members are %s",iterationCount,baseCH,newMembers);
    DefaultConsistentHash updatedMembersCH=chf.updateMembers(baseCH,newMembers);
    if (nodesToRemove > 0) {
      for (int l=0; l < updatedMembersCH.getNumSegments(); l++) {
        assertTrue(updatedMembersCH.locateOwnersForSegment(l).size() > 0);
      }
    }
    DefaultConsistentHash rebalancedCH=chf.rebalance(updatedMembersCH);
    checkDistribution(rebalancedCH,false);
    int actualNumOwners=Math.min(rebalancedCH.getMembers().size(),rebalancedCH.getNumOwners());
    for (int l=0; l < rebalancedCH.getNumSegments(); l++) {
      assertTrue(rebalancedCH.locateOwnersForSegment(l).size() >= actualNumOwners);
    }
    checkMovedSegments(baseCH,rebalancedCH,nodesToAdd);
    DefaultConsistentHash unionCH=chf.union(updatedMembersCH,rebalancedCH);
    for (int l=0; l < updatedMembersCH.getNumSegments(); l++) {
      assertTrue(unionCH.locateOwnersForSegment(l).containsAll(updatedMembersCH.locateOwnersForSegment(l)));
      assertTrue(unionCH.locateOwnersForSegment(l).containsAll(rebalancedCH.locateOwnersForSegment(l)));
    }
    assertEquals(rebalancedCH.getNumSegments(),baseCH.getNumSegments());
    assertEquals(rebalancedCH.getNumOwners(),baseCH.getNumOwners());
    assertEquals(rebalancedCH.getMembers(),newMembers);
    baseCH=rebalancedCH;
    iterationCount++;
  }
}
