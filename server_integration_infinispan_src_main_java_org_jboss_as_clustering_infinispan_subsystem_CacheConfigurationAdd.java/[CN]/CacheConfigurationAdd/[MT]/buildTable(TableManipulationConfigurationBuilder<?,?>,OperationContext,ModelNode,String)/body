{
  ModelNode tableNamePrefix=BaseJDBCStoreConfigurationResource.PREFIX.resolveModelAttribute(context,table);
  builder.batchSize(BaseJDBCStoreConfigurationResource.BATCH_SIZE.resolveModelAttribute(context,table).asInt()).fetchSize(BaseJDBCStoreConfigurationResource.FETCH_SIZE.resolveModelAttribute(context,table).asInt()).tableNamePrefix(tableNamePrefix.isDefined() ? tableNamePrefix.asString() : defaultTableNamePrefix).idColumnName(this.getColumnProperty(context,table,ModelKeys.ID_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_NAME,"id")).idColumnType(this.getColumnProperty(context,table,ModelKeys.ID_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_TYPE,"VARCHAR")).dataColumnName(this.getColumnProperty(context,table,ModelKeys.DATA_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_NAME,"datum")).dataColumnType(this.getColumnProperty(context,table,ModelKeys.DATA_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_TYPE,"BINARY")).timestampColumnName(this.getColumnProperty(context,table,ModelKeys.TIMESTAMP_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_NAME,"version")).timestampColumnType(this.getColumnProperty(context,table,ModelKeys.TIMESTAMP_COLUMN,BaseJDBCStoreConfigurationResource.COLUMN_TYPE,"BIGINT"));
}
