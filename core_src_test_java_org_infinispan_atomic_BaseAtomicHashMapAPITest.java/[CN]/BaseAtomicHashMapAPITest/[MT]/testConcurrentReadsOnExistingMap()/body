{
  final Cache<String,Object> cache1=cache(0,"atomic");
  assertSize(cache1,0);
  final Map<String,String> map=createAtomicMap(cache1,"testConcurrentReadsOnExistingMap",true);
  map.put("the-1","my preciousss");
  final Map<Object,Object> expectedMap=createMap("the-1","my preciousss");
  tm(0,"atomic").begin();
  assertMap(expectedMap,map);
  map.put("the-2","a minor");
  Future<Void> f=fork(TestingUtil.withTxCallable(tm(0,"atomic"),new Callable<Void>(){
    @Override public Void call(){
      Map<String,String> map=createAtomicMap(cache1,"testConcurrentReadsOnExistingMap",true);
      assertMap(expectedMap,map);
      assertNotContainsKey(map,"the-2");
      return null;
    }
  }
));
  f.get(10,TimeUnit.SECONDS);
  tm(0,"atomic").commit();
}
