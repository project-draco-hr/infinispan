{
  final Cache<String,Object> cache1=cache(0,"atomic");
  final Cache<String,Object> cache2=cache(1,"atomic");
  final TransactionManager tm1=tm(cache1);
  final TransactionManager tm2=tm(cache2);
  final Map<String,String> map1=createAtomicMap(cache1,"testConcurrentTx",true);
  Map<Object,Object> expectedMap=createMap("k1","initial");
  tm1.begin();
  map1.put("k1","initial");
  tm1.commit();
  final Map<String,String> map2=createAtomicMap(cache2,"testConcurrentTx",false);
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
  Thread t1=fork(new Runnable(){
    @Override public void run(){
      try {
        tm1.begin();
        map1.put("k1","tx1Value");
        tm1.commit();
      }
 catch (      Exception e) {
        log.error(e);
      }
    }
  }
,false);
  Thread t2=fork(new Runnable(){
    @Override public void run(){
      try {
        tm2.begin();
        map2.put("k2","tx2Value");
        tm2.commit();
      }
 catch (      Exception e) {
        log.error(e);
      }
    }
  }
,false);
  t2.join();
  t1.join();
  expectedMap=createMap("k1","tx1Value","k2","tx2Value");
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
}
