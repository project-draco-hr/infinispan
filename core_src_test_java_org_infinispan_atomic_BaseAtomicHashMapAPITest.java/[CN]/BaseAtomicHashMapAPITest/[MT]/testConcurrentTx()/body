{
  final Cache<String,Object> cache1=cache(0,"atomic");
  final Cache<String,Object> cache2=cache(1,"atomic");
  assertSize(cache1,0);
  assertSize(cache2,0);
  final TransactionManager tm1=tm(cache1);
  final TransactionManager tm2=tm(cache2);
  final Map<String,String> map1=createAtomicMap(cache1,"testConcurrentTx",true);
  Map<Object,Object> expectedMap=createMap("k1","initial");
  tm1.begin();
  map1.put("k1","initial");
  tm1.commit();
  final Map<String,String> map2=createAtomicMap(cache2,"testConcurrentTx",false);
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
  Future<Void> t1=fork(TestingUtil.withTxCallable(tm1,new Callable<Void>(){
    @Override public Void call() throws Exception {
      map1.put("k1","tx1Value");
      return null;
    }
  }
));
  Future<Void> t2=fork(TestingUtil.withTxCallable(tm2,new Callable<Void>(){
    @Override public Void call() throws Exception {
      map2.put("k2","tx2Value");
      return null;
    }
  }
));
  t2.get();
  t1.get();
  expectedMap=createMap("k1","tx1Value","k2","tx2Value");
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
}
