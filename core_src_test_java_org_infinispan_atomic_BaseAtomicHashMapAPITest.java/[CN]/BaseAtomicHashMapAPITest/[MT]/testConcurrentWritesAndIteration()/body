{
  final Cache<String,Object> cache1=cache(0,"atomic");
  assertSize(cache1,0);
  final Map<String,String> map=createAtomicMap(cache1,"testConcurrentWritesAndIteration",true);
  assertSize(map,0);
  final AtomicBoolean allOk=new AtomicBoolean(true);
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t1=fork(new Runnable(){
    @Override public void run(){
      try {
        Map<String,String> map=createAtomicMap(cache1,"testConcurrentWritesAndIteration",true);
        latch.await();
        for (int i=0; i < 500; i++) {
          map.put("key-" + i,"value-" + i);
        }
      }
 catch (      Exception e) {
        log.error("Unexpected error performing transaction",e);
      }
    }
  }
,false);
  Thread t2=fork(new Runnable(){
    @Override public void run(){
      Map<String,String> map=createAtomicMap(cache1,"testConcurrentWritesAndIteration",true);
      try {
        latch.await();
        for (int i=0; i < 500; i++) {
          map.keySet();
        }
      }
 catch (      Exception e) {
        allOk.set(false);
        log.error("Unexpected error performing transaction",e);
      }
    }
  }
,false);
  latch.countDown();
  t1.join();
  t2.join();
  assertTrue("Iteration raised an exception.",allOk.get());
}
