{
  final Cache<String,Object> cache1=cache(0,"atomic");
  assertSize(cache1,0);
  final Map<String,String> map=createAtomicMap(cache1,"testConcurrentWritesAndIteration",true);
  assertSize(map,0);
  Callable<Void> c1=new Callable(){
    @Override public Void call() throws Exception {
      Map<String,String> map=createAtomicMap(cache1,"testConcurrentWritesAndIteration",true);
      for (int i=0; i < 250; i++) {
        map.put("key-" + i,"value-" + i);
      }
      return null;
    }
  }
;
  Callable<Void> c2=new Callable(){
    @Override public Void call() throws Exception {
      Map<String,String> map=createAtomicMap(cache1,"testConcurrentWritesAndIteration",true);
      for (int i=0; i < 250; i++) {
        map.keySet();
      }
      return null;
    }
  }
;
  CompletionService<Void> cs=runConcurrentlyWithCompletionService(c1,c2);
  for (int i=0; i < 2; i++) {
    Future<Void> future=cs.poll(1,TimeUnit.MINUTES);
    if (future == null) {
      fail("Execution of forked tasks didn't complete within 1 minute");
    }
    future.get();
  }
}
