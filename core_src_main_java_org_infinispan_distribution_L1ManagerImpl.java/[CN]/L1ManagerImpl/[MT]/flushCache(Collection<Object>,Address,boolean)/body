{
  final Collection<Address> invalidationAddresses=buildInvalidationAddressList(keys,origin,assumeOriginKeptEntryInL1);
  int nodes=invalidationAddresses.size();
  if (nodes > 0) {
    InvalidateCommand ic=commandsFactory.buildInvalidateFromL1Command(origin,false,InfinispanCollections.<Flag>emptySet(),keys);
    final SingleRpcCommand rpcCommand=commandsFactory.buildSingleRpcCommand(ic);
    boolean multicast=isUseMulticast(nodes);
    if (trace)     log.tracef("Invalidating keys %s on nodes %s. Use multicast? %s",keys,invalidationAddresses,multicast);
    Runnable toExecute;
    if (multicast) {
      toExecute=new Runnable(){
        @Override public void run(){
          rpcManager.invokeRemotely(null,rpcCommand,rpcManager.getDefaultRpcOptions(true));
        }
      }
;
    }
 else {
      toExecute=new Runnable(){
        @Override public void run(){
          rpcManager.invokeRemotely(invalidationAddresses,rpcCommand,syncRpcOptions);
        }
      }
;
    }
    return (Future<Object>)asyncTransportExecutor.submit(toExecute);
  }
 else {
    if (trace)     log.tracef("No L1 caches to invalidate for keys %s",keys);
    return null;
  }
}
