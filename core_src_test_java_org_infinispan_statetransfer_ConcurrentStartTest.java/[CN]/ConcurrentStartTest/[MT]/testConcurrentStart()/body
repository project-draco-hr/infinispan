{
  TestResourceTracker.testThreadStarted(this);
  final CheckPoint checkPoint=new CheckPoint();
  JChannel ch1=new JChannel(JGroupsConfigBuilder.getJGroupsConfig(ConcurrentStartTest.class.getName(),new TransportFlags().withPortRange(0)));
  ch1.setName(TestResourceTracker.getNextNodeName());
  ch1.connect(ConcurrentStartTest.class.getSimpleName());
  log.tracef("Channel %s connected: %s",ch1,ch1.getViewAsString());
  JChannel ch2=new JChannel(JGroupsConfigBuilder.getJGroupsConfig(ConcurrentStartTest.class.getName(),new TransportFlags().withPortRange(1)));
  ch2.setName(TestResourceTracker.getNextNodeName());
  ch2.connect(ConcurrentStartTest.class.getSimpleName());
  log.tracef("Channel %s connected: %s",ch2,ch2.getViewAsString());
  GlobalConfigurationBuilder gcb1=new GlobalConfigurationBuilder();
  gcb1.transport().nodeName(ch1.getName());
  gcb1.globalJmxStatistics().allowDuplicateDomains(true);
  CustomChannelLookup.registerChannel(ch1,gcb1.transport());
  EmbeddedCacheManager cm1=new DefaultCacheManager(gcb1.build(),false);
  registerCacheManager(cm1);
  GlobalConfigurationBuilder gcb2=new GlobalConfigurationBuilder();
  gcb2.transport().nodeName(ch2.getName());
  gcb2.globalJmxStatistics().allowDuplicateDomains(true);
  CustomChannelLookup.registerChannel(ch2,gcb2.transport());
  EmbeddedCacheManager cm2=new DefaultCacheManager(gcb2.build(),false);
  registerCacheManager(cm2);
  assertEquals(ComponentStatus.INSTANTIATED,extractGlobalComponentRegistry(cm1).getStatus());
  replaceInboundInvocationHandler(cm1,checkPoint);
  assertEquals(ComponentStatus.INSTANTIATED,extractGlobalComponentRegistry(cm2).getStatus());
  replaceInboundInvocationHandler(cm2,checkPoint);
  log.debugf("Channels created. Starting the caches");
  Configuration replCfg=new ConfigurationBuilder().clustering().cacheMode(CacheMode.REPL_SYNC).build();
  Configuration distCfg=new ConfigurationBuilder().clustering().cacheMode(CacheMode.DIST_SYNC).build();
  cm1.defineConfiguration("repl",replCfg);
  cm1.defineConfiguration("dist",distCfg);
  cm2.defineConfiguration("repl",replCfg);
  cm2.defineConfiguration("dist",distCfg);
  Future<Object> repl1Future=fork(new CacheStartCallable(cm1,"repl"));
  Future<Object> repl2Future=fork(new CacheStartCallable(cm2,"repl"));
  Future<Object> dist1Future=fork(new CacheStartCallable(cm1,"dist"));
  Future<Object> dist2Future=fork(new CacheStartCallable(cm2,"dist"));
  checkPoint.awaitStrict("blocked_" + ch1.getAddress(),10,SECONDS);
  checkPoint.awaitStrict("blocked_" + ch2.getAddress(),10,SECONDS);
  checkPoint.trigger("unblocked_" + cm1.getAddress(),CheckPoint.INFINITE);
  checkPoint.trigger("unblocked_" + cm2.getAddress(),CheckPoint.INFINITE);
  repl1Future.get(10,SECONDS);
  repl2Future.get(10,SECONDS);
  dist1Future.get(10,SECONDS);
  dist2Future.get(10,SECONDS);
  Cache<String,String> c1r=cm1.getCache("repl");
  Cache<String,String> c1d=cm1.getCache("dist");
  Cache<String,String> c2r=cm2.getCache("repl");
  Cache<String,String> c2d=cm2.getCache("dist");
  blockUntilViewsReceived(10000,cm1,cm2);
  waitForRehashToComplete(c1r,c2r);
  waitForRehashToComplete(c1d,c2d);
  c1r.put("key","value");
  assertEquals("value",c2r.get("key"));
  c1d.put("key","value");
  assertEquals("value",c2d.get("key"));
}
