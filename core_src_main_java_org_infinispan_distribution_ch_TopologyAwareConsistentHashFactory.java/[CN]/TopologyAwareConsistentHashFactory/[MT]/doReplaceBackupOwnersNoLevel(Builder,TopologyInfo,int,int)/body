{
  for (int ownerIdx=builder.getActualNumOwners() - 1; ownerIdx >= 1; ownerIdx--) {
    for (int segment=0; segment < builder.getNumSegments(); segment++) {
      List<Address> owners=builder.getOwners(segment);
      Address owner=owners.get(ownerIdx);
      int maxSegments=topologyInfo.computeExpectedSegments(builder.getNumSegments(),builder.getActualNumOwners(),owner) + maxSegmentsDiff;
      if (builder.getOwned(owner) > maxSegments) {
        for (        Address candidate : builder.getMembers()) {
          int minSegments=topologyInfo.computeExpectedSegments(builder.getNumSegments(),builder.getActualNumOwners(),candidate) + minSegmentsDiff;
          if (builder.getOwned(candidate) < minSegments) {
            if (!owners.contains(candidate) && maintainsDiversity(owners,candidate,owner)) {
              builder.addOwner(segment,candidate);
              builder.removeOwner(segment,owner);
              break;
            }
          }
        }
      }
    }
  }
}
