{
  PathAddress transportAddress=containerAddress.append(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
  ModelNode transport=Util.createAddOperation(transportAddress);
  String cluster=null;
  String stack=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case STACK:
{
        stack=value;
        break;
      }
case CLUSTER:
{
      cluster=value;
      break;
    }
case EXECUTOR:
{
    TransportResource.EXECUTOR.parseAndSetParameter(value,transport,reader);
    break;
  }
case LOCK_TIMEOUT:
{
  TransportResource.LOCK_TIMEOUT.parseAndSetParameter(value,transport,reader);
  break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
String channel=(cluster != null) ? cluster : ("cluster-" + containerAddress.getLastElement().getValue());
TransportResource.CHANNEL.parseAndSetParameter(channel,transport,reader);
PathAddress channelAddress=PathAddress.pathAddress(JGroupsSubsystemResourceDefinition.PATH,ChannelResourceDefinition.pathElement(channel));
ModelNode channelOperation=Util.createAddOperation(channelAddress);
if (stack != null) {
ChannelResourceDefinition.STACK.parseAndSetParameter(stack,channelOperation,reader);
}
operations.add(channelOperation);
ParseUtils.requireNoContent(reader);
operations.add(transport);
}
