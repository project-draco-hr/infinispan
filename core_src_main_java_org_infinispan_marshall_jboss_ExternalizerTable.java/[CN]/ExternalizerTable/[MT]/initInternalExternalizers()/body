{
  internalExternalizers.add(new ArrayListExternalizer());
  internalExternalizers.add(new LinkedListExternalizer());
  internalExternalizers.add(new MapExternalizer());
  internalExternalizers.add(new SetExternalizer());
  internalExternalizers.add(new SingletonListExternalizer());
  internalExternalizers.add(new GlobalTransaction.Externalizer());
  internalExternalizers.add(new RecoveryAwareGlobalTransaction.Externalizer());
  internalExternalizers.add(new DldGlobalTransaction.Externalizer());
  internalExternalizers.add(new RecoveryAwareDldGlobalTransaction.Externalizer());
  internalExternalizers.add(new JGroupsAddress.Externalizer());
  internalExternalizers.add(new Immutables.ImmutableMapWrapperExternalizer());
  internalExternalizers.add(new MarshalledValue.Externalizer());
  internalExternalizers.add(new ExtendedResponse.Externalizer());
  internalExternalizers.add(new SuccessfulResponse.Externalizer());
  internalExternalizers.add(new ExceptionResponse.Externalizer());
  internalExternalizers.add(new RequestIgnoredResponse.Externalizer());
  internalExternalizers.add(new UnsuccessfulResponse.Externalizer());
  internalExternalizers.add(new UnsureResponse.Externalizer());
  internalExternalizers.add(new ReplicableCommandExternalizer());
  internalExternalizers.add(new CacheRpcCommandExternalizer());
  internalExternalizers.add(new ImmortalCacheEntry.Externalizer());
  internalExternalizers.add(new MortalCacheEntry.Externalizer());
  internalExternalizers.add(new TransientCacheEntry.Externalizer());
  internalExternalizers.add(new TransientMortalCacheEntry.Externalizer());
  internalExternalizers.add(new ImmortalCacheValue.Externalizer());
  internalExternalizers.add(new MortalCacheValue.Externalizer());
  internalExternalizers.add(new TransientCacheValue.Externalizer());
  internalExternalizers.add(new TransientMortalCacheValue.Externalizer());
  internalExternalizers.add(new VersionedImmortalCacheEntry.Externalizer());
  internalExternalizers.add(new VersionedMortalCacheEntry.Externalizer());
  internalExternalizers.add(new VersionedTransientCacheEntry.Externalizer());
  internalExternalizers.add(new VersionedTransientMortalCacheEntry.Externalizer());
  internalExternalizers.add(new VersionedImmortalCacheValue.Externalizer());
  internalExternalizers.add(new VersionedMortalCacheValue.Externalizer());
  internalExternalizers.add(new VersionedTransientCacheValue.Externalizer());
  internalExternalizers.add(new VersionedTransientMortalCacheValue.Externalizer());
  internalExternalizers.add(new AtomicHashMap.Externalizer());
  internalExternalizers.add(new Bucket.Externalizer());
  internalExternalizers.add(new AtomicHashMapDelta.Externalizer());
  internalExternalizers.add(new PutOperation.Externalizer());
  internalExternalizers.add(new RemoveOperation.Externalizer());
  internalExternalizers.add(new ClearOperation.Externalizer());
  internalExternalizers.add(new DefaultConsistentHash.Externalizer());
  internalExternalizers.add(new UnionConsistentHash.Externalizer());
  internalExternalizers.add(new JGroupsTopologyAwareAddress.Externalizer());
  internalExternalizers.add(new TopologyAwareConsistentHash.Externalizer());
  internalExternalizers.add(new ByteArrayKey.Externalizer());
  internalExternalizers.add(new RemoteTransactionLogDetails.Externalizer());
  internalExternalizers.add(new SerializableXid.XidExternalizer());
  internalExternalizers.add(new InDoubtTxInfoImpl.Externalizer());
  internalExternalizers.add(new MurmurHash2.Externalizer());
  internalExternalizers.add(new MurmurHash2Compat.Externalizer());
  internalExternalizers.add(new MurmurHash3.Externalizer());
  internalExternalizers.add(new CacheView.Externalizer());
}
