{
  QueryFactory<?> qf=Search.getQueryFactory(cache());
  CallCountingCQResultListener<Object,Object> listener=new CallCountingCQResultListener<>();
  Query query1=qf.from(Person.class).having("age").lte(30).and().having("name").eq("John").or().having("name").eq("Johny").toBuilder().build();
  ContinuousQuery<Object,Object> cq1=new ContinuousQuery<Object,Object>(cache());
  cq1.addContinuousQueryListener(query1,listener);
  Query query2=qf.from(Person.class).having("age").lte(30).or().having("name").eq("Joe").toBuilder().build();
  ContinuousQuery<Object,Object> cq2=new ContinuousQuery<Object,Object>(cache());
  cq2.addContinuousQueryListener(query2,listener);
  final Map<Object,Integer> joined=listener.getJoined();
  final Map<Object,Integer> left=listener.getLeft();
  assertEquals(0,joined.size());
  assertEquals(0,left.size());
  Person value=new Person();
  value.setName("John");
  value.setAge(20);
  cache().put(1,value);
  assertEquals(1,joined.size());
  assertEquals(2,joined.get(1).intValue());
  assertEquals(0,left.size());
  joined.clear();
  value=new Person();
  value.setName("Joe");
  cache().replace(1,value);
  assertEquals(0,joined.size());
  assertEquals(1,left.size());
  joined.clear();
  left.clear();
  value=new Person();
  value.setName("Joe");
  value.setAge(31);
  cache().replace(1,value);
  assertEquals(0,joined.size());
  assertEquals(0,left.size());
  joined.clear();
  left.clear();
  value=new Person();
  value.setName("John");
  value.setAge(29);
  cache().put(1,value);
  assertEquals(1,joined.size());
  assertEquals(1,joined.get(1).intValue());
  assertEquals(0,left.size());
  joined.clear();
  left.clear();
  value=new Person();
  value.setName("Johny");
  value.setAge(29);
  cache().put(1,value);
  assertEquals(0,joined.size());
  assertEquals(0,left.size());
  joined.clear();
  left.clear();
  cache().clear();
  assertEquals(0,joined.size());
  assertEquals(1,left.size());
  assertEquals(2,left.get(1).intValue());
}
