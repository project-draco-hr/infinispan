{
  for (int i=0; i < 2; i++) {
    Person value=new Person();
    value.setName("John");
    value.setAge(30 + i);
    cache().put(i,value);
  }
  QueryFactory<?> qf=Search.getQueryFactory(cache());
  ContinuousQuery<Object,Object> cq=new ContinuousQuery<Object,Object>(cache());
  Query query=qf.from(Person.class).select("age").having("age").lte(30).toBuilder().build();
  CallCountingCQResultListener<Object,Object> listener=new CallCountingCQResultListener<>();
  cq.addContinuousQueryListener(query,listener);
  final Map<Object,Integer> joined=listener.getJoined();
  final Map<Object,Integer> left=listener.getLeft();
  assertEquals(1,joined.size());
  assertEquals(0,left.size());
  joined.clear();
  for (int i=0; i < 10; i++) {
    Person value=new Person();
    value.setName("John");
    value.setAge(i + 25);
    cache().put(i,value);
  }
  assertEquals(5,joined.size());
  assertEquals(0,left.size());
  joined.clear();
  for (int i=0; i < 2; i++) {
    Person value=new Person();
    value.setName("John");
    value.setAge(i + 40);
    cache().put(i,value);
  }
  assertEquals(0,joined.size());
  assertEquals(2,left.size());
  left.clear();
  for (int i=4; i < 20; i++) {
    cache().remove(i);
  }
  assertEquals(0,joined.size());
  assertEquals(2,left.size());
  left.clear();
  cache().clear();
  assertEquals(0,joined.size());
  assertEquals(2,left.size());
  left.clear();
  for (int i=0; i < 2; i++) {
    Person value=new Person();
    value.setName("John");
    value.setAge(i + 20);
    cache().put(i,value,5,TimeUnit.MILLISECONDS);
  }
  assertEquals(2,joined.size());
  assertEquals(0,left.size());
  joined.clear();
  timeService.advance(6);
  cache.getAdvancedCache().getExpirationManager().processExpiration();
  assertEquals(0,cache().size());
  assertEquals(0,joined.size());
  assertEquals(2,left.size());
  left.clear();
  cq.removeContinuousQueryListener(listener);
  for (int i=0; i < 3; i++) {
    Person value=new Person();
    value.setName("John");
    value.setAge(i + 20);
    cache().put(i,value);
  }
  assertEquals(0,joined.size());
  assertEquals(0,left.size());
}
