{
  try {
    commandFactories=new HashMap<Byte,ModuleCommandFactory>(1);
    commandInitializers=new HashMap<Byte,Class<? extends ModuleCommandInitializer>>(1);
    moduleCommands=new HashSet<Class<? extends ReplicableCommand>>(1);
    Map<String,ModuleProperties> p=ModuleProperties.getModuleProperties();
    for (    Map.Entry<String,ModuleProperties> module : p.entrySet()) {
      String factClass=module.getValue().getCommandFactoryClassName();
      String initClass=module.getValue().getCommandInitializerClassName();
      if (factClass != null && initClass != null) {
        try {
          ModuleCommandFactory fact=(ModuleCommandFactory)Util.getInstance(factClass);
          Class<? extends ModuleCommandInitializer> initClazz=(Class<? extends ModuleCommandInitializer>)Util.loadClass(initClass);
          for (          Map.Entry<Byte,Class<? extends ReplicableCommand>> entry : fact.getModuleCommands().entrySet()) {
            byte id=entry.getKey();
            if (commandFactories.containsKey(id))             throw new IllegalArgumentException("Module " + module.getKey() + " cannot use id "+ id+ " for commands, as it is already in use by "+ commandFactories.get(id).getClass().getName());
            commandFactories.put(id,fact);
            commandInitializers.put(id,initClazz);
            moduleCommands.add(entry.getValue());
          }
        }
 catch (        Exception e) {
          throw new CacheException("Unable to load factory class " + factClass + " for module "+ module.getKey());
        }
      }
    }
  }
 catch (  IOException ioe) {
    commandInitializers=Collections.emptyMap();
    commandFactories=Collections.emptyMap();
    throw new CacheException("IO Exception reading module properties file!",ioe);
  }
}
