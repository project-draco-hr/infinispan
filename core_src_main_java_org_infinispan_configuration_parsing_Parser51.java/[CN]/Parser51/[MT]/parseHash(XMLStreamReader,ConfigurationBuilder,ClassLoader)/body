{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CLASS:
case HASH_FUNCTION_CLASS:
      builder.clustering().hash().consistentHash(Util.<ConsistentHash>getInstance(value,cl));
    break;
case NUM_OWNERS:
  builder.clustering().hash().numOwners(Integer.parseInt(value));
break;
case NUM_VIRTUAL_NODES:
builder.clustering().hash().numVirtualNodes(Integer.parseInt(value));
break;
case REHASH_ENABLED:
log.hashRehashEnabledDeprecated();
builder.clustering().stateTransfer().fetchInMemoryState(Boolean.parseBoolean(value));
break;
case REHASH_RPC_TIMEOUT:
log.hashRehashRpcTimeoutDeprecated();
builder.clustering().stateTransfer().timeout(Long.parseLong(value));
break;
case REHASH_WAIT:
log.hashRehashWaitDeprecated();
builder.clustering().stateTransfer().timeout(Long.parseLong(value));
break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case GROUPS:
parseGroups(reader,builder,cl);
break;
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
