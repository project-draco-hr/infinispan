{
  List<K> assertedKeys=new ArrayList<>();
  for (int i=0; i < keys.length; i++) {
    ClientEvent event=pollEvent(type);
    int initialSize=assertedKeys.size();
    for (    K key : keys) {
      K eventKey=null;
switch (event.getType()) {
case CLIENT_CACHE_ENTRY_CREATED:
        eventKey=((ClientCacheEntryCreatedEvent<K>)event).getKey();
      break;
case CLIENT_CACHE_ENTRY_MODIFIED:
    eventKey=((ClientCacheEntryModifiedEvent<K>)event).getKey();
  break;
case CLIENT_CACHE_ENTRY_REMOVED:
eventKey=((ClientCacheEntryRemovedEvent<K>)event).getKey();
break;
case CLIENT_CACHE_ENTRY_EXPIRED:
eventKey=((ClientCacheEntryExpiredEvent<K>)event).getKey();
break;
}
checkUnorderedKeyEvent(assertedKeys,key,eventKey);
}
int finalSize=assertedKeys.size();
assertEquals(initialSize + 1,finalSize);
}
}
