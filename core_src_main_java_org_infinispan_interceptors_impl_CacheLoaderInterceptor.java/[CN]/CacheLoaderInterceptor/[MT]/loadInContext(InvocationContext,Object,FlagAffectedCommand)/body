{
  final AtomicReference<Boolean> isLoaded=new AtomicReference<>();
  InternalCacheEntry<K,V> entry=PersistenceUtil.loadAndStoreInDataContainer(dataContainer,persistenceManager,(K)key,ctx,timeService,isLoaded);
  Boolean isLoadedValue=isLoaded.get();
  if (trace) {
    log.tracef("Entry was loaded? %s",isLoadedValue);
  }
  if (getStatisticsEnabled()) {
    if (isLoadedValue == null) {
    }
 else     if (isLoadedValue) {
      cacheLoads.incrementAndGet();
    }
 else {
      cacheMisses.incrementAndGet();
    }
  }
  if (entry != null) {
    EntryFactory.Wrap wrap=cmd instanceof WriteCommand ? EntryFactory.Wrap.WRAP_NON_NULL : EntryFactory.Wrap.STORE;
    entryFactory.wrapExternalEntry(ctx,key,entry,wrap,!cmd.readsExistingValues());
    if (isLoadedValue != null && isLoadedValue.booleanValue()) {
      Object value=entry.getValue();
      sendNotification(key,value,true,ctx,cmd);
      sendNotification(key,value,false,ctx,cmd);
    }
  }
  return isLoadedValue;
}
