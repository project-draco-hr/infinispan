{
  QueryFactory factory=getQueryFactory();
  String[] fnames={"Matej","Roman","Jakub","Jiri","Anna","Martin","Vojta","Alan"};
  String[] lnames={"Cimbora","Macor","Markos","Holusa","Manukyan","Gencur","Vrabel","Juranek","Field"};
  Random random=new Random(3);
  for (int i=0; i < 999; i++) {
    cache(0).put(i,new Person(i,fnames[random.nextInt(fnames.length)],lnames[random.nextInt(lnames.length)]));
  }
  cache(0).put(1000,new Person(999,"Unnamed","Unnamed"));
  QueryCache queryCache=manager(0).getGlobalComponentRegistry().getComponent(QueryCache.class);
  assertNotNull(queryCache);
  Query query=factory.from(Person.class).having("firstName").eq(Expression.param("nameParam1")).or().having("lastName").eq(Expression.param("nameParam2")).or().having("id").gte(Expression.param("idParam1")).or().having("id").lt(Expression.param("idParam2")).toBuilder().build();
  final int iterations=1000;
  long t1=0;
  long t2=0;
  long t3=0;
  for (int i=0; i < iterations; i++) {
    queryCache.clear();
    long start=System.nanoTime();
    query.setParameter("nameParam1","Unnamed").setParameter("nameParam2","ww").setParameter("idParam1",1000).setParameter("idParam2",0);
    List<Object> list=query.list();
    long duration=System.nanoTime() - start;
    assertEquals(1,list.size());
    t1+=duration;
    start=System.nanoTime();
    query.setParameter("nameParam1","Unnamed").setParameter("nameParam2","zz").setParameter("idParam1",2000).setParameter("idParam2",-1000);
    list=query.list();
    duration=System.nanoTime() - start;
    assertEquals(1,list.size());
    t2+=duration;
    start=System.nanoTime();
    query.setParameter("nameParam1","Unnamed").setParameter("nameParam2","bb").setParameter("idParam1",5000).setParameter("idParam2",-3000);
    list=query.list();
    duration=System.nanoTime() - start;
    assertEquals(1,list.size());
    t3+=duration;
  }
  System.out.println("NamedParamsPerfTest.testNamedParamPerfComparison t1 (avg, us) = " + (t1 / 1000.0 / iterations));
  System.out.println("NamedParamsPerfTest.testNamedParamPerfComparison t2 (avg, us) = " + (t2 / 1000.0 / iterations));
  System.out.println("NamedParamsPerfTest.testNamedParamPerfComparison t3 (avg, us) = " + (t3 / 1000.0 / iterations));
}
