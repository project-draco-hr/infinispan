{
  AbstractVersionedDecoder decoder=decodeCtx.decoder();
  HotRodHeader header=decodeCtx.header();
  if (decoder == null) {
    if (buffer.readableBytes() < 1) {
      return false;
    }
    short magic=buffer.readUnsignedByte();
    if (magic != Constants$.MODULE$.MAGIC_REQ()) {
      if (previousException == null) {
        throw new InvalidMagicIdException("Error reading magic byte or message id: " + magic);
      }
 else {
        log.tracef("Error happened previously, ignoring %d byte until we find the magic number again",magic);
        return false;
      }
    }
 else {
      previousException=null;
    }
    long messageId=ExtendedByteBufJava.readMaybeVLong(buffer);
    if (messageId == Integer.MIN_VALUE) {
      return false;
    }
    header.messageId_$eq(messageId);
    if (buffer.readableBytes() < 1) {
      buffer.resetReaderIndex();
      return false;
    }
    byte version=(byte)buffer.readUnsignedByte();
    header.version_$eq(version);
    if (Constants$.MODULE$.isVersion2x(version)) {
      decoder=Decoder2x$.MODULE$;
    }
 else     if (Constants$.MODULE$.isVersion1x(version)) {
      decoder=Decoder10$.MODULE$;
    }
 else {
      throw new UnknownVersionException("Unknown version:" + version,version,messageId);
    }
    decodeCtx.setDecoder(decoder);
    buffer.markReaderIndex();
  }
  try {
    if (!decoder.readHeader(buffer,header.version(),header.messageId(),header)) {
      return false;
    }
    if (decodeCtx.isTrace()) {
      log.tracef("Decoded header %s",header);
    }
    return true;
  }
 catch (  HotRodUnknownOperationException|SecurityException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RequestParsingException("Unable to parse header",header.version(),header.messageId(),e);
  }
}
