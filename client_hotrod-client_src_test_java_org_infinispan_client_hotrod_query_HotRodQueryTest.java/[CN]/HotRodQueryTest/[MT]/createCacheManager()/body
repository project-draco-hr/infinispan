{
  GlobalConfigurationBuilder gcb=new GlobalConfigurationBuilder().nonClusteredDefault();
  gcb.globalJmxStatistics().enable().allowDuplicateDomains(true).jmxDomain(JMX_DOMAIN).mBeanServerLookup(new PerThreadMBeanServerLookup());
  ConfigurationBuilder builder=getConfigurationBuilder();
  cacheManager=TestCacheManagerFactory.createCacheManager(gcb,new ConfigurationBuilder(),true);
  cacheManager.defineConfiguration(TEST_CACHE_NAME,builder.build());
  cache=cacheManager.getCache(TEST_CACHE_NAME);
  hotRodServer=TestHelper.startHotRodServer(cacheManager);
  org.infinispan.client.hotrod.configuration.ConfigurationBuilder clientBuilder=new org.infinispan.client.hotrod.configuration.ConfigurationBuilder();
  clientBuilder.addServer().host("127.0.0.1").port(hotRodServer.getPort());
  clientBuilder.marshaller(new ProtoStreamMarshaller());
  remoteCacheManager=new RemoteCacheManager(clientBuilder.build());
  remoteCache=remoteCacheManager.getCache(TEST_CACHE_NAME);
  RemoteCache<String,String> metadataCache=remoteCacheManager.getCache(ProtobufMetadataManager.PROTOBUF_METADATA_CACHE_NAME);
  metadataCache.put("google/protobuf/descriptor.proto",read("/google/protobuf/descriptor.proto"));
  metadataCache.put("infinispan/indexing.proto",read("/infinispan/indexing.proto"));
  metadataCache.put("sample_bank_account/bank.proto",read("/sample_bank_account/bank.proto"));
  MarshallerRegistration.registerMarshallers(ProtoStreamMarshaller.getSerializationContext(remoteCacheManager));
  return cacheManager;
}
