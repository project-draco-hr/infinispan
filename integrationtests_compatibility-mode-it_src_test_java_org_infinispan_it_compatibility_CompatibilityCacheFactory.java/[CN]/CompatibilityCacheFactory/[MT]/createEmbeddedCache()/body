{
  org.infinispan.configuration.cache.ConfigurationBuilder builder=new org.infinispan.configuration.cache.ConfigurationBuilder();
  builder.clustering().cacheMode(cacheMode).compatibility().enable().marshaller(marshaller);
  if (cacheMode.isDistributed() && numOwners != defaultNumOwners) {
    builder.clustering().hash().numOwners(numOwners);
  }
  if (cacheMode.isDistributed() && l1Enable) {
    builder.clustering().l1().enable();
  }
  if (keyEquivalence != null) {
    builder.dataContainer().keyEquivalence(keyEquivalence);
  }
  if (valueEquivalence != null) {
    builder.dataContainer().valueEquivalence(valueEquivalence);
  }
  cacheManager=cacheMode.isClustered() ? TestCacheManagerFactory.createClusteredCacheManager(builder) : TestCacheManagerFactory.createCacheManager(builder);
  embeddedCache=cacheName.isEmpty() ? cacheManager.<K,V>getCache() : cacheManager.<K,V>getCache(cacheName);
}
