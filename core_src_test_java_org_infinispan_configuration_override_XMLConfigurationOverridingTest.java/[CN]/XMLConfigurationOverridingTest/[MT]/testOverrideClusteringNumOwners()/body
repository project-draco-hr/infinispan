{
  withCacheManager(new CacheManagerCallable(TestCacheManagerFactory.fromXml("configs/named-cache-override-test.xml")){
    @Override public void call() throws Exception {
      Configuration cnf=cm.getCacheConfiguration(distCacheToChange);
      Assert.assertEquals(CacheMode.DIST_SYNC,cnf.clustering().cacheMode());
      Assert.assertEquals(2,cnf.clustering().hash().numOwners());
      Configuration conf=new ConfigurationBuilder().clustering().cacheMode(CacheMode.DIST_SYNC).hash().numOwners(1).build();
      cm.defineConfiguration(distCacheToChange,conf);
      cnf=cm.getCacheConfiguration(distCacheToChange);
      Assert.assertEquals(CacheMode.DIST_SYNC,cnf.clustering().cacheMode());
      Assert.assertEquals(1,cnf.clustering().hash().numOwners());
      Cache cache1=cm.getCache(distCacheToChange);
      for (int i=0; i < 10; i++) {
        cache1.put("key" + i,"value" + i);
      }
      EmbeddedCacheManager cm1=null;
      try {
        cm1=TestCacheManagerFactory.fromXml("configs/named-cache-override-test.xml");
        cm1.defineConfiguration(distCacheToChange,conf);
        Cache cache2=cm1.getCache(distCacheToChange);
        waitForRehashToComplete(cache1,cache2);
        int cache2Size=cache2.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL).size();
        Assert.assertTrue(cache2Size > 0 && cache2Size != cache1.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL).size());
      }
  finally {
        TestingUtil.killCacheManagers(cm1);
      }
    }
  }
);
}
