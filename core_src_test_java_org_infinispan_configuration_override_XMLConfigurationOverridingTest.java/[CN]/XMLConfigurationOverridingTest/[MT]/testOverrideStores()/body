{
  final String tmpDir=TestingUtil.tmpDirectory(this.getClass());
  try {
    withCacheManager(new CacheManagerCallable(TestCacheManagerFactory.fromXml("configs/named-cache-override-test.xml")){
      @Override public void call(){
        Configuration configuration=cm.getCacheConfiguration(simpleCacheName);
        assertFalse(configuration.jmxStatistics().enabled());
        Configuration conf=new ConfigurationBuilder().eviction().maxEntries(5).strategy(EvictionStrategy.LRU).persistence().passivation(true).addSingleFileStore().location(tmpDir + "/testOverrideLoaders").build();
        cm.defineConfiguration(simpleCacheName,conf);
        configuration=cm.getCacheConfiguration(simpleCacheName);
        assertEquals(CacheMode.LOCAL,configuration.clustering().cacheMode());
        assertTrue(configuration.persistence().passivation());
        Cache cache=cm.getCache(simpleCacheName);
        for (int i=0; i < 10; i++) {
          cache.put("key" + i,"value" + i);
        }
        assertTrue(cache.getAdvancedCache().getDataContainer().size() <= 5);
        for (int i=0; i < 10; i++) {
          assertEquals(cache.get("key" + i),"value" + i);
        }
      }
    }
);
  }
  finally {
    Util.recursiveFileRemove(tmpDir);
  }
}
