{
  final TransportConfiguration transportCfg=configuration.transport();
  if (channel == null) {
    buildChannel();
    if (connectChannel) {
      String transportNodeName=transportCfg.nodeName();
      if (transportNodeName != null && transportNodeName.length() > 0) {
        long range=Short.MAX_VALUE * 2;
        long randomInRange=(long)((Math.random() * range) % range) + 1;
        transportNodeName=transportNodeName + "-" + randomInRange;
        channel.setName(transportNodeName);
      }
    }
  }
  channel.setDiscardOwnMessages(false);
  if (transportCfg.hasTopologyInfo()) {
    if (connectChannel) {
      ((JChannel)channel).setAddressGenerator(new AddressGenerator(){
        @Override public org.jgroups.Address generateAddress(){
          return TopologyUUID.randomUUID(channel.getName(),transportCfg.siteId(),transportCfg.rackId(),transportCfg.machineId());
        }
      }
);
    }
 else {
      if (channel.getAddress() instanceof TopologyUUID) {
        TopologyUUID topologyAddress=(TopologyUUID)channel.getAddress();
        if (!transportCfg.siteId().equals(topologyAddress.getSiteId()) || !transportCfg.rackId().equals(topologyAddress.getRackId()) || !transportCfg.machineId().equals(topologyAddress.getMachineId())) {
          throw new CacheException("Topology information does not match the one set by the provided JGroups channel");
        }
      }
 else {
        throw new CacheException("JGroups address does not contain topology coordinates");
      }
    }
  }
}
