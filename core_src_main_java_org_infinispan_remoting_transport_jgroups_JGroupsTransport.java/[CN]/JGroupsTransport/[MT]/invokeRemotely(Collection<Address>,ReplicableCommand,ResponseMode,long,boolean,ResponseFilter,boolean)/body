{
  if (recipients != null && recipients.isEmpty()) {
    log.trace("Destination list is empty: no need to send message");
    return Collections.emptyList();
  }
  if (trace)   log.trace("dests={0}, command={1}, mode={2}, timeout={3}",recipients,rpcCommand,mode,timeout);
  flushTracker.acquireProcessingLock(false,distributedSyncTimeout,MILLISECONDS);
  boolean unlock=true;
  flushTracker.blockUntilReleased(distributedSyncTimeout,MILLISECONDS);
  boolean asyncMarshalling=mode == ResponseMode.ASYNCHRONOUS;
  if (!usePriorityQueue && ResponseMode.SYNCHRONOUS == mode)   usePriorityQueue=true;
  try {
    RspList rsps=dispatcher.invokeRemoteCommands(toJGroupsAddressVector(recipients),rpcCommand,toJGroupsMode(mode),timeout,recipients != null,usePriorityQueue,toJGroupsFilter(responseFilter),supportReplay,asyncMarshalling);
    if (mode.isAsynchronous())     return Collections.emptyList();
    if (rsps == null)     return Collections.emptyList();
    List<Response> retval=new ArrayList<Response>(rsps.size());
    boolean noValidResponses=true;
    for (    Rsp rsp : rsps.values()) {
      if (rsp.wasSuspected() || !rsp.wasReceived()) {
        if (rsp.wasSuspected()) {
          throw new SuspectException("Suspected member: " + rsp.getSender());
        }
 else {
          if (responseFilter == null)           throw new TimeoutException("Replication timeout for " + rsp.getSender());
        }
      }
 else {
        noValidResponses=false;
        Object value=rsp.getValue();
        if (value instanceof Response) {
          Response response=(Response)value;
          if (response instanceof ExceptionResponse) {
            Exception e=((ExceptionResponse)value).getException();
            if (!(e instanceof ReplicationException)) {
              if (trace)               log.trace("Received exception from " + rsp.getSender(),e);
              throw e;
            }
          }
          retval.add(response);
        }
 else         if (value instanceof Exception) {
          Exception e=(Exception)value;
          if (trace)           log.trace("Unexpected exception from " + rsp.getSender(),e);
          throw e;
        }
 else         if (value instanceof Throwable) {
          Throwable t=(Throwable)value;
          if (trace)           log.trace("Unexpected throwable from " + rsp.getSender(),t);
          throw new CacheException("Remote (" + rsp.getSender() + ") failed unexpectedly",t);
        }
      }
    }
    if (noValidResponses)     throw new TimeoutException("Timed out waiting for valid responses!");
    return retval;
  }
  finally {
    if (unlock)     flushTracker.releaseProcessingLock();
  }
}
