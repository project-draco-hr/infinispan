{
  boolean suppressExceptions=(command instanceof FlagAffectedCommand) && ((FlagAffectedCommand)command).hasFlag(Flag.FAIL_SILENTLY);
  suppressExceptions=suppressExceptions || shuttingDown;
  if (suppressExceptions) {
    if (shuttingDown)     log.trace("Exception while executing code, but we're shutting down so failing silently.",th);
 else     log.trace("Exception while executing code, failing silently...",th);
  }
 else {
    if (th instanceof WriteSkewException) {
      log.debug("Exception executing call",th);
    }
 else     if (th instanceof OutdatedTopologyException) {
      log.outdatedTopology(th);
    }
 else     if (th instanceof RetryPrepareException) {
      log.debugf("Retrying total order prepare command for transaction %s, affected keys %s",ctx.getLockOwner(),toStr(extractWrittenKeys(ctx,command)));
    }
 else {
      Collection<Object> affectedKeys=extractWrittenKeys(ctx,command);
      log.executionError(command.getClass().getSimpleName(),toStr(affectedKeys),th);
    }
    if (ctx.isInTxScope() && ctx.isOriginLocal()) {
      if (trace)       log.trace("Transaction marked for rollback as exception was received.");
      markTxForRollbackAndRethrow(ctx,th);
      throw new IllegalStateException("This should not be reached");
    }
    if (ctx.isOriginLocal() && !(th instanceof CacheException)) {
      th=new CacheException(th);
    }
    throw th;
  }
}
