{
  if (trace) {
    log.tracef("Trying to commit. Key=%s. Operation Flag=%s, L1 invalidation=%s",entry.getKey(),operation,l1Invalidation);
  }
  if (l1Invalidation || (operation == null && !trackStateTransfer && !trackXSiteStateTransfer)) {
    if (trace) {
      log.tracef("Committing key=%s. It is a L1 invalidation or a normal put and no tracking is enabled!",entry.getKey());
    }
    entry.commit(dataContainer,metadata);
    return;
  }
  if (isTrackDisabled(operation)) {
    if (trace) {
      log.tracef("Not committing key=%s. It is a state transfer key but no track is enabled!",entry.getKey());
    }
    return;
  }
  tracker.compute(entry.getKey(),new EquivalentConcurrentHashMapV8.BiFun<Object,DiscardPolicy,DiscardPolicy>(){
    @Override public DiscardPolicy apply(    Object o,    DiscardPolicy discardPolicy){
      if (discardPolicy != null && discardPolicy.ignore(operation)) {
        if (trace) {
          log.tracef("Not committing key=%s. It was already overwritten! Discard policy=%s",entry.getKey(),discardPolicy);
        }
        return discardPolicy;
      }
      entry.commit(dataContainer,metadata);
      DiscardPolicy newDiscardPolicy=calculateDiscardPolicy();
      if (trace) {
        log.tracef("Committed key=%s. Old discard policy=%s. New discard policy=%s",entry.getKey(),discardPolicy,newDiscardPolicy);
      }
      return newDiscardPolicy;
    }
  }
);
}
