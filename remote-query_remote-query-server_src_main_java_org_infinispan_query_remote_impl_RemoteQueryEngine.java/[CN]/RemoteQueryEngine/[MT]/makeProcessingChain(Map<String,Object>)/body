{
  LuceneProcessingChain processingChain;
  if (isCompatMode) {
    EntityNamesResolver entityNamesResolver=new EntityNamesResolver(){
      @Override public Class<?> getClassFromName(      String entityName){
        return serCtx.canMarshall(entityName) ? serCtx.getMarshaller(entityName).getJavaClass() : null;
      }
    }
;
    FieldBridgeProvider fieldBridgeProvider=new FieldBridgeProvider(){
      private final ClassBasedLucenePropertyHelper propertyHelper=new ClassBasedLucenePropertyHelper(searchFactory,entityNamesResolver);
      @Override public FieldBridge getFieldBridge(      String type,      String propertyPath){
        return propertyHelper.getFieldBridge(type,Arrays.asList(propertyPath.split("[.]")));
      }
    }
;
    processingChain=new LuceneProcessingChain.Builder(searchFactory,entityNamesResolver).namedParameters(namedParameters).buildProcessingChainForClassBasedEntities(fieldBridgeProvider);
  }
 else {
    EntityNamesResolver entityNamesResolver=new EntityNamesResolver(){
      @Override public Class<?> getClassFromName(      String entityName){
        return serCtx.canMarshall(entityName) ? ProtobufValueWrapper.class : null;
      }
    }
;
    FieldBridgeProvider fieldBridgeProvider=new FieldBridgeProvider(){
      @Override public FieldBridge getFieldBridge(      String type,      String propertyPath){
        FieldDescriptor fd=getFieldDescriptor(serCtx,type,propertyPath);
switch (fd.getType()) {
case DOUBLE:
          return NumericFieldBridge.DOUBLE_FIELD_BRIDGE;
case FLOAT:
        return NumericFieldBridge.FLOAT_FIELD_BRIDGE;
case INT64:
case UINT64:
case FIXED64:
case SFIXED64:
case SINT64:
      return NumericFieldBridge.LONG_FIELD_BRIDGE;
case INT32:
case FIXED32:
case UINT32:
case SFIXED32:
case SINT32:
case BOOL:
case ENUM:
    return NumericFieldBridge.INT_FIELD_BRIDGE;
case STRING:
case BYTES:
case GROUP:
case MESSAGE:
  return new NullEncodingTwoWayFieldBridge(new TwoWayString2FieldBridgeAdaptor(StringBridge.INSTANCE),QueryFacadeImpl.NULL_TOKEN_CODEC);
}
return null;
}
}
;
processingChain=new LuceneProcessingChain.Builder(searchFactory,entityNamesResolver).namedParameters(namedParameters).buildProcessingChainForDynamicEntities(fieldBridgeProvider);
}
return processingChain;
}
