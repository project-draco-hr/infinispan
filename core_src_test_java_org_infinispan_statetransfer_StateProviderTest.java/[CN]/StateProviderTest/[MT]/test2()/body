{
  int numSegments=4;
  List<Address> members1=Arrays.<Address>asList(A,B,C,D,E,F);
  List<Address> members2=new ArrayList<Address>(members1);
  members2.remove(A);
  members2.remove(F);
  members2.add(G);
  DefaultConsistentHashFactory chf=new DefaultConsistentHashFactory();
  DefaultConsistentHash ch1=chf.create(new MurmurHash3(),2,numSegments,members1,null);
  DefaultConsistentHash ch2=chf.updateMembers(ch1,members2,null);
  when(commandsFactory.buildStateResponseCommand(any(Address.class),anyInt(),any(Collection.class))).thenAnswer(new Answer<StateResponseCommand>(){
    @Override public StateResponseCommand answer(    InvocationOnMock invocation){
      return new StateResponseCommand("testCache",(Address)invocation.getArguments()[0],((Integer)invocation.getArguments()[1]).intValue(),(Collection<StateChunk>)invocation.getArguments()[2]);
    }
  }
);
  when(rpcManager.getAddress()).thenReturn(A);
  doAnswer(new Answer<Map<Address,Response>>(){
    @Override public Map<Address,Response> answer(    InvocationOnMock invocation){
      Collection<Address> recipients=(Collection<Address>)invocation.getArguments()[0];
      ReplicableCommand rpcCommand=(ReplicableCommand)invocation.getArguments()[1];
      if (rpcCommand instanceof StateResponseCommand) {
        Map<Address,Response> results=new HashMap<Address,Response>();
        TestingUtil.sleepThread(10000,"RpcManager mock interrupted during invokeRemotelyInFuture(..)");
        return results;
      }
      return Collections.emptyMap();
    }
  }
).when(rpcManager).invokeRemotelyInFuture(any(Collection.class),any(ReplicableCommand.class),any(RpcOptions.class),any(NotifyingNotifiableFuture.class));
  when(rpcManager.getRpcOptionsBuilder(any(ResponseMode.class))).thenAnswer(new Answer<RpcOptionsBuilder>(){
    @Override public RpcOptionsBuilder answer(    InvocationOnMock invocation){
      Object[] args=invocation.getArguments();
      return new RpcOptionsBuilder(10000,TimeUnit.MILLISECONDS,(ResponseMode)args[0],true);
    }
  }
);
  StateProviderImpl stateProvider=new StateProviderImpl();
  stateProvider.init(cache,pooledExecutorService,configuration,rpcManager,commandsFactory,cacheNotifier,persistenceManager,dataContainer,transactionTable,stateTransferLock,stateConsumer,ef);
  final List<InternalCacheEntry> cacheEntries=new ArrayList<InternalCacheEntry>();
  Object key1=new TestKey("key1",0,ch1);
  Object key2=new TestKey("key2",0,ch1);
  Object key3=new TestKey("key3",1,ch1);
  Object key4=new TestKey("key4",1,ch1);
  cacheEntries.add(new ImmortalCacheEntry(key1,"value1"));
  cacheEntries.add(new ImmortalCacheEntry(key2,"value2"));
  cacheEntries.add(new ImmortalCacheEntry(key3,"value3"));
  cacheEntries.add(new ImmortalCacheEntry(key4,"value4"));
  when(dataContainer.iterator()).thenAnswer(new Answer<Iterator<InternalCacheEntry>>(){
    @Override public Iterator<InternalCacheEntry> answer(    InvocationOnMock invocation){
      return cacheEntries.iterator();
    }
  }
);
  when(transactionTable.getLocalTransactions()).thenReturn(Collections.<LocalTransaction>emptyList());
  when(transactionTable.getRemoteTransactions()).thenReturn(Collections.<RemoteTransaction>emptyList());
  cacheTopology=new CacheTopology(1,ch1,ch1);
  stateProvider.onTopologyUpdate(cacheTopology,false);
  log.debug("ch1: " + ch1);
  Set<Integer> segmentsToRequest=ch1.getSegmentsForOwner(members1.get(0));
  List<TransactionInfo> transactions=stateProvider.getTransactionsForSegments(members1.get(0),1,segmentsToRequest);
  assertEquals(0,transactions.size());
  try {
    stateProvider.getTransactionsForSegments(members1.get(0),1,new HashSet<Integer>(Arrays.asList(2,numSegments)));
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
  verifyNoMoreInteractions(stateTransferLock);
  stateProvider.startOutboundTransfer(F,1,Collections.singleton(0));
  assertTrue(stateProvider.isStateTransferInProgress());
  log.debug("ch2: " + ch2);
  cacheTopology=new CacheTopology(2,ch2,ch2);
  stateProvider.onTopologyUpdate(cacheTopology,false);
  assertFalse(stateProvider.isStateTransferInProgress());
  stateProvider.startOutboundTransfer(E,1,Collections.singleton(0));
  assertTrue(stateProvider.isStateTransferInProgress());
  stateProvider.stop();
  assertFalse(stateProvider.isStateTransferInProgress());
}
