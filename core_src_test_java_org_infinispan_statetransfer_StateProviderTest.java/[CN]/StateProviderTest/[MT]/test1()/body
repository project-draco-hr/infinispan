{
  List<Address> members1=new ArrayList<Address>();
  for (int i=0; i < 6; i++) {
    members1.add(new TestAddress(i));
  }
  List<Address> members2=new ArrayList<Address>(members1);
  members2.remove(new TestAddress(0));
  members2.remove(new TestAddress(5));
  members2.add(new TestAddress(6));
  DefaultConsistentHashFactory chf=new DefaultConsistentHashFactory();
  DefaultConsistentHash ch1=chf.create(new MurmurHash3(),2,4,members1);
  DefaultConsistentHash ch2=chf.updateMembers(ch1,members2);
  when(mockExecutorService.submit(any(Runnable.class))).thenAnswer(new Answer<Future<?>>(){
    @Override public Future<?> answer(    InvocationOnMock invocation){
      return null;
    }
  }
);
  when(rpcManager.getAddress()).thenReturn(new TestAddress(0));
  StateProviderImpl stateProvider=new StateProviderImpl("testCache",mockExecutorService,configuration,rpcManager,commandsFactory,cacheLoaderManager,dataContainer,transactionTable,stateTransferLock);
  final List<InternalCacheEntry> cacheEntries=new ArrayList<InternalCacheEntry>();
  Object key1=new TestKey("key1",0,ch1);
  Object key2=new TestKey("key2",0,ch1);
  cacheEntries.add(new ImmortalCacheEntry(key1,"value1"));
  cacheEntries.add(new ImmortalCacheEntry(key2,"value2"));
  when(dataContainer.iterator()).thenAnswer(new Answer<Iterator<InternalCacheEntry>>(){
    @Override public Iterator<InternalCacheEntry> answer(    InvocationOnMock invocation){
      return cacheEntries.iterator();
    }
  }
);
  when(transactionTable.getLocalTransactions()).thenReturn(Collections.<LocalTransaction>emptyList());
  when(transactionTable.getRemoteTransactions()).thenReturn(Collections.<RemoteTransaction>emptyList());
  stateProvider.onTopologyUpdate(1,ch1,ch1);
  log.debug("ch1: " + ch1);
  List<TransactionInfo> transactions=stateProvider.getTransactionsForSegments(members1.get(0),1,new HashSet<Integer>(Arrays.asList(0,3)));
  assertEquals(0,transactions.size());
  try {
    stateProvider.getTransactionsForSegments(members1.get(0),1,new HashSet<Integer>(Arrays.asList(2,4)));
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
  InOrder stateTransferLockVerifier=inOrder(stateTransferLock);
  stateTransferLockVerifier.verify(stateTransferLock).transactionsExclusiveLock();
  stateTransferLockVerifier.verify(stateTransferLock).transactionsExclusiveUnlock();
  stateProvider.startOutboundTransfer(new TestAddress(5),1,Collections.singleton(0));
  assertTrue(stateProvider.isStateTransferInProgress());
  log.debug("ch2: " + ch2);
  stateProvider.onTopologyUpdate(2,ch1,ch2);
  assertFalse(stateProvider.isStateTransferInProgress());
  stateProvider.startOutboundTransfer(new TestAddress(4),1,Collections.singleton(0));
  assertTrue(stateProvider.isStateTransferInProgress());
  stateProvider.shutdown();
  assertFalse(stateProvider.isStateTransferInProgress());
}
