{
  Cache<String,String> embedded=cacheFactory.getEmbeddedCache();
  RemoteCache<String,String> remote=cacheFactory.getHotRodCache();
  TestCacheListener l=new TestCacheListener();
  embedded.addListener(l);
  Map<String,String> tmp=new HashMap<String,String>();
  tmp.put("key","value");
  tmp.put("key2","value2");
  remote.putAll(tmp);
  assertEquals(2,l.createdCounter);
  assertEquals("value",l.created.get("key"));
  assertEquals("value2",l.created.get("key2"));
  assertEquals(2,l.modifiedCounter);
  assertEquals("value",l.modified.get("key"));
  assertEquals("value2",l.modified.get("key2"));
  assertTrue(l.removed.isEmpty());
  assertTrue(l.visited.isEmpty());
  l.reset();
  remote.putIfAbsent("newKey","newValue");
  assertEquals(1,l.createdCounter);
  assertEquals("newValue",l.created.get("newKey"));
  assertEquals(1,l.modifiedCounter);
  assertEquals("newValue",l.modified.get("newKey"));
  assertTrue(l.removed.isEmpty());
  assertTrue(l.visited.isEmpty());
  l.reset();
  remote.putIfAbsent("newKey","shouldNotBeAdded");
  assertTrue(l.created.isEmpty());
  assertTrue(l.modified.isEmpty());
  assertTrue(l.removed.isEmpty());
  assertEquals(1,l.visitedCounter);
  l.reset();
}
