{
  Cache<String,String> embedded=cacheFactory.getEmbeddedCache();
  RemoteCache<String,String> remote=cacheFactory.getHotRodCache();
  TestCacheListener l=new TestCacheListener();
  embedded.addListener(l);
  assertTrue(l.created.isEmpty());
  assertTrue(l.removed.isEmpty());
  assertTrue(l.modified.isEmpty());
  assertTrue(l.visited.isEmpty());
  remote.put("k","v");
  assertEquals(1,l.createdCounter);
  assertEquals("v",l.created.get("k"));
  assertTrue(l.removed.isEmpty());
  assertEquals(1,l.modifiedCounter);
  assertEquals("v",l.modified.get("k"));
  assertTrue(l.visited.isEmpty());
  remote.put("key","value");
  assertEquals(2,l.createdCounter);
  assertTrue(l.removed.isEmpty());
  assertEquals(2,l.modifiedCounter);
  assertTrue(l.visited.isEmpty());
  remote.put("key","modifiedValue");
  assertEquals(2,l.createdCounter);
  assertTrue(l.removed.isEmpty());
  assertEquals(3,l.modifiedCounter);
  assertEquals("modifiedValue",l.modified.get("key"));
  assertTrue(l.visited.isEmpty());
  remote.replace("k","replacedValue");
  assertEquals(2,l.createdCounter);
  assertTrue(l.removed.isEmpty());
  assertEquals(4,l.modifiedCounter);
  assertEquals("replacedValue",l.modified.get("k"));
  assertTrue(l.visited.isEmpty());
  l.reset();
  remote.remove("key");
  assertTrue(l.created.isEmpty());
  assertEquals(1,l.removedCounter);
  assertEquals("modifiedValue",l.removed.get("key"));
  assertTrue(l.modified.isEmpty());
  l.reset();
  String value=remote.get("k");
  assertTrue(l.created.isEmpty());
  assertTrue(l.removed.isEmpty());
  assertTrue(l.modified.isEmpty());
  assertEquals(1,l.visitedCounter);
  assertEquals("replacedValue",l.visited.get("k"));
  l.reset();
}
