{
  StringBuilder sb=new StringBuilder();
  sb.append("<h2>Infinispan configuration options</h2><br/>");
  sb.append("<UL>");
  List<Class<?>> configBeans;
  try {
    configBeans=getConfigBeans();
    configBeans.add(TypedProperties.class);
    configBeans.add(InfinispanConfiguration.class);
    XMLTreeOutputWalker tw=new XMLTreeOutputWalker(sb);
    FileLookup fl=new FileLookup();
    InputStream file=fl.lookupFile("schema/infinispan-config-" + Version.getMajorVersion() + ".xsd");
    XSOMParser reader=new XSOMParser();
    reader.parse(file);
    XSSchemaSet xss=reader.getResult();
    XSOMSchemaTreeWalker w=new XSOMSchemaTreeWalker(xss.getSchema(1),"infinispan");
    TreeNode root=w.getRoot();
    associateBeansWithTreeNodes(configBeans,root);
    sb.append("<div class=\"" + "source" + "\"><pre>");
    tw.preOrderTraverse(root);
    sb.append("</pre></div>");
    TreeNode node=tw.findNode(root,"namedCache","infinispan");
    node.detach();
    PruneTreeWalker ptw=new PruneTreeWalker("property");
    ptw.postOrderTraverse(root);
    for (    TreeNode n : root) {
      if (n.getName().equals("properties"))       continue;
      generateHeaderForConfigurationElement(sb,tw,n);
      if (!n.getAttributes().isEmpty()) {
        generateAttributeTableRows(sb,n);
      }
      if (n.hasChild("properties")) {
        generatePropertiesTableRows(sb,n);
      }
    }
  }
 catch (  Exception e) {
    System.out.println("Exception while generating configuration reference " + e);
    System.out.println("Classpath is  " + classpath);
    e.printStackTrace();
  }
  return sb.toString();
}
