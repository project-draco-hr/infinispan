{
  final MapReduceTaskFuture<Map<KOut,VOut>> result=new MapReduceTaskFuture<Map<KOut,VOut>>();
  ExecutorService executor=mapReduceManager.getExecutorService();
  Future<Map<KOut,VOut>> returnValue=executor.submit(new Callable<Map<KOut,VOut>>(){
    @Override public Map<KOut,VOut> call() throws Exception {
      try {
        Map<KOut,VOut> retval=execute();
        try {
          result.notifyDone(retval);
          log.trace("Finished notifying");
        }
 catch (        Throwable e) {
          log.trace("Exception while notifying the future",e);
        }
        return retval;
      }
 catch (      Exception e) {
        try {
          result.notifyException(e);
          log.trace("Finished notifying exception");
        }
 catch (        Throwable e2) {
          log.trace("Exception while notifying the future",e2);
        }
        throw e;
      }
    }
  }
);
  result.setFuture(returnValue);
  return result;
}
