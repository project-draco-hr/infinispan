{
  RpcManager rpc=cache.getRpcManager();
  MapCombineCommand<KIn,VIn,KOut,VOut> cmd=null;
  Map<KOut,List<VOut>> mapPhasesResult=new HashMap<KOut,List<VOut>>();
  List<MapTaskPart<Map<KOut,List<VOut>>>> futures=new ArrayList<MapTaskPart<Map<KOut,List<VOut>>>>();
  if (inputTaskKeysEmpty()) {
    for (    Address target : rpc.getTransport().getMembers()) {
      if (target.equals(rpc.getAddress())) {
        cmd=buildMapCombineCommand(taskId.toString(),clone(mapper),clone(combiner),null,false,false);
      }
 else {
        cmd=buildMapCombineCommand(taskId.toString(),mapper,combiner,null,false,false);
      }
      MapTaskPart<Map<KOut,List<VOut>>> part=createTaskMapPart(cmd,target,false);
      part.execute();
      futures.add(part);
    }
  }
 else {
    Map<Address,List<KIn>> keysToNodes=mapKeysToNodes(keys);
    for (    Entry<Address,List<KIn>> e : keysToNodes.entrySet()) {
      Address address=e.getKey();
      List<KIn> keys=e.getValue();
      if (address.equals(rpc.getAddress())) {
        cmd=buildMapCombineCommand(taskId.toString(),clone(mapper),clone(combiner),keys,false,false);
      }
 else {
        cmd=buildMapCombineCommand(taskId.toString(),mapper,combiner,keys,false,false);
      }
      MapTaskPart<Map<KOut,List<VOut>>> part=createTaskMapPart(cmd,address,false);
      part.execute();
      futures.add(part);
    }
  }
  Map<KOut,VOut> reducedResult=new HashMap<KOut,VOut>();
  try {
    for (    MapTaskPart<Map<KOut,List<VOut>>> mapTaskPart : futures) {
      mergeResponse(mapPhasesResult,mapTaskPart.get());
    }
  }
  finally {
    cancellableTasks.clear();
  }
  MapReduceTaskLifecycleService taskLifecycleService=MapReduceTaskLifecycleService.getInstance();
  log.tracef("For m/r task %s invoking %s locally",taskId,reducer);
  try {
    taskLifecycleService.onPreExecute(reducer,cache);
    for (    Entry<KOut,List<VOut>> e : mapPhasesResult.entrySet()) {
      reducedResult.put(e.getKey(),reducer.reduce(e.getKey(),e.getValue().iterator()));
    }
  }
  finally {
    taskLifecycleService.onPostExecute(reducer);
  }
  return reducedResult;
}
