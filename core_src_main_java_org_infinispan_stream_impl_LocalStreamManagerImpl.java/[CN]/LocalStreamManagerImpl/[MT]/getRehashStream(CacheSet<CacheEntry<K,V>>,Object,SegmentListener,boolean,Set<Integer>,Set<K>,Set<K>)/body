{
  CacheTopology topology=stm.getCacheTopology();
  if (trace) {
    log.tracef("Topology for supplier is %s for id %s",topology,requestId);
  }
  ConsistentHash readCH=topology.getCurrentCH();
  ConsistentHash pendingCH=topology.getPendingCH();
  if (pendingCH != null) {
    Set<Integer> lostSegments=new HashSet<>();
    Iterator<Integer> iterator=segments.iterator();
    while (iterator.hasNext()) {
      Integer segment=iterator.next();
      int intSegment=segment.intValue();
      if (!pendingCH.locateOwnersForSegment(intSegment).contains(localAddress) || !readCH.locateOwnersForSegment(intSegment).contains(localAddress)) {
        iterator.remove();
        lostSegments.add(segment);
      }
    }
    if (!lostSegments.isEmpty()) {
      if (trace) {
        log.tracef("Lost segments %s during rehash for id %s",lostSegments,requestId);
      }
      listener.lostSegments(lostSegments);
    }
 else     if (trace) {
      log.tracef("Currently in the middle of a rehash for id %s",requestId);
    }
  }
 else {
    Set<Integer> ourSegments=readCH.getSegmentsForOwner(localAddress);
    if (segments.retainAll(ourSegments)) {
      if (trace) {
        log.tracef("We found to be missing some segments requested for id %s",requestId);
      }
      listener.localSegments(ourSegments);
    }
 else     if (trace) {
      log.tracef("Hash %s for id %s",readCH,requestId);
    }
  }
  return getStream(cacheEntrySet,parallelStream,segments,keysToInclude,keysToExclude);
}
