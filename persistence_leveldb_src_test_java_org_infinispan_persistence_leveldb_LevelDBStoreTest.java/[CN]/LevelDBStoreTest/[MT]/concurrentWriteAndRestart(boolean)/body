{
  final int THREADS=4;
  final AtomicBoolean run=new AtomicBoolean(true);
  final AtomicInteger writtenPre=new AtomicInteger();
  final AtomicInteger writtenPost=new AtomicInteger();
  final AtomicBoolean post=new AtomicBoolean(false);
  final CountDownLatch started=new CountDownLatch(THREADS);
  final CountDownLatch finished=new CountDownLatch(THREADS);
  ExecutorService executor=Executors.newFixedThreadPool(THREADS);
  for (int i=0; i < THREADS; ++i) {
    final int thread=i;
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          started.countDown();
          int i=0;
          while (run.get()) {
            InternalCacheEntry entry=TestInternalCacheEntryFactory.create("k" + i,"v" + i);
            MarshalledEntry me=TestingUtil.marshalledEntry(entry,getMarshaller());
            try {
              AtomicInteger record=post.get() ? writtenPost : writtenPre;
              cl.write(me);
              ++i;
              int prev;
              do {
                prev=record.get();
                if ((prev & (1 << thread)) != 0)                 break;
              }
 while (record.compareAndSet(prev,prev | (1 << thread)));
            }
 catch (            PersistenceException e) {
            }
          }
        }
 catch (        Exception e) {
          log.error("Failed",e);
          throw new RuntimeException(e);
        }
 finally {
          finished.countDown();
        }
      }
    }
);
  }
  try {
    if (!started.await(30,TimeUnit.SECONDS)) {
      fail();
    }
    Thread.sleep(1000);
    cl.stop();
    post.set(true);
    Thread.sleep(1000);
    if (start) {
      cl.start();
      Thread.sleep(1000);
    }
  }
 catch (  InterruptedException e) {
    fail();
  }
 finally {
    run.set(false);
    executor.shutdown();
  }
  try {
    if (!finished.await(30,TimeUnit.SECONDS)) {
      fail();
    }
  }
 catch (  InterruptedException e) {
    fail();
  }
  assertEquals(writtenPre.get(),(1 << THREADS) - 1,"pre");
  if (start) {
    assertEquals(writtenPost.get(),(1 << THREADS) - 1,"post");
  }
 else {
    assertEquals(writtenPost.get(),0,"post");
  }
}
