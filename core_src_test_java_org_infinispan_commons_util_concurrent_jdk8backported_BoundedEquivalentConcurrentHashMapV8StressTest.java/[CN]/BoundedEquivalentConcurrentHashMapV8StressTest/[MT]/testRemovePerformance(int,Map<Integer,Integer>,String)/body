{
  long startIncludePut=System.currentTimeMillis();
  int j=0;
  long firstHalfNano=System.nanoTime();
  for (; j < count / 2; j++)   bchm.put(j,j);
  firstHalfNano=System.nanoTime() - firstHalfNano;
  long secondHalfNano=System.nanoTime();
  for (; j < count; j++)   bchm.put(j,j);
  secondHalfNano=System.nanoTime() - secondHalfNano;
  bchm.get(0);
  long start=System.currentTimeMillis();
  long getNano=0;
  long removeNano=0;
  for (int i=1; i < count; i++) {
    long getBegin=System.nanoTime();
    assertNotNull(bchm.get(i));
    getNano+=System.nanoTime() - getBegin;
    long removeBegin=System.nanoTime();
    bchm.remove(i);
    removeNano+=System.nanoTime() - removeBegin;
    if (i % 100 == 0) {
      if (System.currentTimeMillis() - start > TimeUnit.SECONDS.toMillis(50))       fail(evictionName + ": removing " + count+ " entries takes more than 50 seconds!");
    }
  }
  System.out.println("BCHM Stress Test " + evictionName + " took "+ (System.currentTimeMillis() - start)+ " milliseconds");
  System.out.println("BCHM Entire Stress Test " + evictionName + " took "+ (System.currentTimeMillis() - startIncludePut)+ " milliseconds");
  System.out.println("First half of puts took " + firstHalfNano + " nanoseconds");
  System.out.println("Second half of puts took " + secondHalfNano + " nanoseconds");
  System.out.println("Gets took: " + getNano + " nanoseconds");
  System.out.println("Removes took: " + removeNano + " nanoseconds");
}
