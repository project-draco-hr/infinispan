{
  Cache<String,String> cache1=cache(0,CACHE_NAME);
  Cache<String,String> cache2=cache(1,CACHE_NAME);
  Transport originalTransport=TestingUtil.extractComponent(cache1,Transport.class);
  Transport mockTransport=spy(originalTransport);
  doThrow(new RuntimeException("Barf!")).when(mockTransport).invokeRemotely((List<Address>)anyObject(),(CacheRpcCommand)anyObject(),(ResponseMode)anyObject(),anyLong(),anyBoolean(),(ResponseFilter)anyObject(),anyBoolean(),anyBoolean());
  RpcManagerImpl rpcManager=(RpcManagerImpl)TestingUtil.extractComponent(cache1,RpcManager.class);
  rpcManager.setTransport(mockTransport);
  try {
    cache1.put(key,value);
    fail("Should have barfed");
  }
 catch (  RuntimeException re) {
  }
  try {
    cache1.remove(key);
    fail("Should have barfed");
  }
 catch (  RuntimeException re) {
  }
  assertNull("Should have cleaned up",cache1.get(key));
  assertNull("Should have cleaned up",cache1.getAdvancedCache().getDataContainer().get(key));
  assertNull("Should have cleaned up",cache2.get(key));
  assertNull("Should have cleaned up",cache2.getAdvancedCache().getDataContainer().get(key));
  cache1.putForExternalRead(key,value);
}
