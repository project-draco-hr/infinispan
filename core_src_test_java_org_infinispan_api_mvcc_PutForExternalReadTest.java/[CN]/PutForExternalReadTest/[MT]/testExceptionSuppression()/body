{
  Cache<String,String> cache1=cache(0,CACHE_NAME);
  Cache<String,String> cache2=cache(1,CACHE_NAME);
  assertTrue(cache1.getAdvancedCache().getSequentialInterceptorChain().addInterceptorBefore(new BaseSequentialInterceptor(){
    @Override public CompletableFuture<Void> visitCommand(    InvocationContext ctx,    VisitableCommand command) throws Throwable {
      if (command instanceof PutKeyValueCommand || command instanceof RemoveCommand) {
        throw new RuntimeException("Barf!");
      }
      return ctx.continueInvocation();
    }
  }
,CallInterceptor.class));
  try {
    cache1.put(key,value);
    fail("Should have barfed");
  }
 catch (  RuntimeException re) {
  }
  try {
    cache1.remove(key);
    fail("Should have barfed");
  }
 catch (  RuntimeException re) {
  }
  assertNull("Should have cleaned up",cache1.get(key));
  assertNull("Should have cleaned up",cache1.getAdvancedCache().getDataContainer().get(key));
  assertNull("Should have cleaned up",cache2.get(key));
  assertNull("Should have cleaned up",cache2.getAdvancedCache().getDataContainer().get(key));
  cache1.putForExternalRead(key,value);
}
