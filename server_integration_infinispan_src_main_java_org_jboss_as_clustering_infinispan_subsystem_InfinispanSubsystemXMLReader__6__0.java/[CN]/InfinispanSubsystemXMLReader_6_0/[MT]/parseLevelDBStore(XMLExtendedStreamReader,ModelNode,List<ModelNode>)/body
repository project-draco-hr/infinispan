{
  ModelNode store=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  String name=ModelKeys.LEVELDB_STORE_NAME;
  List<ModelNode> additionalConfigurationOperations=new ArrayList<ModelNode>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case PATH:
{
        LevelDBStoreResource.PATH.parseAndSetParameter(value,store,reader);
        break;
      }
case BLOCK_SIZE:
{
      LevelDBStoreResource.BLOCK_SIZE.parseAndSetParameter(value,store,reader);
      break;
    }
case CACHE_SIZE:
{
    LevelDBStoreResource.CACHE_SIZE.parseAndSetParameter(value,store,reader);
    break;
  }
case CLEAR_THRESHOLD:
{
  LevelDBStoreResource.CLEAR_THRESHOLD.parseAndSetParameter(value,store,reader);
  break;
}
default :
{
name=this.parseStoreAttribute(name,reader,i,attribute,value,store);
}
}
}
store.get(ModelKeys.NAME).set(name);
addNameToAddress(store,PathAddress.pathAddress(cache.get(OP_ADDR)),ModelKeys.LEVELDB_STORE);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case EXPIRATION:
{
this.parseStoreExpiry(reader,store,additionalConfigurationOperations);
break;
}
case COMPRESSION:
{
this.parseStoreCompression(reader,store,additionalConfigurationOperations);
break;
}
case IMPLEMENTATION:
{
this.parseStoreImplementation(reader,store,additionalConfigurationOperations);
break;
}
default :
{
this.parseStoreProperty(reader,store,additionalConfigurationOperations);
}
}
}
operations.add(store);
operations.addAll(additionalConfigurationOperations);
}
