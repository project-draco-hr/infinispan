{
  ModelNode store=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  String name=ModelKeys.BINARY_KEYED_JDBC_STORE_NAME;
  List<ModelNode> additionalConfigurationOperations=new ArrayList<ModelNode>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case DATASOURCE:
{
        BaseJDBCStoreResource.DATA_SOURCE.parseAndSetParameter(value,store,reader);
        break;
      }
default :
{
      name=this.parseStoreAttribute(name,reader,i,attribute,value,store);
    }
}
}
if (!store.hasDefined(ModelKeys.DATASOURCE)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.DATASOURCE));
}
store.get(ModelKeys.NAME).set(name);
addNameToAddress(store,PathAddress.pathAddress(cache.get(OP_ADDR)),ModelKeys.BINARY_KEYED_JDBC_STORE);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case BINARY_KEYED_TABLE:
{
    this.parseJDBCStoreTable(reader,store.get(ModelKeys.BINARY_KEYED_TABLE).setEmptyObject());
    break;
  }
case WRITE_BEHIND:
{
  parseStoreWriteBehind(reader,store,additionalConfigurationOperations);
  break;
}
default :
{
this.parseStoreProperty(reader,store,additionalConfigurationOperations);
}
}
}
operations.add(store);
operations.addAll(additionalConfigurationOperations);
}
