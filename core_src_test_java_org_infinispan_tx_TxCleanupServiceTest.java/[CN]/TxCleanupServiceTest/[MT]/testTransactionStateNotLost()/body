{
  final ControlledCommandFactory ccf=ControlledCommandFactory.registerControlledCommandFactory(cache(1),CommitCommand.class);
  ccf.gate.close();
  final Map<Object,DummyTransaction> keys2Tx=new HashMap<Object,DummyTransaction>(TX_COUNT);
  int viewId=advancedCache(0).getRpcManager().getTransport().getViewId();
  log.tracef("ViewId before %s",viewId);
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      for (int i=0; i < TX_COUNT; i++) {
        Object k=getKeyForCache(1);
        tm(0).begin();
        cache(0).put(k,k);
        DummyTransaction transaction=((DummyTransactionManager)tm(0)).getTransaction();
        keys2Tx.put(k,transaction);
        tm(0).commit();
      }
      return null;
    }
  }
);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return ccf.blockTypeCommandsReceived.get() == TX_COUNT;
    }
  }
);
  log.tracef("Viewid middle %s",viewId);
  consistentHashFactory.setOwnerIndexes(2);
  addClusterEnabledCacheManager(dcc);
  waitForClusterToForm();
  viewId=advancedCache(0).getRpcManager().getTransport().getViewId();
  log.tracef("Viewid after before %s",viewId);
  final Map<Object,DummyTransaction> migratedTx=new HashMap<Object,DummyTransaction>(TX_COUNT);
  for (  Object key : keys2Tx.keySet()) {
    if (keyMapsToNode(key,2)) {
      migratedTx.put(key,keys2Tx.get(key));
    }
  }
  log.tracef("Number of migrated tx is %s",migratedTx.size());
  assertEquals(TX_COUNT,migratedTx.size());
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return TestingUtil.getTransactionTable(cache(2)).getRemoteTxCount() == migratedTx.size();
    }
  }
);
  log.trace("Releasing the gate");
  ccf.gate.open();
  future.get(10,TimeUnit.SECONDS);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return TestingUtil.getTransactionTable(cache(2)).getRemoteTxCount() == 0;
    }
  }
);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      boolean allZero=true;
      for (int i=0; i < 3; i++) {
        TransactionTable tt=TestingUtil.getTransactionTable(cache(i));
        int local=tt.getLocalTxCount();
        int remote=tt.getRemoteTxCount();
        log.tracef("For cache %d, localTxCount=%s, remoteTxCount=%s",i,local,remote);
        log.tracef(String.format("For cache %s , localTxCount=%s, remoteTxCount=%s",i,local,remote));
        allZero=allZero && (local == 0);
        allZero=allZero && (remote == 0);
      }
      return allZero;
    }
  }
);
  for (  Object key : keys2Tx.keySet()) {
    assertNotLocked(key);
    assertEquals(key,cache(0).get(key));
  }
}
