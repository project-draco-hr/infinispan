{
  EmbeddedCacheManager sourceCacheManager=null;
  EmbeddedCacheManager targetCacheManager=null;
  HotRodServer sourceServer=null;
  HotRodServer targetServer=null;
  RemoteCache<String,String> sourceRemoteCache=null;
  RemoteCache<String,String> targetRemoteCache=null;
  try {
    sourceCacheManager=TestCacheManagerFactory.createCacheManager(hotRodCacheConfiguration());
    sourceCacheManager.defineConfiguration(CACHE_NAME,hotRodCacheConfiguration().build());
    sourceServer=HotRodClientTestingUtil.startHotRodServer(sourceCacheManager);
    sourceRemoteCache=getRemoteCache(sourceServer);
    sourceRemoteCache.put("key","value");
    sourceRemoteCache.put("key2","value2",24,TimeUnit.HOURS,1,TimeUnit.DAYS);
    sourceRemoteCache.put("key3","value2");
    MetadataValue<String> key2Metadata=sourceRemoteCache.getWithMetadata("key2");
    long k2Created=key2Metadata.getCreated();
    targetCacheManager=TestCacheManagerFactory.createCacheManager(hotRodCacheConfiguration());
    targetServer=HotRodClientTestingUtil.startHotRodServer(targetCacheManager);
    ConfigurationBuilder targetCacheConfiguration=getTargetCacheConfiguration(sourceServer.getPort());
    targetCacheManager.defineConfiguration(CACHE_NAME,targetCacheConfiguration.build());
    targetRemoteCache=getRemoteCache(targetServer);
    MetadataValue<String> metadataEntry=targetRemoteCache.getWithMetadata("key");
    assertNotNull(metadataEntry);
    MetadataValue<String> otherMetadataEntry=targetRemoteCache.getWithMetadata("key2");
    assertNotNull(otherMetadataEntry);
    assertEquals(otherMetadataEntry.getLifespan(),24 * 3600);
    assertEquals(otherMetadataEntry.getMaxIdle(),24 * 3600);
    assertEquals(otherMetadataEntry.getCreated(),k2Created);
    assertTrue(otherMetadataEntry.getLastUsed() > 0);
  }
  finally {
    killRemoteCacheManager(targetRemoteCache != null ? targetRemoteCache.getRemoteCacheManager() : null);
    killRemoteCacheManager(sourceRemoteCache != null ? sourceRemoteCache.getRemoteCacheManager() : null);
    killCacheManagers(targetCacheManager,sourceCacheManager);
    killServers(targetServer,sourceServer);
  }
}
