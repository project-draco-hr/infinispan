{
  long start=System.currentTimeMillis();
  Marshaller m=new MigrationMarshaller();
  RemoteCacheManager rcmOld=new RemoteCacheManager(m,oldCluster);
  final RemoteCacheManager rcmNew=new RemoteCacheManager(m,newCluster);
  Set<ByteArrayKey> keys=(Set<ByteArrayKey>)rcmOld.getCache(cacheName).get("___MigrationManager_HotRod_KnownKeys___");
  System.out.printf(">> Retrieved %s keys stored in cache %s on the old cluster.%n",keys.size(),cacheName);
  ExecutorService es=Executors.newFixedThreadPool(threads);
  final AtomicInteger count=new AtomicInteger(0);
  for (  final ByteArrayKey key : keys) {
    es.submit(new Runnable(){
      @Override public void run(){
        rcmNew.getCache(cacheName).get(key.getData());
        int i=count.get();
        if (i % 100 == 0)         System.out.printf(">>    Moved %s keys%n",i);
      }
    }
);
    count.getAndIncrement();
  }
  es.shutdown();
  while (!es.isShutdown())   LockSupport.parkNanos(TimeUnit.NANOSECONDS.convert(100,TimeUnit.MILLISECONDS));
  System.out.printf(">> Transferred %s entries in cache %s from the old cluster to the new, in %s%n",keys.size(),cacheName,Util.prettyPrintTime(System.currentTimeMillis() - start));
}
