{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ENABLED:
      if (Boolean.parseBoolean(value)) {
        builder.clustering().l1().enable();
      }
 else {
        builder.clustering().l1().disable();
      }
    break;
case INVALIDATION_THRESHOLD:
  builder.clustering().l1().invalidationThreshold(Integer.parseInt(value));
break;
case LIFESPAN:
builder.clustering().l1().lifespan(Long.parseLong(value));
break;
case INVALIDATION_CLEANUP_TASK_FREQUENCY:
builder.clustering().l1().cleanupTaskFrequency(Long.parseLong(value));
break;
case ON_REHASH:
if (Boolean.parseBoolean(value)) {
builder.clustering().l1().enableOnRehash();
}
 else {
builder.clustering().l1().disableOnRehash();
}
break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
ParseUtils.requireNoContent(reader);
}
