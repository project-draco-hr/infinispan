{
  GlobalConfigurationBuilder builder=holder.getGlobalConfigurationBuilder();
  ParseUtils.requireNoAttributes(reader);
  boolean transportParsed=false;
  while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
    Element element=Element.forName(reader.getLocalName());
switch (element) {
case ASYNC_LISTENER_EXECUTOR:
{
        parseExecutor(reader,holder.getGlobalConfigurationBuilder().asyncListenerExecutor(),holder.getClassLoader());
        break;
      }
case PERSISTENCE_EXECUTOR:
{
      parseExecutor(reader,holder.getGlobalConfigurationBuilder().persistenceExecutor(),holder.getClassLoader());
      break;
    }
case ASYNC_TRANSPORT_EXECUTOR:
{
    parseExecutor(reader,holder.getGlobalConfigurationBuilder().asyncTransportExecutor(),holder.getClassLoader());
    break;
  }
case REMOTE_COMMNAND_EXECUTOR:
{
  parseExecutor(reader,holder.getGlobalConfigurationBuilder().remoteCommandsExecutor(),holder.getClassLoader());
  break;
}
case EVICTION_SCHEDULED_EXECUTOR:
{
parseScheduledExecutor(reader,holder.getGlobalConfigurationBuilder().evictionScheduledExecutor(),holder.getClassLoader());
break;
}
case GLOBAL_JMX_STATISTICS:
{
parseGlobalJMXStatistics(reader,holder);
break;
}
case MODULES:
{
parseModules(reader,holder);
break;
}
case REPLICATION_QUEUE_SCHEDULED_EXECUTOR:
{
parseScheduledExecutor(reader,holder.getGlobalConfigurationBuilder().replicationQueueScheduledExecutor(),holder.getClassLoader());
break;
}
case SERIALIZATION:
{
parseSerialization(reader,holder);
break;
}
case SHUTDOWN:
{
parseShutdown(reader,holder);
break;
}
case TRANSPORT:
{
parseTransport(reader,holder);
transportParsed=true;
break;
}
case SITE:
{
parseGlobalSites(reader,holder);
break;
}
case TOTAL_ORDER_EXECUTOR:
parseExecutor(reader,holder.getGlobalConfigurationBuilder().totalOrderExecutor(),holder.getClassLoader());
break;
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!transportParsed) {
builder.transport().transport(null);
}
 else {
if (builder.transport().getTransport() == null) {
builder.transport().defaultTransport();
}
}
}
