{
  ConfigurationBuilder builder=holder.getCurrentConfigurationBuilder();
  Object store=null;
  Boolean fetchPersistentState=null;
  Boolean ignoreModifications=null;
  Boolean purgeOnStartup=null;
  Integer purgerThreads=null;
  Boolean purgeSynchronously=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CLASS:
      store=Util.getInstance(value,holder.getClassLoader());
    break;
case FETCH_PERSISTENT_STATE:
  fetchPersistentState=Boolean.valueOf(value);
break;
case IGNORE_MODIFICATIONS:
ignoreModifications=Boolean.valueOf(value);
break;
case PURGE_ON_STARTUP:
purgeOnStartup=Boolean.valueOf(value);
break;
case PURGER_THREADS:
purgerThreads=Integer.valueOf(value);
break;
case PURGE_SYNCHRONOUSLY:
purgeSynchronously=Boolean.valueOf(value);
break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
if (store != null) {
if (store instanceof FileCacheStore) {
FileCacheStoreConfigurationBuilder fcscb=builder.loaders().addFileCacheStore();
if (fetchPersistentState != null) fcscb.fetchPersistentState(fetchPersistentState);
if (ignoreModifications != null) fcscb.ignoreModifications(ignoreModifications);
if (purgeOnStartup != null) fcscb.purgeOnStartup(purgeOnStartup);
if (purgeSynchronously != null) fcscb.purgeSynchronously(purgeSynchronously);
parseStoreChildren(reader,fcscb);
}
 else if (store instanceof CacheStore) {
LegacyStoreConfigurationBuilder scb=builder.loaders().addStore();
scb.cacheStore((CacheStore)store);
if (fetchPersistentState != null) scb.fetchPersistentState(fetchPersistentState);
if (ignoreModifications != null) scb.ignoreModifications(ignoreModifications);
if (purgerThreads != null) scb.purgerThreads(purgerThreads);
if (purgeOnStartup != null) scb.purgeOnStartup(purgeOnStartup);
if (purgeSynchronously != null) scb.purgeSynchronously(purgeSynchronously);
parseStoreChildren(reader,scb);
}
 else {
throw log.invalidCacheLoaderClass(store.getClass().getName());
}
}
}
