{
  Cache<Key,String> c=cacheManager.getCache();
  ContextExtractingInterceptor cex=new ContextExtractingInterceptor();
  assertTrue(c.getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(cex,InvocationContextInterceptor.class));
  c.put(new Key("k"),"v");
  assertEquals("v",c.get(new Key("k")));
  TransactionManager tm=c.getAdvancedCache().getTransactionManager();
  tm.begin();
  c.getAdvancedCache().lock(new Key("k"));
  LockManager lockManager=TestingUtil.extractComponent(c,LockManager.class);
  assertTrue(cex.ctx instanceof LocalTxInvocationContext);
  assertEquals("Looked up key should not be in transactional invocation context " + "as we don't perform any changes",0,cex.ctx.getLookedUpEntries().size());
  assertEquals("Only one lock should be held",1,lockManager.getNumberOfLocksHeld());
  c.put(new Key("k"),"v2");
  assertEquals("Still should only be one entry in the context",1,cex.ctx.getLookedUpEntries().size());
  assertEquals("Only one lock should be held",1,lockManager.getNumberOfLocksHeld());
  tm.commit();
  assertEquals("No locks should be held anymore",0,lockManager.getNumberOfLocksHeld());
  assertEquals("v2",c.get(new Key("k")));
}
