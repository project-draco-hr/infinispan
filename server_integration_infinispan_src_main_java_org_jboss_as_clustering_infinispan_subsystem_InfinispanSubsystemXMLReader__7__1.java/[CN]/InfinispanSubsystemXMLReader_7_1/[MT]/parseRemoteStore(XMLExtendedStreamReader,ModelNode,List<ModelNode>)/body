{
  ModelNode store=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  String name=ModelKeys.REMOTE_STORE_NAME;
  List<ModelNode> additionalConfigurationOperations=new ArrayList<ModelNode>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CACHE:
{
        RemoteStoreResource.CACHE.parseAndSetParameter(value,store,reader);
        break;
      }
case HOTROD_WRAPPING:
{
      RemoteStoreResource.HOTROD_WRAPPING.parseAndSetParameter(value,store,reader);
      break;
    }
case RAW_VALUES:
{
    RemoteStoreResource.RAW_VALUES.parseAndSetParameter(value,store,reader);
    break;
  }
case SOCKET_TIMEOUT:
{
  RemoteStoreResource.SOCKET_TIMEOUT.parseAndSetParameter(value,store,reader);
  break;
}
case TCP_NO_DELAY:
{
RemoteStoreResource.TCP_NO_DELAY.parseAndSetParameter(value,store,reader);
break;
}
default :
{
name=this.parseStoreAttribute(name,reader,i,attribute,value,store);
}
}
}
store.get(ModelKeys.NAME).set(name);
addNameToAddress(store,PathAddress.pathAddress(cache.get(OP_ADDR)),ModelKeys.REMOTE_STORE);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case REMOTE_SERVER:
{
this.parseRemoteServer(reader,store.get(ModelKeys.REMOTE_SERVERS).add());
break;
}
case WRITE_BEHIND:
{
parseStoreWriteBehind(reader,store,additionalConfigurationOperations);
break;
}
default :
{
this.parseStoreProperty(reader,store,additionalConfigurationOperations);
}
}
}
if (!store.hasDefined(ModelKeys.REMOTE_SERVERS)) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Element.REMOTE_SERVER));
}
operations.add(store);
operations.addAll(additionalConfigurationOperations);
}
