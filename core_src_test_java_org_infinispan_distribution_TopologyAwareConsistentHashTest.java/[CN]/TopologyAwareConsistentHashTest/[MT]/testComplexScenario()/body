{
  addNode(a0,"m2","r0","s1");
  addNode(a1,"m1","r0","s0");
  addNode(a2,"m1","r0","s1");
  addNode(a3,"m1","r1","s0");
  addNode(a4,"m0","r0","s1");
  addNode(a5,"m0","r1","s1");
  addNode(a6,"m0","r1","s0");
  addNode(a7,"m0","r0","s3");
  addNode(a8,"m0","r0","s2");
  addNode(a9,"m0","r0","s0");
  setAddresses();
  assertLocation(ch.locate(a0,1),true,a0);
  assertLocation(ch.locate(a1,1),true,a1);
  assertLocation(ch.locate(a2,1),true,a2);
  assertLocation(ch.locate(a3,1),true,a3);
  assertLocation(ch.locate(a4,1),true,a4);
  assertLocation(ch.locate(a5,1),true,a5);
  assertLocation(ch.locate(a6,1),true,a6);
  assertLocation(ch.locate(a7,1),true,a7);
  assertLocation(ch.locate(a8,1),true,a8);
  assertLocation(ch.locate(a9,1),true,a9);
  assertLocation(ch.locate(a0,2),true,a0,a1);
  assertLocation(ch.locate(a1,2),true,a1,a2);
  assertLocation(ch.locate(a2,2),true,a2,a3);
  assertLocation(ch.locate(a3,2),true,a3,a4);
  assertLocation(ch.locate(a4,2),true,a4,a6);
  assertLocation(ch.locate(a5,2),true,a5,a6);
  assertLocation(ch.locate(a6,2),true,a6,a7);
  assertLocation(ch.locate(a7,2),true,a7,a8);
  assertLocation(ch.locate(a8,2),true,a8,a9);
  assertLocation(ch.locate(a9,2),true,a9,a0);
  assertLocation(ch.getStateProvidersOnLeave(a0,2),false,a1,a9);
  assertLocation(ch.getStateProvidersOnLeave(a1,2),false,a0,a2);
  assertLocation(ch.getStateProvidersOnLeave(a2,2),false,a3,a1);
  assertLocation(ch.getStateProvidersOnLeave(a3,2),false,a4,a2);
  assertLocation(ch.getStateProvidersOnLeave(a4,2),false,a6,a3);
  assertLocation(ch.getStateProvidersOnLeave(a5,2),false,a6);
  assertLocation(ch.getStateProvidersOnLeave(a6,2),false,a4,a7,a5);
  assertLocation(ch.getStateProvidersOnLeave(a7,2),false,a8,a6);
  assertLocation(ch.getStateProvidersOnLeave(a8,2),false,a9,a7);
  assertLocation(ch.getStateProvidersOnLeave(a9,2),false,a0,a8);
  assertLocation(ch.getStateProvidersOnJoin(a0,2),false,a1,a9);
  assertLocation(ch.getStateProvidersOnJoin(a1,2),false,a0,a2);
  assertLocation(ch.getStateProvidersOnJoin(a2,2),false,a3,a1);
  assertLocation(ch.getStateProvidersOnJoin(a3,2),false,a4,a2);
  assertLocation(ch.getStateProvidersOnJoin(a4,2),false,a6,a3);
  assertLocation(ch.getStateProvidersOnJoin(a5,2),false,a6);
  assertLocation(ch.getStateProvidersOnJoin(a6,2),false,a4,a7,a5);
  assertLocation(ch.getStateProvidersOnJoin(a7,2),false,a8,a6);
  assertLocation(ch.getStateProvidersOnJoin(a8,2),false,a9,a7);
  assertLocation(ch.getStateProvidersOnJoin(a9,2),false,a0,a8);
  assertLocation(ch.locate(a0,3),true,a0,a1,a3);
  assertLocation(ch.locate(a1,3),true,a1,a2,a4);
  assertLocation(ch.locate(a2,3),true,a2,a3,a6);
  assertLocation(ch.locate(a3,3),true,a3,a4,a5);
  assertLocation(ch.locate(a4,3),true,a4,a6,a7);
  assertLocation(ch.locate(a5,3),true,a5,a6,a7);
  assertLocation(ch.locate(a6,3),true,a6,a7,a8);
  assertLocation(ch.locate(a7,3),true,a7,a8,a9);
  assertLocation(ch.locate(a8,3),true,a8,a9,a0);
  assertLocation(ch.locate(a9,3),true,a9,a0,a2);
}
