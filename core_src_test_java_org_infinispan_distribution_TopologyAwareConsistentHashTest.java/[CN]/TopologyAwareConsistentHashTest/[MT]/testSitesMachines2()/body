{
  addNode(a0,"m0",null,"s0");
  addNode(a1,"m1",null,"s1");
  addNode(a2,"m2",null,"s0");
  addNode(a3,"m3",null,"s2");
  addNode(a4,"m4",null,"s1");
  addNode(a5,"m5",null,"s1");
  setAddresses();
  assertLocation(ch.locate(a0,1),true,a0);
  assertLocation(ch.locate(a1,1),true,a1);
  assertLocation(ch.locate(a2,1),true,a2);
  assertLocation(ch.locate(a3,1),true,a3);
  assertLocation(ch.locate(a4,1),true,a4);
  assertLocation(ch.locate(a5,1),true,a5);
  assertLocation(ch.locate(a0,2),true,a0,a1);
  assertLocation(ch.locate(a1,2),true,a1,a2);
  assertLocation(ch.locate(a2,2),true,a2,a3);
  assertLocation(ch.locate(a3,2),true,a3,a4);
  assertLocation(ch.locate(a4,2),true,a4,a0);
  assertLocation(ch.locate(a5,2),true,a5,a0);
  assertLocation(ch.locate(a0,3),true,a0,a1,a3);
  assertLocation(ch.locate(a1,3),true,a1,a2,a3);
  assertLocation(ch.locate(a2,3),true,a2,a3,a4);
  assertLocation(ch.locate(a3,3),true,a3,a4,a5);
  assertLocation(ch.locate(a4,3),true,a4,a0,a2);
  assertLocation(ch.locate(a5,3),true,a5,a0,a2);
}
