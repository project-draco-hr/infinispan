def get_multi(self, keys, key_prefix=''):
    '\n        Retrieves multiple keys from the memcache doing just one query.\n\n        >>> success = mc.set("foo", "bar")\n        >>> success = mc.set("baz", 42)\n        >>> mc.get_multi(["foo", "baz", "foobar"]) == {"foo": "bar", "baz": 42}\n        1\n        >>> mc.set_multi({\'k1\' : 1, \'k2\' : 2}, key_prefix=\'pfx_\') == []\n        1\n\n        This looks up keys \'pfx_k1\', \'pfx_k2\', ... . Returned dict will just have unprefixed keys \'k1\', \'k2\'.\n        >>> mc.get_multi([\'k1\', \'k2\', \'nonexist\'], key_prefix=\'pfx_\') == {\'k1\' : 1, \'k2\' : 2}\n        1\n\n        get_mult [ and L{set_multi} ] can take str()-ables like ints / longs as keys too. Such as your db pri key fields.\n        They\'re rotored through str() before being passed off to memcache, with or without the use of a key_prefix.\n        In this mode, the key_prefix could be a table name, and the key itself a db primary key number.\n\n        >>> mc.set_multi({42: \'douglass adams\', 46 : \'and 2 just ahead of me\'}, key_prefix=\'numkeys_\') == []\n        1\n        >>> mc.get_multi([46, 42], key_prefix=\'numkeys_\') == {42: \'douglass adams\', 46 : \'and 2 just ahead of me\'}\n        1\n\n        This method is recommended over regular L{get} as it lowers the number of\n        total packets flying around your network, reducing total latency, since\n        your app doesn\'t have to wait for each round-trip of L{get} before sending\n        the next one.\n\n        See also L{set_multi}.\n\n        @param keys: An array of keys.\n        @param key_prefix: A string to prefix each key when we communicate with memcache.\n            Facilitates pseudo-namespaces within memcache. Returned dictionary keys will not have this prefix.\n        @return:  A dictionary of key/value pairs that were available. If key_prefix was provided, the keys in the retured dictionary will not have it present.\n\n        '
    self._statlog('get_multi')
    (server_keys, prefixed_to_orig_key) = self._map_and_prefix_keys(keys, key_prefix)
    dead_servers = []
    for server in server_keys.iterkeys():
        try:
            server.send_cmd(('get %s' % ' '.join(server_keys[server])))
        except socket.error as msg:
            if isinstance(msg, tuple):
                msg = msg[1]
            server.mark_dead(msg)
            dead_servers.append(server)
    for server in dead_servers:
        del server_keys[server]
    retvals = {}
    for server in server_keys.iterkeys():
        try:
            line = server.readline()
            while (line and (line != 'END')):
                (rkey, flags, rlen) = self._expectvalue(server, line)
                if (rkey is not None):
                    val = self._recv_value(server, flags, rlen)
                    retvals[prefixed_to_orig_key[rkey]] = val
                line = server.readline()
        except (_Error, socket.error) as msg:
            if isinstance(msg, tuple):
                msg = msg[1]
            server.mark_dead(msg)
    return retvals
