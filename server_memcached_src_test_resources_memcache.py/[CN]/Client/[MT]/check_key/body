def check_key(self, key, key_extra_len=0):
    'Checks sanity of key.  Fails if:\n            Key length is > SERVER_MAX_KEY_LENGTH (Raises MemcachedKeyLength).\n            Contains control characters  (Raises MemcachedKeyCharacterError).\n            Is not a string (Raises MemcachedStringEncodingError)\n            Is an unicode string (Raises MemcachedStringEncodingError)\n            Is not a string (Raises MemcachedKeyError)\n            Is None (Raises MemcachedKeyError)\n        '
    if isinstance(key, tuple):
        key = key[1]
    if (not key):
        raise Client.MemcachedKeyNoneError('Key is None')
    if isinstance(key, unicode):
        raise Client.MemcachedStringEncodingError("Keys must be str()'s, not unicode.  Convert your unicode strings using mystring.encode(charset)!")
    if (not isinstance(key, str)):
        raise Client.MemcachedKeyTypeError("Key must be str()'s")
    if isinstance(key, basestring):
        if ((self.server_max_key_length != 0) and ((len(key) + key_extra_len) > self.server_max_key_length)):
            raise Client.MemcachedKeyLengthError(('Key length is > %s' % self.server_max_key_length))
        for char in key:
            if ((ord(char) < 33) or (ord(char) == 127)):
                raise Client.MemcachedKeyCharacterError('Control characters not allowed')
