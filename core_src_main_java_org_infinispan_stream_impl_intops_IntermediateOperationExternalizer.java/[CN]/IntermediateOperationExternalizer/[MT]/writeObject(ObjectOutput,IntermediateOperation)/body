{
  int number=operations.get(object.getClass(),-1);
  output.writeByte(number);
switch (number) {
case FILTER:
    output.writeObject(((FilterOperation)object).getPredicate());
  break;
case FLATMAP:
output.writeObject(((FlatMapOperation)object).getFunction());
break;
case FLATMAP_DOUBLE:
output.writeObject(((FlatMapToDoubleOperation)object).getFunction());
break;
case FLATMAP_INT:
output.writeObject(((FlatMapToIntOperation)object).getFunction());
break;
case FLATMAP_LONG:
output.writeObject(((FlatMapToLongOperation)object).getFunction());
break;
case LIMIT:
UnsignedNumeric.writeUnsignedLong(output,((LimitOperation)object).getLimit());
break;
case MAP:
output.writeObject(((MapOperation)object).getFunction());
break;
case MAP_DOUBLE:
output.writeObject(((MapToDoubleOperation)object).getFunction());
break;
case MAP_INT:
output.writeObject(((MapToIntOperation)object).getFunction());
break;
case MAP_LONG:
output.writeObject(((MapToLongOperation)object).getFunction());
break;
case PEEK:
output.writeObject(((PeekOperation)object).getConsumer());
break;
case SORTED_COMPARATOR:
output.writeObject(((SortedComparatorOperation)object).getComparator());
break;
case DOUBLE_FILTER:
output.writeObject(((FilterDoubleOperation)object).getPredicate());
break;
case DOUBLE_FLATMAP:
output.writeObject(((FlatMapDoubleOperation)object).getFunction());
break;
case DOUBLE_LIMIT:
UnsignedNumeric.writeUnsignedLong(output,((LimitDoubleOperation)object).getLimit());
break;
case DOUBLE_MAP:
output.writeObject(((MapDoubleOperation)object).getOperator());
break;
case DOUBLE_MAP_INT:
output.writeObject(((MapToIntDoubleOperation)object).getFunction());
break;
case DOUBLE_MAP_LONG:
output.writeObject(((MapToLongDoubleOperation)object).getFunction());
break;
case DOUBLE_MAP_OBJ:
output.writeObject(((MapToObjDoubleOperation)object).getFunction());
break;
case DOUBLE_PEEK:
output.writeObject(((PeekDoubleOperation)object).getConsumer());
break;
case INT_FILTER:
output.writeObject(((FilterIntOperation)object).getPredicate());
break;
case INT_FLATMAP:
output.writeObject(((FlatMapIntOperation)object).getFunction());
break;
case INT_LIMIT:
UnsignedNumeric.writeUnsignedLong(output,((LimitIntOperation)object).getLimit());
break;
case INT_MAP:
output.writeObject(((MapIntOperation)object).getOperator());
break;
case INT_MAP_DOUBLE:
output.writeObject(((MapToDoubleIntOperation)object).getFunction());
break;
case INT_MAP_LONG:
output.writeObject(((MapToLongIntOperation)object).getFunction());
break;
case INT_MAP_OBJ:
output.writeObject(((MapToObjIntOperation)object).getFunction());
break;
case INT_PEEK:
output.writeObject(((PeekIntOperation)object).getConsumer());
break;
case LONG_FILTER:
output.writeObject(((FilterLongOperation)object).getPredicate());
break;
case LONG_FLATMAP:
output.writeObject(((FlatMapLongOperation)object).getFunction());
break;
case LONG_LIMIT:
UnsignedNumeric.writeUnsignedLong(output,((LimitLongOperation)object).getLimit());
break;
case LONG_MAP:
output.writeObject(((MapLongOperation)object).getOperator());
break;
case LONG_MAP_DOUBLE:
output.writeObject(((MapToDoubleLongOperation)object).getFunction());
break;
case LONG_MAP_INT:
output.writeObject(((MapToIntLongOperation)object).getFunction());
break;
case LONG_MAP_OBJ:
output.writeObject(((MapToObjLongOperation)object).getFunction());
break;
case LONG_PEEK:
output.writeObject(((PeekLongOperation)object).getConsumer());
break;
}
}
