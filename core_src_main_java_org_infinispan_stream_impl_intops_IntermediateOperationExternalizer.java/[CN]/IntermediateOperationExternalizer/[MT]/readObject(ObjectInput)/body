{
  int number=input.readUnsignedByte();
switch (number) {
case DISTINCT:
    return DistinctOperation.getInstance();
case FILTER:
  return new FilterOperation<>((Predicate)input.readObject());
case FLATMAP:
return new FlatMapOperation<>((Function)input.readObject());
case FLATMAP_DOUBLE:
return new FlatMapToDoubleOperation((Function)input.readObject());
case FLATMAP_INT:
return new FlatMapToIntOperation((Function)input.readObject());
case FLATMAP_LONG:
return new FlatMapToLongOperation<>((Function)input.readObject());
case LIMIT:
return new LimitOperation<>(UnsignedNumeric.readUnsignedLong(input));
case MAP:
return new MapOperation<>((Function)input.readObject());
case MAP_DOUBLE:
return new MapToDoubleOperation<>((ToDoubleFunction)input.readObject());
case MAP_INT:
return new MapToIntOperation<>((ToIntFunction)input.readObject());
case MAP_LONG:
return new MapToLongOperation<>((ToLongFunction)input.readObject());
case PEEK:
return new PeekOperation<>((Consumer)input.readObject());
case SORTED_COMPARATOR:
return new SortedComparatorOperation<>((Comparator)input.readObject());
case SORTED:
return SortedOperation.getInstance();
case DOUBLE_BOXED:
return BoxedDoubleOperation.getInstance();
case DOUBLE_DISTINCT:
return DistinctDoubleOperation.getInstance();
case DOUBLE_FILTER:
return new FilterDoubleOperation((DoublePredicate)input.readObject());
case DOUBLE_FLATMAP:
return new FlatMapDoubleOperation((DoubleFunction)input.readObject());
case DOUBLE_LIMIT:
return new LimitDoubleOperation(UnsignedNumeric.readUnsignedLong(input));
case DOUBLE_MAP:
return new MapDoubleOperation((DoubleUnaryOperator)input.readObject());
case DOUBLE_MAP_INT:
return new MapToIntDoubleOperation((DoubleToIntFunction)input.readObject());
case DOUBLE_MAP_LONG:
return new MapToLongDoubleOperation((DoubleToLongFunction)input.readObject());
case DOUBLE_MAP_OBJ:
return new MapToObjDoubleOperation<>((DoubleFunction)input.readObject());
case DOUBLE_PEEK:
return new PeekDoubleOperation((DoubleConsumer)input.readObject());
case DOUBLE_SORTED:
return SortedDoubleOperation.getInstance();
case INT_AS_DOUBLE:
return AsDoubleIntOperation.getInstance();
case INT_AS_LONG:
return AsLongIntOperation.getInstance();
case INT_BOXED:
return BoxedIntOperation.getInstance();
case INT_DISTINCT:
return DistinctIntOperation.getInstance();
case INT_FILTER:
return new FilterIntOperation((IntPredicate)input.readObject());
case INT_FLATMAP:
return new FlatMapIntOperation((IntFunction)input.readObject());
case INT_LIMIT:
return new LimitIntOperation(UnsignedNumeric.readUnsignedLong(input));
case INT_MAP:
return new MapIntOperation((IntUnaryOperator)input.readObject());
case INT_MAP_DOUBLE:
return new MapToDoubleIntOperation((IntToDoubleFunction)input.readObject());
case INT_MAP_LONG:
return new MapToLongIntOperation((IntToLongFunction)input.readObject());
case INT_MAP_OBJ:
return new MapToObjIntOperation<>((IntFunction)input.readObject());
case INT_PEEK:
return new PeekIntOperation((IntConsumer)input.readObject());
case INT_SORTED:
return SortedIntOperation.getInstance();
case LONG_AS_DOUBLE:
return AsDoubleLongOperation.getInstance();
case LONG_BOXED:
return BoxedLongOperation.getInstance();
case LONG_DISTINCT:
return DistinctLongOperation.getInstance();
case LONG_FILTER:
return new FilterLongOperation((LongPredicate)input.readObject());
case LONG_FLATMAP:
return new FlatMapLongOperation((LongFunction)input.readObject());
case LONG_LIMIT:
return new LimitLongOperation(UnsignedNumeric.readUnsignedLong(input));
case LONG_MAP:
return new MapLongOperation((LongUnaryOperator)input.readObject());
case LONG_MAP_DOUBLE:
return new MapToDoubleLongOperation((LongToDoubleFunction)input.readObject());
case LONG_MAP_INT:
return new MapToIntLongOperation((LongToIntFunction)input.readObject());
case LONG_MAP_OBJ:
return new MapToObjLongOperation<>((LongFunction)input.readObject());
case LONG_PEEK:
return new PeekLongOperation((LongConsumer)input.readObject());
case LONG_SORTED:
return SortedLongOperation.getInstance();
default :
throw new IllegalArgumentException("Found invalid number " + number);
}
}
