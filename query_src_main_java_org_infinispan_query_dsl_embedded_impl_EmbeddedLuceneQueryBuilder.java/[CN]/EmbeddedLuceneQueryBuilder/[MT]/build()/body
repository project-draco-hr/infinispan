{
  String jpqlString=accept(new JPAQueryGenerator());
  if (log.isTraceEnabled()) {
    log.tracef("JPQL string : %s",jpqlString);
  }
  SearchFactoryIntegrator searchFactory=(SearchFactoryIntegrator)searchManager.getSearchFactory();
  LuceneProcessingChain processingChain=new LuceneProcessingChain.Builder(searchFactory,entityNamesResolver).buildProcessingChainForClassBasedEntities();
  QueryParser queryParser=new QueryParser();
  LuceneQueryParsingResult parsingResult=queryParser.parseQuery(jpqlString,processingChain);
  Sort sort=null;
  if (sortCriteria != null && !sortCriteria.isEmpty()) {
    SortField[] sortField=new SortField[sortCriteria.size()];
    int i=0;
    for (    SortCriteria sc : sortCriteria) {
      PropertyMetadata propMetadata=getPropertyMetadata(parsingResult.getTargetEntity(),sc.getAttributePath());
      DocumentFieldMetadata fm=propMetadata.getFieldMetadata().iterator().next();
      int sortType=fm.isNumeric() ? SortField.INT : SortField.STRING;
      sortField[i++]=new SortField(sc.getAttributePath(),sortType,sc.getSortOrder() == SortOrder.DESC);
    }
    sort=new Sort(sortField);
  }
  return new EmbeddedLuceneQuery(searchManager,parsingResult,sort,startOffset,maxResults);
}
