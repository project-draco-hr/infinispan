{
  final ConcurrentGlobalContainer globalContainer=new ConcurrentGlobalContainer(TIME_SERVICE);
  final List<StatisticsSnapshot> snapshots=new ArrayList<StatisticsSnapshot>(4);
  snapshots.add(globalContainer.getSnapshot());
  int localIndex;
  int remoteIndex;
  LocalTransactionStatistics localTransactionStatistics=new LocalTransactionStatistics(false,TIME_SERVICE);
  localIndex=0;
  for (  ExtendedStatistic stats : ExtendedStatistic.values()) {
    if (stats.isLocal()) {
      localTransactionStatistics.addValue(stats,localIndex++);
    }
  }
  localTransactionStatistics.flushTo(globalContainer);
  snapshots.add(globalContainer.getSnapshot());
  localIndex=0;
  for (  ExtendedStatistic stats : ExtendedStatistic.values()) {
    if (stats.isLocal()) {
      assertSnapshotValues(snapshots,Arrays.<Double>asList(0D,(double)localIndex),stats,true);
      localIndex++;
    }
    if (stats.isRemote()) {
      assertSnapshotValues(snapshots,Arrays.<Double>asList(0D,0D),stats,false);
    }
  }
  RemoteTransactionStatistics remoteTransactionStatistics=new RemoteTransactionStatistics(TIME_SERVICE);
  remoteIndex=0;
  for (  ExtendedStatistic stats : ExtendedStatistic.values()) {
    if (stats.isRemote()) {
      remoteTransactionStatistics.addValue(stats,remoteIndex++);
    }
  }
  remoteTransactionStatistics.flushTo(globalContainer);
  snapshots.add(globalContainer.getSnapshot());
  localIndex=0;
  remoteIndex=0;
  for (  ExtendedStatistic stats : ExtendedStatistic.values()) {
    if (stats.isLocal()) {
      assertSnapshotValues(snapshots,Arrays.<Double>asList(0D,(double)localIndex,(double)localIndex),stats,true);
      localIndex++;
    }
    if (stats.isRemote()) {
      assertSnapshotValues(snapshots,Arrays.<Double>asList(0D,0D,(double)remoteIndex),stats,false);
      remoteIndex++;
    }
  }
  assertFinalState(globalContainer);
}
