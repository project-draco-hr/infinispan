{
  latch=new CountDownLatch(1);
  final Map<String,String> perf=new ConcurrentSkipListMap<String,String>();
  List<Thread> threads=new LinkedList<Thread>();
  for (int i=0; i < numReaders; i++) {
    Thread getter=new Thread(){
      public void run(){
        waitForStart();
        long startMilis=System.currentTimeMillis();
        int runs=0;
        int totalRuns=0;
        while ((System.currentTimeMillis() - startMilis) <= runningTimeout) {
          map.get(readOps.get(runs));
          runs++;
          totalRuns++;
          if (runs >= readOps.size()) {
            runs=0;
          }
        }
        perf.put("GET" + Thread.currentThread().getId(),opsPerMS(System.currentTimeMillis() - startMilis,totalRuns));
      }
    }
;
    threads.add(getter);
  }
  for (int i=0; i < numWriters; i++) {
    Thread putter=new Thread(){
      public void run(){
        waitForStart();
        int runs=0;
        int totalRuns=0;
        long startMilis=System.currentTimeMillis();
        while ((System.currentTimeMillis() - startMilis) <= runningTimeout) {
          map.put(writeOps.get(runs),runs);
          runs++;
          totalRuns++;
          if (runs >= writeOps.size()) {
            runs=0;
          }
        }
        perf.put("PUT" + Thread.currentThread().getId(),opsPerMS(System.currentTimeMillis() - startMilis,totalRuns));
      }
    }
;
    threads.add(putter);
  }
  for (int i=0; i < numRemovers; i++) {
    Thread remover=new Thread(){
      public void run(){
        waitForStart();
        int runs=0;
        int totalRuns=0;
        long startMilis=System.currentTimeMillis();
        while ((System.currentTimeMillis() - startMilis) <= runningTimeout) {
          map.remove(removeOps.get(runs));
          runs++;
          totalRuns++;
          if (runs >= removeOps.size()) {
            runs=0;
          }
        }
        perf.put("REM" + Thread.currentThread().getId(),opsPerMS(System.currentTimeMillis() - startMilis,totalRuns));
      }
    }
;
    threads.add(remover);
  }
  for (  Thread t : threads)   t.start();
  latch.countDown();
  for (  Thread t : threads)   t.join();
  int puts=0, gets=0, removes=0;
  for (  Entry<String,String> p : perf.entrySet()) {
    if (p.getKey().startsWith("PUT")) {
      puts+=Integer.valueOf(p.getValue());
    }
    if (p.getKey().startsWith("GET")) {
      gets+=Integer.valueOf(p.getValue());
    }
    if (p.getKey().startsWith("REM")) {
      removes+=Integer.valueOf(p.getValue());
    }
  }
  System.out.println("Performance for container " + map.getClass().getSimpleName());
  System.out.println("Average get ops/ms " + (gets / numReaders));
  System.out.println("Average put ops/ms " + (puts / numWriters));
  System.out.println("Average remove ops/ms " + (removes / numRemovers));
  System.out.println("Size = " + map.size());
}
