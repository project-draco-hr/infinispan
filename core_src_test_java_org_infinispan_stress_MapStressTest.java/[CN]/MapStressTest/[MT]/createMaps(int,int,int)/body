{
  Map<String,Map<String,Integer>> maps=new TreeMap<String,Map<String,Integer>>();
  maps.put("BCHMv8:LRU",new BoundedEquivalentConcurrentHashMapV8((long)capacity,Eviction.LRU,BoundedEquivalentConcurrentHashMapV8.getNullEvictionListener(),AnyEquivalence.STRING,AnyEquivalence.INT));
  maps.put("BCHMv8:LIRS",new BoundedEquivalentConcurrentHashMapV8((long)capacity,Eviction.LIRS,BoundedEquivalentConcurrentHashMapV8.getNullEvictionListener(),AnyEquivalence.STRING,AnyEquivalence.INT));
  maps.put("BCHM:LRU",new BoundedConcurrentHashMap<String,Integer>(capacity,concurrency,BoundedConcurrentHashMap.Eviction.LRU,AnyEquivalence.STRING,AnyEquivalence.INT));
  maps.put("BCHM:LIRS",new BoundedConcurrentHashMap<String,Integer>(capacity,concurrency,BoundedConcurrentHashMap.Eviction.LIRS,AnyEquivalence.STRING,AnyEquivalence.INT));
  maps.put("CHM",new ConcurrentHashMap<String,Integer>(capacity,MAP_LOAD_FACTOR,concurrency));
  maps.put("CHMv8",new ConcurrentHashMapV8<String,Integer>(capacity,MAP_LOAD_FACTOR,concurrency));
  maps.put("ECHMv8",new EquivalentConcurrentHashMapV8<String,Integer>(capacity,MAP_LOAD_FACTOR,concurrency,AnyEquivalence.STRING,AnyEquivalence.INT));
  maps.put("SLHM",synchronizedLinkedHashMap(capacity,MAP_LOAD_FACTOR));
  maps.put("CACHE",configureAndBuildCache(capacity));
  return maps;
}
