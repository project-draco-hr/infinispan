{
  ClusterTopologyManager ctm=TestingUtil.extractGlobalComponent(manager,ClusterTopologyManager.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(ctm);
  ClusterTopologyManager mockManager=mock(ClusterTopologyManager.class,withSettings().defaultAnswer(forwardedAnswer));
  TestingUtil.replaceComponent(manager,ClusterTopologyManager.class,mockManager,true);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Object[] arguments=invocation.getArguments();
      Address source=(Address)arguments[1];
      int topologyId=(Integer)arguments[2];
      checkPoint.trigger("pre_rebalance_confirmation_" + topologyId + "_from_"+ source);
      checkPoint.awaitStrict("resume_rebalance_confirmation_" + topologyId + "_from_"+ source,10,SECONDS);
      return forwardedAnswer.answer(invocation);
    }
  }
).when(mockManager).handleRebalanceCompleted(anyString(),any(Address.class),anyInt(),any(Throwable.class),anyInt());
}
