{
  if (l1Enabled() && op.getPreviousValue() != null) {
    fail("This test cannot be ran with L1 when a previous value is set");
  }
  final AdvancedCache<Object,Object> primaryOwnerCache=cache(0,cacheName).getAdvancedCache();
  final AdvancedCache<Object,Object> backupOwnerCache=cache(1,cacheName).getAdvancedCache();
  final AdvancedCache<Object,Object> nonOwnerCache=cache(2,cacheName).getAdvancedCache();
  final MagicKey key=new MagicKey(primaryOwnerCache,backupOwnerCache);
  final Object previousValue=op.getPreviousValue();
  if (previousValue != null) {
    primaryOwnerCache.put(key,previousValue);
    assertEquals(previousValue,primaryOwnerCache.get(key));
    log.tracef("Previous value inserted: %s = %s",key,previousValue);
    assertEquals(previousValue,nonOwnerCache.get(key));
    if (l1Enabled()) {
      assertIsInL1(nonOwnerCache,key);
    }
  }
  int preJoinTopologyId=primaryOwnerCache.getComponentRegistry().getStateTransferManager().getCacheTopology().getTopologyId();
  CheckPoint checkPoint=new CheckPoint();
  ControlledRpcManager blockingRpcManager0=blockStateResponseCommand(primaryOwnerCache);
  blockRebalanceConfirmation(primaryOwnerCache.getCacheManager(),checkPoint);
  assertEquals(primaryOwnerCache.getCacheManager().getCoordinator(),primaryOwnerCache.getCacheManager().getAddress());
  log.trace("Stopping the cache");
  backupOwnerCache.getCacheManager().stop();
  int rebalanceTopologyId=preJoinTopologyId + 2;
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return primaryOwnerCache.getRpcManager().getMembers().size() == 2 && nonOwnerCache.getRpcManager().getMembers().size() == 2;
    }
  }
);
  assertEquals(primaryOwnerCache.getCacheManager().getCoordinator(),primaryOwnerCache.getCacheManager().getAddress());
  blockingRpcManager0.waitForCommandToBlock();
  CyclicBarrier beforeCommitCache1Barrier=new CyclicBarrier(2);
  BlockingInterceptor blockingInterceptor1=new BlockingInterceptor(beforeCommitCache1Barrier,op.getCommandClass(),true,false);
  nonOwnerCache.getSequentialInterceptorChain().addInterceptorAfter(blockingInterceptor1,EntryWrappingInterceptor.class);
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return op.perform(primaryOwnerCache,key);
    }
  }
);
  beforeCommitCache1Barrier.await(10,TimeUnit.SECONDS);
  removeAllBlockingInterceptorsFromCache(nonOwnerCache);
  blockingRpcManager0.stopBlocking();
  checkPoint.awaitStrict("pre_rebalance_confirmation_" + rebalanceTopologyId + "_from_"+ primaryOwnerCache.getCacheManager().getAddress(),10,SECONDS);
  beforeCommitCache1Barrier.await(10,TimeUnit.SECONDS);
  Object result=future.get(10,TimeUnit.SECONDS);
  assertEquals(op.getReturnValue(),result);
  log.tracef("%s operation is done",op);
  checkPoint.trigger("resume_rebalance_confirmation_" + rebalanceTopologyId + "_from_"+ primaryOwnerCache.getCacheManager().getAddress());
  checkPoint.trigger("resume_rebalance_confirmation_" + rebalanceTopologyId + "_from_"+ nonOwnerCache.getCacheManager().getAddress());
  TestingUtil.waitForRehashToComplete(primaryOwnerCache,nonOwnerCache);
switch (op) {
case REMOVE:
case REMOVE_EXACT:
    break;
default :
  assertIsInContainerImmortal(primaryOwnerCache,key);
assertIsInContainerImmortal(nonOwnerCache,key);
break;
}
assertEquals(op.getValue(),primaryOwnerCache.get(key));
assertEquals(op.getValue(),nonOwnerCache.get(key));
}
