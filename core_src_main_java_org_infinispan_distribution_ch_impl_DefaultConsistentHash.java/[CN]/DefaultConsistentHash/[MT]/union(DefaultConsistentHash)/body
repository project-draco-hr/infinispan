{
  if (!hashFunction.equals(dch2.getHashFunction())) {
    throw new IllegalArgumentException("The consistent hash objects must have the same hash function");
  }
  int numSegments=getNumSegments();
  if (numSegments != dch2.getNumSegments()) {
    throw new IllegalArgumentException("The consistent hash objects must have the same number of segments");
  }
  if (numOwners != dch2.getNumOwners()) {
    throw new IllegalArgumentException("The consistent hash objects must have the same number of owners");
  }
  List<Address> unionMembers=new ArrayList<Address>(this.members);
  mergeLists(unionMembers,dch2.getMembers());
  List<Address>[] unionSegmentOwners=new List[numSegments];
  for (int i=0; i < numSegments; i++) {
    unionSegmentOwners[i]=new ArrayList<Address>(locateOwnersForSegment(i));
    mergeLists(unionSegmentOwners[i],dch2.locateOwnersForSegment(i));
  }
  Map<Address,Float> unionCapacityFactors=null;
  if (this.capacityFactors != null || dch2.capacityFactors != null) {
    unionCapacityFactors=new HashMap<Address,Float>();
    if (this.capacityFactors != null) {
      unionCapacityFactors.putAll(this.getCapacityFactors());
    }
 else {
      for (      Address node : this.members) {
        unionCapacityFactors.put(node,1.0f);
      }
    }
    if (dch2.capacityFactors != null) {
      unionCapacityFactors.putAll(dch2.getCapacityFactors());
    }
 else {
      for (      Address node : dch2.members) {
        unionCapacityFactors.put(node,1.0f);
      }
    }
  }
  return new DefaultConsistentHash(hashFunction,numOwners,numSegments,unionMembers,unionCapacityFactors,unionSegmentOwners);
}
