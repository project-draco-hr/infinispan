{
  Class<?> componentImpl;
  if (componentType.equals(ClusteringDependentLogic.class)) {
    CacheMode cacheMode=configuration.clustering().cacheMode();
    if (!cacheMode.isClustered()) {
      return componentType.cast(new ClusteringDependentLogic.LocalLogic());
    }
 else     if (cacheMode.isInvalidation()) {
      return componentType.cast(new ClusteringDependentLogic.InvalidationLogic());
    }
 else     if (cacheMode.isReplicated()) {
      return componentType.cast(new ClusteringDependentLogic.ReplicationLogic());
    }
 else {
      return componentType.cast(new ClusteringDependentLogic.DistributionLogic());
    }
  }
 else {
    boolean isTransactional=configuration.transaction().transactionMode().isTransactional();
    if (componentType.equals(InvocationContextFactory.class)) {
      componentImpl=isTransactional ? TransactionalInvocationContextFactory.class : NonTransactionalInvocationContextFactory.class;
      return componentType.cast(getInstance(componentImpl));
    }
 else     if (componentType.equals(InvocationContextContainer.class)) {
      return (T)new InvocationContextContainerImpl();
    }
 else     if (componentType.equals(CacheNotifier.class)) {
      return (T)new CacheNotifierImpl();
    }
 else     if (componentType.equals(CommandsFactory.class)) {
      return (T)new CommandsFactoryImpl();
    }
 else     if (componentType.equals(PersistenceManager.class)) {
      return (T)new PersistenceManagerImpl();
    }
 else     if (componentType.equals(PassivationManager.class)) {
      return (T)new PassivationManagerImpl();
    }
 else     if (componentType.equals(ActivationManager.class)) {
      return (T)new ActivationManagerImpl();
    }
 else     if (componentType.equals(BatchContainer.class)) {
      return (T)new BatchContainer();
    }
 else     if (componentType.equals(TransactionCoordinator.class)) {
      return (T)new TransactionCoordinator();
    }
 else     if (componentType.equals(RecoveryAdminOperations.class)) {
      return (T)new RecoveryAdminOperations();
    }
 else     if (componentType.equals(StateTransferLock.class)) {
      return (T)new StateTransferLockImpl();
    }
 else     if (componentType.equals(EvictionManager.class)) {
      return (T)new EvictionManagerImpl();
    }
 else     if (componentType.equals(ExpirationManager.class)) {
      return (T)new ExpirationManagerImpl();
    }
 else     if (componentType.equals(L1Manager.class)) {
      return (T)new L1ManagerImpl();
    }
 else     if (componentType.equals(TransactionFactory.class)) {
      return (T)new TransactionFactory();
    }
 else     if (componentType.equals(BackupSender.class)) {
      return (T)new BackupSenderImpl(globalConfiguration.sites().localSite());
    }
 else     if (componentType.equals(TotalOrderManager.class)) {
      return isTransactional && configuration.transaction().transactionProtocol().isTotalOrder() ? (T)new TotalOrderManager() : null;
    }
 else     if (componentType.equals(ByteBufferFactory.class)) {
      return (T)new ByteBufferFactoryImpl();
    }
 else     if (componentType.equals(MarshalledEntryFactory.class)) {
      return (T)new MarshalledEntryFactoryImpl();
    }
 else     if (componentType.equals(RemoteValueRetrievedListener.class)) {
      return (T)componentRegistry.getComponent(L1Manager.class);
    }
 else     if (componentType.equals(ClusterCacheNotifier.class)) {
      return (T)componentRegistry.getComponent(CacheNotifier.class);
    }
 else     if (componentType.equals(CommitManager.class)) {
      return (T)new CommitManager(configuration.dataContainer().keyEquivalence());
    }
 else     if (componentType.equals(XSiteStateTransferManager.class)) {
      return (T)(configuration.sites().allBackups().isEmpty() ? null : new XSiteStateTransferManagerImpl());
    }
 else     if (componentType.equals(XSiteStateConsumer.class)) {
      return (T)new XSiteStateConsumerImpl();
    }
 else     if (componentType.equals(XSiteStateProvider.class)) {
      return (T)new XSiteStateProviderImpl();
    }
 else     if (componentType.equals(ListenerNotifier.class)) {
      return (T)new ListenersImpl<>();
    }
  }
  throw new CacheConfigurationException("Don't know how to create a " + componentType.getName());
}
