{
  if (unKeyed || shouldInvoke(event,isLocalNodePrimaryOwner)) {
    Runnable r=new Runnable(){
      @Override public void run(){
        ClassLoader contextClassLoader=null;
        Transaction transaction=suspendIfNeeded();
        if (classLoader != null && classLoader.get() != null) {
          contextClassLoader=setContextClassLoader(classLoader.get());
        }
        try {
          if (!unKeyed && converter != null) {
            if (event instanceof EventImpl) {
              EventImpl eventImpl=(EventImpl)event;
              eventImpl.setValue(converter.convert(eventImpl.getKey(),eventImpl.getValue(),eventImpl.getMetadata()));
            }
 else {
              throw new IllegalArgumentException("Provided event should be EventImpl when a converter is" + "being used!");
            }
          }
          if (subject != null) {
            try {
              Subject.doAs(subject,new PrivilegedExceptionAction<Void>(){
                @Override public Void run() throws Exception {
                  method.invoke(target,event);
                  return null;
                }
              }
);
            }
 catch (            PrivilegedActionException e) {
              Throwable cause=e.getCause();
              if (cause instanceof InvocationTargetException) {
                throw (InvocationTargetException)cause;
              }
 else               if (cause instanceof IllegalAccessException) {
                throw (IllegalAccessException)cause;
              }
 else {
                throw new InvocationTargetException(cause);
              }
            }
          }
 else {
            method.invoke(target,event);
          }
        }
 catch (        InvocationTargetException exception) {
          Throwable cause=getRealException(exception);
          if (sync) {
            throw getLog().exceptionInvokingListener(cause.getClass().getName(),method,target,cause);
          }
 else {
            getLog().unableToInvokeListenerMethod(method,target,cause);
          }
        }
catch (        IllegalAccessException exception) {
          getLog().unableToInvokeListenerMethod(method,target,exception);
          removeListener(target);
        }
 finally {
          if (classLoader != null && classLoader.get() != null) {
            setContextClassLoader(contextClassLoader);
          }
          resumeIfNeeded(transaction);
        }
      }
    }
;
    if (sync)     syncProcessor.execute(r);
 else     asyncProcessor.execute(r);
  }
}
