{
  TypedProperties typed=TypedProperties.toTypedProperties(properties);
  super.withProperties(typed);
  if (typed != null) {
    if (typed.containsKey(Main.PROP_KEY_PROXY_HOST())) {
      this.proxyHost(typed.getProperty(Main.PROP_KEY_PROXY_HOST(),proxyHost,true));
    }
    this.proxyPort(typed.getIntProperty(Main.PROP_KEY_PROXY_PORT(),proxyPort,true));
    this.topologyLockTimeout(typed.getLongProperty(Main.PROP_KEY_TOPOLOGY_LOCK_TIMEOUT(),topologyLockTimeout,true));
    this.topologyReplTimeout(typed.getLongProperty(Main.PROP_KEY_TOPOLOGY_LOCK_TIMEOUT(),topologyReplTimeout,true));
    this.topologyStateTransfer(typed.getBooleanProperty(Main.PROP_KEY_TOPOLOGY_STATE_TRANSFER(),topologyStateTransfer,true));
    if (typed.containsKey(Main.PROP_KEY_TOPOLOGY_UPDATE_TIMEOUT())) {
      log.topologyUpdateTimeoutIgnored();
    }
  }
  return this;
}
