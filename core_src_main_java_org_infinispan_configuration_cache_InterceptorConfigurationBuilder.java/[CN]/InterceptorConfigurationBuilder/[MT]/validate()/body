{
  Attribute<Class> interceptorClassAttribute=attributes.attribute(INTERCEPTOR_CLASS);
  Attribute<AsyncInterceptor> interceptorAttribute=attributes.attribute(INTERCEPTOR);
  if (!interceptorClassAttribute.isNull() && !interceptorAttribute.isNull()) {
    throw log.interceptorClassAndInstanceDefined(interceptorClassAttribute.get().getName(),interceptorAttribute.get().toString());
  }
 else   if (interceptorClassAttribute.isNull() && interceptorAttribute.isNull()) {
    throw log.customInterceptorMissingClass();
  }
  Class<? extends AsyncInterceptor> interceptorClass=interceptorClassAttribute.get();
  if (interceptorClass == null) {
    interceptorClass=interceptorAttribute.get().getClass();
  }
  if (!BaseCustomInterceptor.class.isAssignableFrom(interceptorClass) && !BaseCustomAsyncInterceptor.class.isAssignableFrom(interceptorClass)) {
    final String className=interceptorClass.getName();
    if (!className.startsWith("org.infinispan.")) {
      log.suggestCustomInterceptorInheritance(className);
    }
  }
  int positions=0;
  if (!attributes.attribute(BEFORE).isNull())   positions++;
  if (!attributes.attribute(AFTER).isNull())   positions++;
  if (attributes.attribute(INDEX).get() > -1)   positions++;
  if (attributes.attribute(POSITION).isModified())   positions++;
switch (positions) {
case 0:
    throw log.missingCustomInterceptorPosition(interceptorClass.getName());
case 1:
  break;
default :
throw log.multipleCustomInterceptorPositions(interceptorClass.getName());
}
}
