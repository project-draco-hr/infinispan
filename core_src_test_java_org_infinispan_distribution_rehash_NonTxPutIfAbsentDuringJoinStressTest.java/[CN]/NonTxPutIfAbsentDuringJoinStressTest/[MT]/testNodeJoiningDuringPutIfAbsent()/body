{
  Future[] futures=new Future[NUM_WRITERS];
  for (int i=0; i < NUM_WRITERS; i++) {
    final int finalI=i;
    futures[i]=fork(new Callable(){
      @Override public Object call() throws Exception {
        for (int j=0; j < NUM_KEYS; j++) {
          Cache<Object,Object> cache=cache(finalI % NUM_ORIGINATORS);
          cache.putIfAbsent("key_" + finalI + "_"+ j,"value_" + finalI + "_"+ j);
        }
        return null;
      }
    }
);
  }
  addClusterEnabledCacheManager(getConfigurationBuilder());
  waitForClusterToForm();
  addClusterEnabledCacheManager(getConfigurationBuilder());
  waitForClusterToForm();
  TimeUnit.MILLISECONDS.sleep(NUM_KEYS * NUM_WRITERS);
  for (int i=0; i < NUM_WRITERS; i++) {
    futures[i].get(10,TimeUnit.SECONDS);
    for (int j=0; j < NUM_KEYS; j++) {
      for (int k=0; k < caches().size(); k++) {
        assertEquals(cache(k).get("key_" + i + "_"+ j),"value_" + i + "_"+ j);
      }
    }
  }
}
