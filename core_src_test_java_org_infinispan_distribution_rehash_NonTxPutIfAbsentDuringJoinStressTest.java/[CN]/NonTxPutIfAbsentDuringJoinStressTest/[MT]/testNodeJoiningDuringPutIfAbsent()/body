{
  Future[] futures=new Future[NUM_WRITERS];
  for (int i=0; i < NUM_WRITERS; i++) {
    final int writerIndex=i;
    futures[i]=fork(new Callable(){
      @Override public Object call() throws Exception {
        while (!stop) {
          for (int j=0; j < NUM_KEYS; j++) {
            Cache<Object,Object> cache=cache(writerIndex % NUM_ORIGINATORS);
            String key="key_" + j;
            String value="value_" + j + "_"+ writerIndex;
            Object oldValue=cache.putIfAbsent(key,value);
            Object newValue=cache.get(key);
            if (oldValue == null) {
              log.tracef("Successfully inserted value %s for key %s",value,key);
              assertEquals(value,newValue);
              boolean isFirst=insertedValues.putIfAbsent(key,value) == null;
              assertTrue("A second putIfAbsent succeeded for " + key,isFirst);
            }
 else {
              assertEquals(oldValue,newValue);
            }
          }
        }
        return null;
      }
    }
);
  }
  addClusterEnabledCacheManager(getConfigurationBuilder());
  waitForClusterToForm();
  addClusterEnabledCacheManager(getConfigurationBuilder());
  waitForClusterToForm();
  stop=true;
  for (int i=0; i < NUM_WRITERS; i++) {
    futures[i].get(10,TimeUnit.SECONDS);
    for (int j=0; j < NUM_KEYS; j++) {
      for (int k=0; k < caches().size(); k++) {
        String key="key_" + j;
        assertEquals(insertedValues.get(key),cache(k).get(key));
      }
    }
  }
  for (int i=0; i < caches().size(); i++) {
    LockManager lockManager=advancedCache(i).getLockManager();
    assertEquals(0,lockManager.getNumberOfLocksHeld());
    for (int j=0; j < NUM_KEYS; j++) {
      String key="key_" + j;
      assertFalse(lockManager.isLocked(key));
    }
  }
}
