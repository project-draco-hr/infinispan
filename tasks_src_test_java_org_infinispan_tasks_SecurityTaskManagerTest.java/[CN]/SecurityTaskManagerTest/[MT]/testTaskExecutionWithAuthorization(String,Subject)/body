{
  System.out.println("Run with " + principal);
  Security.doAs(subject,new PrivilegedAction<Void>(){
    @Override public Void run(){
      CompletableFuture<Object> slowTask=taskManager.runTask(DummyTaskEngine.DummyTaskTypes.SLOW_TASK.name(),new TaskContext());
      Collection<TaskExecution> currentTasks=taskManager.getCurrentTasks();
      assertEquals(1,currentTasks.size());
      TaskExecution currentTask=currentTasks.iterator().next();
      assertEquals(DummyTaskEngine.DummyTaskTypes.SLOW_TASK.name(),currentTask.getName());
      assertEquals(principal,currentTask.getWho().get());
      taskEngine.getSlowTask().complete("slow");
      assertEquals(0,taskManager.getCurrentTasks().size());
      try {
        assertEquals("slow",slowTask.get());
      }
 catch (      InterruptedException|ExecutionException e) {
        fail("Exception thrown while getting the slowTask. ");
      }
      taskEngine.setSlowTask(new CompletableFuture<>());
      return null;
    }
  }
);
}
