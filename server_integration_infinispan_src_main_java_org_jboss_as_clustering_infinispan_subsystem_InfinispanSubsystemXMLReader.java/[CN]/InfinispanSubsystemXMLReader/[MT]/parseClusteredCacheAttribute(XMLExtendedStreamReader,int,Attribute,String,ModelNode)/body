{
switch (attribute) {
case ASYNC_MARSHALLING:
{
      if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
        throw ParseUtils.unexpectedAttribute(reader,index);
      }
 else {
        log.warn("The async-marshalling attribute has been deprecated and has no effect, please update your configuration file.");
        break;
      }
    }
case MODE:
{
    ClusteredCacheConfigurationResource.MODE.parseAndSetParameter(value,cache,reader);
    break;
  }
case QUEUE_SIZE:
{
  if (namespace.since(Namespace.INFINISPAN_SERVER_9_0)) {
    throw ParseUtils.unexpectedAttribute(reader,index);
  }
 else {
    log.warn("The queue-size attribute has been deprecated and has no effect, please update your configuration file.");
    break;
  }
}
case QUEUE_FLUSH_INTERVAL:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_9_0)) {
  throw ParseUtils.unexpectedAttribute(reader,index);
}
 else {
  log.warn("The queue-flush-interval attribute has been deprecated and has no effect, please update your configuration file.");
  break;
}
}
case REMOTE_TIMEOUT:
{
ClusteredCacheConfigurationResource.REMOTE_TIMEOUT.parseAndSetParameter(value,cache,reader);
break;
}
default :
{
this.parseCacheAttribute(reader,index,attribute,value,cache);
}
}
}
