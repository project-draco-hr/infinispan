{
  ModelNode container=Util.getEmptyOperation(ADD,null);
  String name=null;
  final Set<Attribute> required=EnumSet.of(Attribute.NAME);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
case ALIASES:
{
      for (      String alias : reader.getListAttributeValue(i)) {
        container.get(ModelKeys.ALIASES).add(alias);
      }
      break;
    }
case DEFAULT_CACHE:
{
    CacheContainerResource.DEFAULT_CACHE.parseAndSetParameter(value,container,reader);
    break;
  }
case JNDI_NAME:
{
  CacheContainerResource.JNDI_NAME.parseAndSetParameter(value,container,reader);
  break;
}
case START:
{
CacheContainerResource.START.parseAndSetParameter(value,container,reader);
break;
}
case LISTENER_EXECUTOR:
{
CacheContainerResource.LISTENER_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case ASYNC_EXECUTOR:
{
CacheContainerResource.ASYNC_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case EVICTION_EXECUTOR:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
throw ParseUtils.unexpectedAttribute(reader,i);
}
 else {
log.warn("The xml element eviction-executor has been deprecated and replaced by expiration-executor, please update your configuration file.");
CacheContainerResource.EXPIRATION_EXECUTOR.parseAndSetParameter(value,container,reader);
}
break;
}
case EXPIRATION_EXECUTOR:
{
CacheContainerResource.EXPIRATION_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case REPLICATION_QUEUE_EXECUTOR:
{
CacheContainerResource.REPLICATION_QUEUE_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case STATE_TRANSFER_EXECUTOR:
{
CacheContainerResource.STATE_TRANSFER_EXECUTOR.parseAndSetParameter(value,container,reader);
break;
}
case MODULE:
{
CacheContainerResource.CACHE_CONTAINER_MODULE.parseAndSetParameter(value,container,reader);
break;
}
case STATISTICS:
{
CacheContainerResource.STATISTICS.parseAndSetParameter(value,container,reader);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!required.isEmpty()) {
throw ParseUtils.missingRequired(reader,required);
}
PathAddress containerAddress=subsystemAddress.append(ModelKeys.CACHE_CONTAINER,name);
container.get(OP_ADDR).set(containerAddress.toModelNode());
operations.add(container);
PathAddress configurationsAddress=containerAddress.append(CacheContainerConfigurationsResource.PATH);
operations.add(Util.getEmptyOperation(ADD,configurationsAddress.toModelNode()));
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case TRANSPORT:
{
parseTransport(reader,containerAddress,operations);
break;
}
case SECURITY:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_7_0)) {
parseGlobalSecurity(reader,containerAddress,operations);
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
break;
}
case LOCAL_CACHE:
{
parseLocalCache(reader,containerAddress,operations,false);
break;
}
case LOCAL_CACHE_CONFIGURATION:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
parseLocalCache(reader,containerAddress,operations,true);
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
break;
}
case INVALIDATION_CACHE:
{
parseInvalidationCache(reader,containerAddress,operations,false);
break;
}
case INVALIDATION_CACHE_CONFIGURATION:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
parseInvalidationCache(reader,containerAddress,operations,true);
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
break;
}
case REPLICATED_CACHE:
{
parseReplicatedCache(reader,containerAddress,operations,false);
break;
}
case REPLICATED_CACHE_CONFIGURATION:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
parseReplicatedCache(reader,containerAddress,operations,true);
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
break;
}
case DISTRIBUTED_CACHE:
{
parseDistributedCache(reader,containerAddress,operations,false);
break;
}
case DISTRIBUTED_CACHE_CONFIGURATION:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
parseDistributedCache(reader,containerAddress,operations,true);
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
