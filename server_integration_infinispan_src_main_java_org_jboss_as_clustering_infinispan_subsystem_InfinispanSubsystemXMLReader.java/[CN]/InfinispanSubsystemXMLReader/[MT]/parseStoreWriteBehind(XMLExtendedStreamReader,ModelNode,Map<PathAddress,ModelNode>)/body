{
  PathAddress writeBehindAddress=PathAddress.pathAddress(store.get(OP_ADDR)).append(ModelKeys.WRITE_BEHIND,ModelKeys.WRITE_BEHIND_NAME);
  ModelNode writeBehind=Util.createAddOperation(writeBehindAddress);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case FLUSH_LOCK_TIMEOUT:
{
        if (namespace.since(Namespace.INFINISPAN_SERVER_9_0)) {
          throw ParseUtils.unexpectedAttribute(reader,i);
        }
 else {
          ROOT_LOGGER.flushLockTimeoutDeprecated();
        }
        break;
      }
case MODIFICATION_QUEUE_SIZE:
{
      StoreWriteBehindResource.MODIFICATION_QUEUE_SIZE.parseAndSetParameter(value,writeBehind,reader);
      break;
    }
case SHUTDOWN_TIMEOUT:
{
    if (namespace.since(Namespace.INFINISPAN_SERVER_9_0)) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      ROOT_LOGGER.shutdownTimeoutDeprecated();
    }
    break;
  }
case THREAD_POOL_SIZE:
{
  StoreWriteBehindResource.THREAD_POOL_SIZE.parseAndSetParameter(value,writeBehind,reader);
  break;
}
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
ParseUtils.requireNoContent(reader);
operations.put(writeBehindAddress,writeBehind);
}
