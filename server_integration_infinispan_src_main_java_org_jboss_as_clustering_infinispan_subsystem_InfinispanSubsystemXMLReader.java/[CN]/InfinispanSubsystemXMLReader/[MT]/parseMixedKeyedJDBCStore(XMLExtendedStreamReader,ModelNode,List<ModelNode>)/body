{
  ModelNode store=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  String name=ModelKeys.MIXED_KEYED_JDBC_STORE_NAME;
  List<ModelNode> additionalConfigurationOperations=new ArrayList<>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case DATASOURCE:
{
        BaseJDBCStoreConfigurationResource.DATA_SOURCE.parseAndSetParameter(value,store,reader);
        break;
      }
case DIALECT:
{
      BaseJDBCStoreConfigurationResource.DIALECT.parseAndSetParameter(value,store,reader);
      break;
    }
default :
{
    name=this.parseStoreAttribute(name,reader,i,attribute,value,store);
  }
}
}
if (!store.hasDefined(ModelKeys.DATASOURCE)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.DATASOURCE));
}
setOperationAddress(store,PathAddress.pathAddress(cache.get(OP_ADDR)),MixedKeyedJDBCStoreConfigurationResource.PATH,name);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case STRING_KEYED_TABLE:
{
  this.parseJDBCStoreTable(reader,store.get(ModelKeys.STRING_KEYED_TABLE).setEmptyObject());
  break;
}
case BINARY_KEYED_TABLE:
{
this.parseJDBCStoreTable(reader,store.get(ModelKeys.BINARY_KEYED_TABLE).setEmptyObject());
break;
}
case WRITE_BEHIND:
{
parseStoreWriteBehind(reader,store,additionalConfigurationOperations);
break;
}
case PROPERTY:
{
parseStoreProperty(reader,store,additionalConfigurationOperations);
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
operations.add(store);
operations.addAll(additionalConfigurationOperations);
}
