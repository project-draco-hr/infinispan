{
  ModelNode store=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  String name=ModelKeys.MIXED_KEYED_JDBC_STORE_NAME;
  Map<PathAddress,ModelNode> additionalConfigurationOperations=new LinkedHashMap<>();
  name=parseCommonJDBCAttributes(name,store,reader);
  if (!store.hasDefined(ModelKeys.DATASOURCE)) {
    throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.DATASOURCE));
  }
  PathAddress storeAddress=setOperationAddress(store,PathAddress.pathAddress(cache.get(OP_ADDR)),MixedKeyedJDBCStoreConfigurationResource.PATH,name);
  while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
    Element element=Element.forName(reader.getLocalName());
switch (element) {
case STRING_KEYED_TABLE:
{
        this.parseJDBCStoreTable(reader,store.get(ModelKeys.STRING_KEYED_TABLE).setEmptyObject());
        break;
      }
case BINARY_KEYED_TABLE:
{
      this.parseJDBCStoreTable(reader,store.get(ModelKeys.BINARY_KEYED_TABLE).setEmptyObject());
      break;
    }
case WRITE_BEHIND:
{
    parseStoreWriteBehind(reader,store,additionalConfigurationOperations);
    break;
  }
case PROPERTY:
{
  parseStoreProperty(reader,store,additionalConfigurationOperations);
  break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
operations.put(storeAddress,store);
operations.putAll(additionalConfigurationOperations);
}
