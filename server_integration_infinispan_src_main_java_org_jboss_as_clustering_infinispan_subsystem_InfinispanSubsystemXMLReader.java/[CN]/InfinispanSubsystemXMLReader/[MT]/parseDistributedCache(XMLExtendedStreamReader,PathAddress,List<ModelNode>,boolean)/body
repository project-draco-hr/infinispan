{
  ModelNode cacheConfiguration=Util.getEmptyOperation(ModelDescriptionConstants.ADD,null);
  List<ModelNode> additionalConfigurationOperations=new ArrayList<>();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case OWNERS:
{
        DistributedCacheConfigurationResource.OWNERS.parseAndSetParameter(value,cacheConfiguration,reader);
        break;
      }
case SEGMENTS:
{
      DistributedCacheConfigurationResource.SEGMENTS.parseAndSetParameter(value,cacheConfiguration,reader);
      break;
    }
case CAPACITY_FACTOR:
{
    DistributedCacheConfigurationResource.CAPACITY_FACTOR.parseAndSetParameter(value,cacheConfiguration,reader);
    break;
  }
case L1_LIFESPAN:
{
  DistributedCacheConfigurationResource.L1_LIFESPAN.parseAndSetParameter(value,cacheConfiguration,reader);
  break;
}
default :
{
this.parseClusteredCacheAttribute(reader,i,attribute,value,cacheConfiguration);
}
}
}
if (!cacheConfiguration.hasDefined(ModelKeys.NAME)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.NAME));
}
if (!cacheConfiguration.hasDefined(ModelKeys.MODE) && !cacheConfiguration.hasDefined(ModelKeys.CONFIGURATION)) {
throw ParseUtils.missingRequired(reader,EnumSet.of(Attribute.MODE));
}
addNameToAddress(cacheConfiguration,containerAddress,ModelKeys.DISTRIBUTED_CACHE);
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case PARTITION_HANDLING:
{
if (namespace.since(Namespace.INFINISPAN_SERVER_7_0)) {
this.parsePartitionHandling(reader,cacheConfiguration,additionalConfigurationOperations);
}
 else {
throw ParseUtils.unexpectedElement(reader);
}
break;
}
case STATE_TRANSFER:
{
this.parseStateTransfer(reader,cacheConfiguration,additionalConfigurationOperations);
break;
}
default :
{
this.parseCacheElement(reader,element,cacheConfiguration,additionalConfigurationOperations);
}
}
}
operations.add(cacheConfiguration);
for (ModelNode additionalOperation : additionalConfigurationOperations) {
operations.add(additionalOperation);
}
if (!configurationOnly) {
operations.add(addCacheForConfiguration(cacheConfiguration,containerAddress,ModelKeys.DISTRIBUTED_CACHE));
}
}
