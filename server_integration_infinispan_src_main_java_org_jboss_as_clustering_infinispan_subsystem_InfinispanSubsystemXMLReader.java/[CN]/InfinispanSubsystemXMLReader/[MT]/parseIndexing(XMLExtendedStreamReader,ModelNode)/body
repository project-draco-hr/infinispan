{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case INDEX:
      CacheConfigurationResource.INDEXING.parseAndSetParameter(value,node,reader);
    break;
case AUTO_CONFIG:
  CacheConfigurationResource.INDEXING_AUTO_CONFIG.parseAndSetParameter(value,node,reader);
break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case INDEXED_ENTITIES:
{
parseIndexedEntities(reader,node);
break;
}
case PROPERTY:
{
int attributes=reader.getAttributeCount();
String property=null;
for (int i=0; i < attributes; i++) {
String value=reader.getAttributeValue(i);
Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
  property=value;
  break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (property == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
String value=reader.getElementText();
CacheConfigurationResource.INDEXING_PROPERTIES.parseAndAddParameterElement(property,value,node,reader);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
