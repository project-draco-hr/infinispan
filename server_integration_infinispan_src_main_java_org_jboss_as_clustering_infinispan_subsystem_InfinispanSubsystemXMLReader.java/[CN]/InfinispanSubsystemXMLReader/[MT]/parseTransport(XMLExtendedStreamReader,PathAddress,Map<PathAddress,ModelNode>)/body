{
  PathAddress transportAddress=containerAddress.append(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
  ModelNode transport=Util.createAddOperation(transportAddress);
  String stack=null;
  String cluster=null;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CHANNEL:
{
        TransportResource.CHANNEL.parseAndSetParameter(value,transport,reader);
        break;
      }
case EXECUTOR:
{
      if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
        throw ParseUtils.unexpectedAttribute(reader,i);
      }
 else {
        ROOT_LOGGER.deprecatedExecutor(ModelKeys.EXECUTOR,ModelKeys.TRANSPORT_THREAD_POOL);
      }
      break;
    }
case LOCK_TIMEOUT:
{
    TransportResource.LOCK_TIMEOUT.parseAndSetParameter(value,transport,reader);
    break;
  }
case REMOTE_COMMAND_EXECUTOR:
{
  if (namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
    throw ParseUtils.unexpectedAttribute(reader,i);
  }
 else {
    ROOT_LOGGER.deprecatedExecutor(ModelKeys.REMOTE_COMMAND_EXECUTOR,ModelKeys.REMOTE_COMMAND_THREAD_POOL);
  }
  break;
}
case STRICT_PEER_TO_PEER:
{
TransportResource.STRICT_PEER_TO_PEER.parseAndSetParameter(value,transport,reader);
break;
}
case TOTAL_ORDER_EXECUTOR:
{
if (!namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
log.warn("The xml element total-order-executor has been removed and has no effect, please update your configuration file.");
break;
}
}
case STACK:
{
if (!namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
stack=value;
break;
}
}
case CLUSTER:
{
if (!namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
cluster=value;
break;
}
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (!namespace.since(Namespace.INFINISPAN_SERVER_8_0)) {
String channel=(cluster != null) ? cluster : ("cluster-" + containerAddress.getLastElement().getValue());
TransportResource.CHANNEL.parseAndSetParameter(channel,transport,reader);
PathAddress channelAddress=PathAddress.pathAddress(JGroupsSubsystemResourceDefinition.PATH,ChannelResourceDefinition.pathElement(channel));
ModelNode channelOperation=Util.createAddOperation(channelAddress);
if (stack != null) {
ChannelResourceDefinition.STACK.parseAndSetParameter(stack,channelOperation,reader);
}
operations.put(channelAddress,channelOperation);
}
ParseUtils.requireNoContent(reader);
operations.put(transportAddress,transport);
}
