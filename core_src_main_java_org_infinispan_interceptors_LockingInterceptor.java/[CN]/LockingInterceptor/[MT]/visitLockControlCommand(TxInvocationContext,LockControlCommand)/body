{
  boolean localTxScope=ctx.isOriginLocal() && ctx.isInTxScope();
  boolean shouldInvokeOnCluster=false;
  try {
    if (localTxScope) {
      c.attachGlobalTransaction((GlobalTransaction)ctx.getLockOwner());
    }
    if (c.isUnlock()) {
      lockManager.releaseLocks(ctx);
      if (log.isTraceEnabled())       log.trace("Lock released for: " + ctx.getLockOwner());
      return null;
    }
    for (    Object key : c.getKeys()) {
      if (c.isImplicit() && localTxScope && !lockManager.ownsLock(key,ctx.getLockOwner())) {
        shouldInvokeOnCluster=true;
        break;
      }
    }
    boolean goRemoteFirst=configuration.isEnableDeadlockDetection() && localTxScope;
    if (goRemoteFirst) {
      Object result=invokeNextInterceptor(ctx,c);
      try {
        lockKeysForRemoteTx(ctx,c);
      }
 catch (      Throwable e) {
        c.setUnlock(true);
        invokeNextInterceptor(ctx,c);
        throw e;
      }
      return result;
    }
 else {
      lockKeysForRemoteTx(ctx,c);
      if (shouldInvokeOnCluster || c.isExplicit())       return invokeNextInterceptor(ctx,c);
 else       return null;
    }
  }
 catch (  Throwable te) {
    return cleanLocksAndRethrow(ctx,te);
  }
 finally {
    if (ctx.isInTxScope()) {
      doAfterCall(ctx);
    }
 else {
      throw new IllegalStateException("Attempting to lock but there is no transactional context in scope. " + ctx);
    }
  }
}
