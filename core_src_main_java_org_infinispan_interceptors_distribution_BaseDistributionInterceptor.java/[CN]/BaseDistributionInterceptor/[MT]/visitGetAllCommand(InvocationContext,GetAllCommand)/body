{
  if (command.hasFlag(Flag.CACHE_MODE_LOCAL) || command.hasFlag(Flag.SKIP_REMOTE_LOOKUP)) {
    return invokeNextInterceptor(ctx,command);
  }
  int commandTopologyId=command.getTopologyId();
  if (ctx.isOriginLocal()) {
    int currentTopologyId=stateTransferManager.getCacheTopology().getTopologyId();
    boolean topologyChanged=currentTopologyId != commandTopologyId && commandTopologyId != -1;
    if (trace) {
      log.tracef("Command topology id is %d, current topology id is %d",commandTopologyId,currentTopologyId);
    }
    if (topologyChanged) {
      throw new OutdatedTopologyException("Cache topology changed while the command was executing: expected " + commandTopologyId + ", got "+ currentTopologyId);
    }
    ConsistentHash ch=command.getConsistentHash();
    Set<Object> requestedKeys=new HashSet<>();
    for (    Object key : command.getKeys()) {
      CacheEntry entry=ctx.lookupEntry(key);
      if (entry == null) {
        if (!isValueAvailableLocally(ch,key)) {
          requestedKeys.add(key);
        }
 else {
          if (trace) {
            log.tracef("Not doing a remote get for missing key %s since entry is " + "mapped to current node (%s). Owners are %s",toStr(key),rpcManager.getAddress(),ch.locateOwners(key));
          }
          entryFactory.wrapExternalEntry(ctx,key,null,EntryFactory.Wrap.WRAP_ALL,false);
        }
      }
    }
    boolean missingRemoteValues=false;
    if (!requestedKeys.isEmpty()) {
      if (trace) {
        log.tracef("Fetching entries for keys %s from remote nodes",requestedKeys);
      }
      Map<Object,InternalCacheEntry> justRetrieved=retrieveFromRemoteSources(requestedKeys,ctx,command.getFlags());
      Map<Object,InternalCacheEntry> previouslyFetched=command.getRemotelyFetched();
      if (previouslyFetched != null) {
        previouslyFetched.putAll(justRetrieved);
      }
 else {
        command.setRemotelyFetched(justRetrieved);
      }
      for (      Object key : requestedKeys) {
        if (!justRetrieved.containsKey(key)) {
          missingRemoteValues=true;
        }
 else {
          InternalCacheEntry remoteEntry=justRetrieved.get(key);
          entryFactory.wrapExternalEntry(ctx,key,remoteEntry,EntryFactory.Wrap.WRAP_NON_NULL,false);
        }
      }
    }
    if (missingRemoteValues) {
      throw new OutdatedTopologyException("Remote values are missing because of a topology change");
    }
    return invokeNextInterceptor(ctx,command);
  }
 else {
    int currentTopologyId=stateTransferManager.getCacheTopology().getTopologyId();
    boolean topologyChanged=currentTopologyId != commandTopologyId && commandTopologyId != -1;
    ConsistentHash ch=command.getConsistentHash();
    for (    Object key : command.getKeys()) {
      CacheEntry entry=ctx.lookupEntry(key);
      if (entry == null || entry.isNull()) {
        if (isValueAvailableLocally(ch,key) && !topologyChanged) {
          if (trace) {
            log.tracef("Not doing a remote get for missing key %s since entry is " + "mapped to current node (%s). Owners are %s",toStr(key),rpcManager.getAddress(),ch.locateOwners(key));
          }
          entryFactory.wrapExternalEntry(ctx,key,null,EntryFactory.Wrap.WRAP_ALL,false);
        }
      }
    }
    Map<Object,Object> values=(Map<Object,Object>)invokeNextInterceptor(ctx,command);
    return values;
  }
}
