{
  ConfigurationBuilder builder=getConfigurationBuilder(awaitInitialTransfer);
  addNode(getGlobalConfigurationBuilder("r1"),builder);
  addNode(getGlobalConfigurationBuilder("r1"),builder);
  waitForClusterToForm("a","b");
  MBeanServer mBeanServer=PerThreadMBeanServerLookup.getThreadMBeanServer();
  String domain0=manager(1).getCacheManagerConfiguration().globalJmxStatistics().domain();
  ObjectName ltmName0=TestingUtil.getCacheManagerObjectName(domain0,"DefaultCacheManager","LocalTopologyManager");
  String domain1=manager(1).getCacheManagerConfiguration().globalJmxStatistics().domain();
  ObjectName ltmName1=TestingUtil.getCacheManagerObjectName(domain1,"DefaultCacheManager","LocalTopologyManager");
  ObjectName jmxCacheA=TestingUtil.getCacheObjectName(domain0,"a(dist_sync)");
  ObjectName jmxCacheB=TestingUtil.getCacheObjectName(domain0,"b(dist_sync)");
  StateTransferManager stm0a=TestingUtil.extractComponent(cache(0,"a"),StateTransferManager.class);
  assertEquals(Arrays.asList(address(0),address(1)),stm0a.getCacheTopology().getCurrentCH().getMembers());
  assertNull(stm0a.getCacheTopology().getPendingCH());
  StateTransferManager stm0b=TestingUtil.extractComponent(cache(0,"b"),StateTransferManager.class);
  assertEquals(Arrays.asList(address(0),address(1)),stm0b.getCacheTopology().getCurrentCH().getMembers());
  assertNull(stm0b.getCacheTopology().getPendingCH());
  assertTrue(mBeanServer.isRegistered(ltmName0));
  assertTrue((Boolean)mBeanServer.getAttribute(ltmName0,REBALANCING_ENABLED));
  mBeanServer.setAttribute(ltmName0,new Attribute(REBALANCING_ENABLED,false));
  assertFalse((Boolean)mBeanServer.getAttribute(ltmName0,REBALANCING_ENABLED));
  log.debugf("Starting 2 new nodes");
  addNode(getGlobalConfigurationBuilder("r2"),builder);
  addNode(getGlobalConfigurationBuilder("r2"),builder);
  TestingUtil.blockUntilViewsReceived(3000,getCaches("a"));
  TestingUtil.blockUntilViewsReceived(3000,getCaches("b"));
  ClusterTopologyManager ctm2=TestingUtil.extractGlobalComponent(manager(2),ClusterTopologyManager.class);
  assertFalse(ctm2.isRebalancingEnabled());
  ClusterTopologyManager ctm3=TestingUtil.extractGlobalComponent(manager(3),ClusterTopologyManager.class);
  assertFalse(ctm3.isRebalancingEnabled());
  Thread.sleep(1000);
  assertFalse((Boolean)mBeanServer.getAttribute(ltmName1,REBALANCING_ENABLED));
  assertNull(stm0a.getCacheTopology().getPendingCH());
  assertEquals(Arrays.asList(address(0),address(1)),stm0a.getCacheTopology().getCurrentCH().getMembers());
  mBeanServer.setAttribute(jmxCacheB,new Attribute(REBALANCING_ENABLED,false));
  log.debugf("Rebalancing with nodes %s %s %s %s",address(0),address(1),address(2),address(3));
  mBeanServer.setAttribute(ltmName0,new Attribute(REBALANCING_ENABLED,true));
  assertTrue((Boolean)mBeanServer.getAttribute(ltmName0,REBALANCING_ENABLED));
  checkRehashed(stm0a,getCaches("a"),Arrays.asList(address(0),address(1),address(2),address(3)));
  assertFalse((Boolean)mBeanServer.getAttribute(jmxCacheB,REBALANCING_ENABLED));
  assertEquals(Arrays.asList(address(0),address(1)),stm0b.getCacheTopology().getCurrentCH().getMembers());
  mBeanServer.setAttribute(jmxCacheB,new Attribute(REBALANCING_ENABLED,true));
  checkRehashed(stm0b,getCaches("b"),Arrays.asList(address(0),address(1),address(2),address(3)));
}
