{
  ConfigurationBuilder cfg=TestCacheManagerFactory.getDefaultCacheConfiguration(true);
  cfg.clustering().cacheMode(CacheMode.DIST_SYNC).stateTransfer().awaitInitialTransfer(false).transaction().lockingMode(LockingMode.PESSIMISTIC).syncCommitPhase(sync).syncRollbackPhase(sync);
  manager(0).defineConfiguration(CACHE_NAME,cfg.build());
  manager(1).defineConfiguration(CACHE_NAME,cfg.build());
  final CheckPoint checkpoint=new CheckPoint();
  final AdvancedCache<Object,Object> cache0=advancedCache(0,CACHE_NAME);
  final TransactionManager tm0=cache0.getTransactionManager();
  StateProvider stateProvider=TestingUtil.extractComponent(cache0,StateProvider.class);
  StateProvider spyProvider=spy(stateProvider);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Object[] arguments=invocation.getArguments();
      Address source=(Address)arguments[0];
      int topologyId=(Integer)arguments[1];
      Object result=invocation.callRealMethod();
      checkpoint.trigger("post_get_transactions_" + topologyId + "_from_"+ source);
      checkpoint.awaitStrict("resume_get_transactions_" + topologyId + "_from_"+ source,10,SECONDS);
      return result;
    }
  }
).when(spyProvider).getTransactionsForSegments(any(Address.class),anyInt(),anySetOf(Integer.class));
  TestingUtil.replaceComponent(cache0,StateProvider.class,spyProvider,true);
  MagicKey key=new MagicKey("testkey",cache0);
  tm0.begin();
  cache0.put(key,"v0");
  final Transaction tx=tm0.suspend();
  StateTransferManager stm0=TestingUtil.extractComponent(cache0,StateTransferManager.class);
  int initialTopologyId=stm0.getCacheTopology().getTopologyId();
  int rebalanceTopologyId=initialTopologyId + 1;
  AdvancedCache<Object,Object> cache1=advancedCache(1,CACHE_NAME);
  checkpoint.awaitStrict("post_get_transactions_" + rebalanceTopologyId + "_from_"+ address(1),10,SECONDS);
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      tm0.resume(tx);
      if (commit) {
        tm0.commit();
      }
 else {
        tm0.rollback();
      }
      return null;
    }
  }
);
  if (sync) {
    try {
      future.get(1,SECONDS);
      fail("Commit/Rollback command should have been blocked");
    }
 catch (    TimeoutException e) {
    }
  }
 else {
    Thread.sleep(1000);
  }
  checkpoint.trigger("resume_get_transactions_" + rebalanceTopologyId + "_from_"+ address(1));
  TestingUtil.waitForRehashToComplete(caches(CACHE_NAME));
  future.get(10,SECONDS);
  if (commit) {
    assertEquals("v0",TestingUtil.extractComponent(cache0,DataContainer.class).get(key).getValue());
    assertEquals("v0",TestingUtil.extractComponent(cache1,DataContainer.class).get(key).getValue());
  }
 else {
    assertNull(TestingUtil.extractComponent(cache0,DataContainer.class).get(key));
    assertNull(TestingUtil.extractComponent(cache1,DataContainer.class).get(key));
  }
  final TransactionTable tt0=TestingUtil.extractComponent(cache0,TransactionTable.class);
  final TransactionTable tt1=TestingUtil.extractComponent(cache1,TransactionTable.class);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return tt0.getLocalTxCount() == 0 && tt1.getRemoteTxCount() == 0;
    }
  }
);
}
