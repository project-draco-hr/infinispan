{
  checkNotClosed();
  if (cacheName == null)   throw log.parameterMustNotBeNull("cacheName");
  if (configuration == null)   throw log.parameterMustNotBeNull("configuration");
  if ((!configuration.isStoreByValue()) && configuration.isTransactionsEnabled())   throw log.storeByReferenceAndTransactionsNotAllowed();
  IsolationLevel isolationLevel=configuration.getTransactionIsolationLevel();
  Mode txMode=configuration.getTransactionMode();
  boolean noIsolationWithTx=isolationLevel == IsolationLevel.NONE && txMode != Mode.NONE;
  boolean isolationWithNoTx=isolationLevel != IsolationLevel.NONE && txMode == Mode.NONE;
  if (noIsolationWithTx || isolationWithNoTx)   throw log.incompatibleIsolationLevelAndTransactionMode(isolationLevel,txMode);
synchronized (caches) {
    JCache<?,?> cache=caches.get(cacheName);
    if (cache == null) {
      ConfigurationAdapter<K,V> adapter=new ConfigurationAdapter<K,V>(configuration);
      cm.defineConfiguration(cacheName,adapter.build());
      AdvancedCache<K,V> ispnCache=cm.<K,V>getCache(cacheName).getAdvancedCache();
      if (!ispnCache.getStatus().allowInvocations())       ispnCache.start();
      cache=new JCache<K,V>(ispnCache,this,configuration);
      caches.put(cache.getName(),cache);
    }
 else {
      if (!cache.getConfiguration().equals(configuration))       throw log.cacheAlreadyRegistered(cacheName,cache.getConfiguration(),configuration);
    }
    return (Cache<K,V>)cache;
  }
}
