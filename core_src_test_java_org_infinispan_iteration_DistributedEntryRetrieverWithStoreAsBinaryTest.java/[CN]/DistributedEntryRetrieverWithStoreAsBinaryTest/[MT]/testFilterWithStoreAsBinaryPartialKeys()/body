{
  Cache<MagicKey,String> cache0=cache(0,CACHE_NAME);
  Cache<MagicKey,String> cache1=cache(1,CACHE_NAME);
  Cache<MagicKey,String> cache2=cache(2,CACHE_NAME);
  MagicKey findKey=new MagicKey(cache1);
  Map<MagicKey,String> originalValues=new HashMap<>();
  originalValues.put(new MagicKey(cache0),"cache0");
  originalValues.put(findKey,"cache1");
  originalValues.put(new MagicKey(cache2),"cache2");
  cache0.putAll(originalValues);
  EntryRetriever<MagicKey,String> retriever=cache2.getAdvancedCache().getComponentRegistry().getComponent(EntryRetriever.class);
  Iterator<CacheEntry<MagicKey,String>> iterator=retriever.retrieveEntries(new MagicKeyStringFilter(Collections.singletonMap(findKey,"cache1")),null,null,null);
  CacheEntry<MagicKey,String> entry=iterator.next();
  AssertJUnit.assertEquals(findKey,entry.getKey());
  AssertJUnit.assertEquals("cache1",entry.getValue());
  assertFalse(iterator.hasNext());
}
