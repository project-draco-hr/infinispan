{
  cache.put("k1","v1");
  final int numThreads=5;
  final AtomicInteger removed=new AtomicInteger();
  final AtomicInteger rolledBack=new AtomicInteger();
  final AtomicInteger didNothing=new AtomicInteger();
  final CountDownLatch latch=new CountDownLatch(1);
  Thread[] threads=new Thread[numThreads];
  for (int i=0; i < numThreads; i++) {
    threads[i]=new Thread("DummyTxTest.Remover-" + i){
      public void run(){
        try {
          latch.await();
          tm().begin();
          try {
            boolean success;
            if (useConditionalRemove) {
              success=cache.remove("k1","v1");
            }
 else {
              success=cache.remove("k1") != null;
            }
            log.trace("Remove call success: " + success);
            TestingUtil.sleepRandom(200);
            tm().commit();
            if (success) {
              removed.incrementAndGet();
            }
 else {
              didNothing.incrementAndGet();
            }
          }
 catch (          Throwable e) {
            if (e instanceof RollbackException) {
              rolledBack.incrementAndGet();
            }
 else             if (tm().getTransaction() != null) {
              try {
                tm().rollback();
                rolledBack.incrementAndGet();
              }
 catch (              SystemException e1) {
                log.error("Failed to rollback",e1);
              }
            }
            throw e;
          }
        }
 catch (        Throwable e) {
          log.error(e);
        }
      }
    }
;
    threads[i].start();
  }
  latch.countDown();
  for (  Thread t : threads) {
    t.join();
  }
  log.trace("removed= " + removed.get());
  log.trace("rolledBack= " + rolledBack.get());
  log.trace("didNothing= " + didNothing.get());
  assertFalse(cache.containsKey("k1"));
  assertEquals(1,removed.get());
  assertEquals(numThreads - 1,rolledBack.get() + didNothing.get());
}
