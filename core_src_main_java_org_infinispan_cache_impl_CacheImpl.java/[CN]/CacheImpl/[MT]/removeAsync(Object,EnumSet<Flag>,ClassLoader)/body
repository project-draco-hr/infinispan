{
  assertKeyNotNull(key);
  final NotifyingFutureImpl<V> result=new NotifyingFutureImpl<V>();
  final InvocationContext ctx=getInvocationContextWithImplicitTransactionForAsyncOps(false,explicitClassLoader,1);
  Future<V> returnValue=asyncExecutor.submit(new Callable<V>(){
    @Override public V call() throws Exception {
      try {
        associateImplicitTransactionWithCurrentThread(ctx);
        V retval=removeInternal(key,explicitFlags,ctx);
        try {
          result.notifyDone(retval);
        }
 catch (        Throwable t) {
          log.trace("Error when notifying",t);
        }
        return retval;
      }
 catch (      Exception e) {
        try {
          result.notifyException(e);
        }
 catch (        Throwable t) {
          log.trace("Error when notifying",t);
        }
        throw e;
      }
    }
  }
);
  result.setFuture(returnValue);
  return result;
}
