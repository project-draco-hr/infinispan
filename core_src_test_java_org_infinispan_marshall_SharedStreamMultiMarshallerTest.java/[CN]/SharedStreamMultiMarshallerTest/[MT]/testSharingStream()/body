{
  EmbeddedCacheManager cm=TestCacheManagerFactory.createClusteredCacheManager();
  cm.getCache();
  JGroupsAddress address=new JGroupsAddress(new IpAddress(12345));
  PutKeyValueCommand cmd=new PutKeyValueCommand("k","v",false,null,new EmbeddedMetadata.Builder().build(),EnumUtil.EMPTY_BIT_SET,AnyEquivalence.getInstance(),CommandInvocationId.generateId(null));
  try {
    StreamingMarshaller globalMarshal=extractGlobalMarshaller(cm);
    ExposedByteArrayOutputStream baos=new ExposedByteArrayOutputStream(1024);
    ObjectOutput globalOO=globalMarshal.startObjectOutput(baos,false,1024);
    try {
      globalOO.writeObject(address);
      globalOO.flush();
      globalOO.writeInt(baos.size());
      globalOO.flush();
      StreamingMarshaller cacheMarshaller=extractGlobalMarshaller(cm);
      ObjectOutput cacheOO=cacheMarshaller.startObjectOutput(baos,true,1024);
      try {
        cacheOO.writeObject(cmd);
      }
  finally {
        cacheMarshaller.finishObjectOutput(cacheOO);
      }
    }
  finally {
      globalMarshal.finishObjectOutput(globalOO);
    }
    byte[] bytes=new byte[baos.size()];
    System.arraycopy(baos.getRawBuffer(),0,bytes,0,bytes.length);
    ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
    ObjectInput globalOI=globalMarshal.startObjectInput(bais,false);
    try {
      assertEquals(address,globalOI.readObject());
      int offset=globalOI.readInt();
      StreamingMarshaller cacheMarshaller=extractGlobalMarshaller(cm);
      bais=new ByteArrayInputStream(bytes,offset + 4,bytes.length);
      ObjectInput cacheOI=cacheMarshaller.startObjectInput(bais,true);
      try {
        assertEquals(cmd,cacheOI.readObject());
      }
  finally {
        cacheMarshaller.finishObjectInput(cacheOI);
      }
    }
  finally {
      globalMarshal.finishObjectInput(globalOI);
    }
  }
  finally {
    cm.stop();
  }
}
