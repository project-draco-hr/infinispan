{
  final int managementPortServer1=9990;
  MBeanServerConnectionProvider provider1;
  final int managementPortServer2=10099;
  MBeanServerConnectionProvider provider2;
  controller.start("hotrod-rolling-upgrade-2-old");
  try {
    RemoteInfinispanMBeans s2=createRemotes("hotrod-rolling-upgrade-2-old","local",DEFAULT_CACHE_NAME);
    final RemoteCache<Object,Object> c2=createCache(s2,ConfigurationProperties.PROTOCOL_VERSION_12);
    c2.put("key1","value1");
    assertEquals("value1",c2.get("key1"));
    for (int i=0; i < 50; i++) {
      c2.put("keyLoad" + i,"valueLoad" + i);
    }
    controller.start("hotrod-rolling-upgrade-1");
    RemoteInfinispanMBeans s1=createRemotes("hotrod-rolling-upgrade-1","local",DEFAULT_CACHE_NAME);
    final RemoteCache<Object,Object> c1=createCache(s1);
    assertEquals("Can't access etries stored in source node (target's RemoteCacheStore).","value1",c1.get("key1"));
    provider1=new MBeanServerConnectionProvider(s1.server.getHotrodEndpoint().getInetAddress().getHostName(),managementPortServer1);
    provider2=new MBeanServerConnectionProvider(s2.server.getHotrodEndpoint().getInetAddress().getHostName(),managementPortServer2);
    final ObjectName rollMan=new ObjectName("jboss.infinispan:type=Cache," + "name=\"default(local)\"," + "manager=\"local\","+ "component=RollingUpgradeManager");
    invokeOperation(provider2,rollMan.toString(),"recordKnownGlobalKeyset",new Object[]{},new String[]{});
    invokeOperation(provider1,rollMan.toString(),"synchronizeData",new Object[]{"hotrod"},new String[]{"java.lang.String"});
    invokeOperation(provider1,rollMan.toString(),"disconnectSource",new Object[]{"hotrod"},new String[]{"java.lang.String"});
    c2.put("disconnected","source");
    assertEquals("Can't obtain value from cache2 (source node).","source",c2.get("disconnected"));
    assertNull("Source node entries should NOT be accessible from target node (after RCS disconnection)",c1.get("disconnected"));
    assertEquals("Entry was not successfully migrated.","value1",c1.get("key1"));
    for (int i=0; i < 50; i++) {
      assertEquals("Entry was not successfully migrated.","valueLoad" + i,c1.get("keyLoad" + i));
    }
  }
  finally {
    if (controller.isStarted("hotrod-rolling-upgrade-1")) {
      controller.stop("hotrod-rolling-upgrade-1");
    }
    if (controller.isStarted("hotrod-rolling-upgrade-2-old")) {
      controller.stop("hotrod-rolling-upgrade-2-old");
    }
  }
}
