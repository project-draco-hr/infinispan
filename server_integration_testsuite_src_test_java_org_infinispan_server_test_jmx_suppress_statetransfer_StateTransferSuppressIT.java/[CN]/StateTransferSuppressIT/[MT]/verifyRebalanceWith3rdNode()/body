{
  setAttribute(provider(0),LOCAL_TOPOLOGY_MANAGER,REBALANCE_ENABLED_ATTR_NAME,false);
  putDataIntoCache(NUMBER_ENTRIES);
  checkRebalanceStatus(false,provider(0),provider(1));
  checkRpcManagerStatistics(new String[]{"null"},OWNERS_2_MEMBERS_NODE1_NODE2,provider(0),provider(1));
  controller.start(CONTAINER3);
  checkRebalanceStatus(false,provider(2));
  checkRpcManagerStatistics(new String[]{"null"},OWNERS_2_MEMBERS_NODE1_NODE2,provider(0),provider(1),provider(2));
  assertTrue("The hotrod cache on server(2) should be empty.",numEntries(server3,HOTROD_CACHE_NAME) == 0);
  assertTrue("The memcached cache on server(2) should be empty.",numEntries(server3,MEMCACHED_CACHE_NAME) == 0);
  setAttribute(provider(0),LOCAL_TOPOLOGY_MANAGER,REBALANCE_ENABLED_ATTR_NAME,true);
  checkRebalanceStatus(true,provider(0),provider(1),provider(2));
  checkRpcManagerStatistics(new String[]{"null",OWNERS_2_MEMBERS_NODE1_NODE2_NODE3},null,provider(0),provider(1),provider(2));
  checkRpcManagerStatistics(new String[]{"null"},OWNERS_2_MEMBERS_NODE1_NODE2_NODE3,provider(0),provider(1),provider(2));
  assertTrue(numEntries(server1,HOTROD_CACHE_NAME) < NUMBER_ENTRIES);
  assertTrue(numEntries(server2,HOTROD_CACHE_NAME) < NUMBER_ENTRIES);
  assertTrue(numEntries(server3,HOTROD_CACHE_NAME) < NUMBER_ENTRIES);
  assertTrue(numEntries(server1,MEMCACHED_CACHE_NAME) < NUMBER_ENTRIES);
  assertTrue(numEntries(server2,MEMCACHED_CACHE_NAME) < NUMBER_ENTRIES);
  assertTrue(numEntries(server3,MEMCACHED_CACHE_NAME) < NUMBER_ENTRIES);
}
