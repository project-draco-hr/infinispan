{
  Object owner=ctx.getLockOwner();
  ReversibleOrderedSet<Map.Entry<Object,CacheEntry>> entries=ctx.getLookedUpEntries().entrySet();
  Iterator<Map.Entry<Object,CacheEntry>> it=entries.reverseIterator();
  if (trace)   log.tracef("Number of entries in context: %s",entries.size());
  while (it.hasNext()) {
    Map.Entry<Object,CacheEntry> e=it.next();
    CacheEntry entry=e.getValue();
    Object key=e.getKey();
    boolean needToUnlock=possiblyLocked(entry);
    if (entry != null && entry.isChanged())     entry.rollback();
 else {
      if (trace)       log.tracef("Entry for key %s is null, not calling rollbackUpdate",key);
    }
    if (needToUnlock) {
      if (trace)       log.tracef("Releasing lock on [%s] for owner %s",key,owner);
      unlock(key);
    }
  }
}
