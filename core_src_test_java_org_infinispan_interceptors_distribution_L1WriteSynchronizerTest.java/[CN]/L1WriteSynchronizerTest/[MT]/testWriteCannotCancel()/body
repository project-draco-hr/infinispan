{
  final CyclicBarrier barrier=new CyclicBarrier(2);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {
      barrier.await();
      return null;
    }
  }
).when(stl).acquireSharedTopologyLock();
  Future<Void> future=fork(new Runnable(){
    @Override public void run(){
      Object keyValue=new Object();
      InternalCacheEntry ice=new ImmortalCacheEntry(keyValue,keyValue);
      sync.runL1UpdateIfPossible(ice);
    }
  }
,null);
  barrier.await(1,TimeUnit.SECONDS);
  assertFalse(sync.trySkipL1Update());
  future.get(1,TimeUnit.SECONDS);
  verify(dc).put(any(),any(),any(Metadata.class));
}
