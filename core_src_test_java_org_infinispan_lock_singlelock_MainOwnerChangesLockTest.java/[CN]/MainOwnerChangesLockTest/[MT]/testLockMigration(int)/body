{
  Map<Object,DummyTransaction> key2Tx=new HashMap<Object,DummyTransaction>();
  for (int i=0; i < NUM_KEYS; i++) {
    Object key=getKeyForCache(0);
    if (key2Tx.containsKey(key))     continue;
    dummyTm(nodeThatPuts).begin();
    cache(nodeThatPuts).put(key,key);
    DummyTransaction tx=dummyTm(nodeThatPuts).getTransaction();
    tx.runPrepare();
    dummyTm(nodeThatPuts).suspend();
    key2Tx.put(key,tx);
    assertLocked(0,key);
  }
  log.trace("Lock transfer happens here");
  addClusterEnabledCacheManager(dccc);
  waitForClusterToForm();
  Object migratedKey=null;
  ConsistentHash ch=advancedCache(2).getDistributionManager().getConsistentHash();
  for (  Object key : key2Tx.keySet()) {
    if (ch.locatePrimaryOwner(key).equals(address(2))) {
      migratedKey=key;
      break;
    }
  }
  if (migratedKey == null) {
    log.trace("No key migrated to new owner.");
  }
 else {
    log.trace("migratedKey = " + migratedKey);
    dummyTm(2).begin();
    cache(2).put(migratedKey,"someValue");
    try {
      dummyTm(2).commit();
      fail("RollbackException should have been thrown here.");
    }
 catch (    RollbackException e) {
    }
  }
  log.trace("About to commit existing transactions.");
  log.trace("Committing the tx to the new node.");
  for (  Transaction tx : key2Tx.values()) {
    tm(nodeThatPuts).resume(tx);
    dummyTm(nodeThatPuts).getTransaction().runCommit(false);
  }
  for (  Object key : key2Tx.keySet()) {
    Object value=getValue(key);
    assertEquals(key,value);
  }
}
