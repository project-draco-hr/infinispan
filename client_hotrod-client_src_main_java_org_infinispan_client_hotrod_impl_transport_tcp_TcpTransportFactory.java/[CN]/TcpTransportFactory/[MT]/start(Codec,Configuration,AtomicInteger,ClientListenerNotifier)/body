{
synchronized (lock) {
    this.listenerNotifier=listenerNotifier;
    this.configuration=configuration;
    hashFactory.init(configuration);
    boolean pingOnStartup=configuration.pingOnStartup();
    servers=new ArrayList<SocketAddress>();
    for (    ServerConfiguration server : configuration.servers()) {
      servers.add(new InetSocketAddress(server.host(),server.port()));
    }
    servers=Collections.unmodifiableCollection(servers);
    tcpNoDelay=configuration.tcpNoDelay();
    tcpKeepAlive=configuration.tcpKeepAlive();
    soTimeout=configuration.socketTimeout();
    connectTimeout=configuration.connectionTimeout();
    maxRetries=configuration.maxRetries();
    this.topologyId=topologyId;
    if (configuration.security().ssl().enabled()) {
      SslConfiguration ssl=configuration.security().ssl();
      if (ssl.sslContext() != null) {
        sslContext=ssl.sslContext();
      }
 else {
        sslContext=SslContextFactory.getContext(ssl.keyStoreFileName(),ssl.keyStorePassword(),ssl.trustStoreFileName(),ssl.trustStorePassword());
      }
    }
    if (log.isDebugEnabled()) {
      log.debugf("Statically configured servers: %s",servers);
      log.debugf("Load balancer class: %s",configuration.balancingStrategy().getName());
      log.debugf("Tcp no delay = %b; client socket timeout = %d ms; connect timeout = %d ms",tcpNoDelay,soTimeout,connectTimeout);
    }
    TransportObjectFactory connectionFactory;
    if (configuration.security().authentication().enabled()) {
      connectionFactory=new SaslTransportObjectFactory(codec,this,defaultCacheTopologyId,pingOnStartup,configuration.security().authentication());
    }
 else {
      connectionFactory=new TransportObjectFactory(codec,this,defaultCacheTopologyId,pingOnStartup);
    }
    PropsKeyedObjectPoolFactory<SocketAddress,TcpTransport> poolFactory=new PropsKeyedObjectPoolFactory<SocketAddress,TcpTransport>(connectionFactory,configuration.connectionPool());
    createAndPreparePool(poolFactory);
    balancers=CollectionFactory.makeMap(ByteArrayEquivalence.INSTANCE,AnyEquivalence.getInstance());
    consistentHashes=CollectionFactory.makeMap(ByteArrayEquivalence.INSTANCE,AnyEquivalence.getInstance());
    addBalancer(RemoteCacheManager.cacheNameBytes());
  }
  if (configuration.pingOnStartup())   pingServers();
}
