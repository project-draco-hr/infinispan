{
  Cache cache=cache(0,CACHE_NAME);
  LocalEntryRetriever retriever=(LocalEntryRetriever)TestingUtil.extractComponent(cache,EntryRetriever.class);
  final int chunkSize=5;
  final LocalEntryRetriever.Itr iterator=retriever.new Itr(chunkSize);
  Future<Void> future=fork(new Callable<Void>(){
    @Override public Void call() throws InterruptedException {
      Collection<CacheEntry<Integer,Integer>> entries=new ArrayList<>();
      for (int i=0; i < chunkSize + 1; i++) {
        entries.add(new ImmortalCacheEntry(i,i));
      }
      iterator.addEntries(entries);
      return null;
    }
  }
);
  try {
    future.get(100,TimeUnit.MILLISECONDS);
    fail("We should have not finished");
  }
 catch (  TimeoutException e) {
  }
  iterator.close();
  future.get(10,TimeUnit.SECONDS);
}
