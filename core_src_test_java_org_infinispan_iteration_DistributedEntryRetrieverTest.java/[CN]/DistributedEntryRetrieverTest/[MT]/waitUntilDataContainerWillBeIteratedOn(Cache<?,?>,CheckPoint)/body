{
  DataContainer rpc=TestingUtil.extractComponent(cache,DataContainer.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(rpc);
  DataContainer mocaContainer=mock(DataContainer.class,withSettings().defaultAnswer(forwardedAnswer));
  final AtomicInteger invocationCount=new AtomicInteger();
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      boolean waiting=false;
      if (invocationCount.getAndIncrement() == 0) {
        waiting=true;
        checkPoint.trigger("pre_iterator_invoked");
        checkPoint.awaitStrict("pre_iterator_released",10,TimeUnit.SECONDS);
      }
      try {
        return forwardedAnswer.answer(invocation);
      }
  finally {
        invocationCount.getAndDecrement();
        if (waiting) {
          checkPoint.trigger("post_iterator_invoked");
          checkPoint.awaitStrict("post_iterator_released",10,TimeUnit.SECONDS);
        }
      }
    }
  }
).when(mocaContainer).iterator();
  TestingUtil.replaceComponent(cache,DataContainer.class,mocaContainer,true);
  return rpc;
}
