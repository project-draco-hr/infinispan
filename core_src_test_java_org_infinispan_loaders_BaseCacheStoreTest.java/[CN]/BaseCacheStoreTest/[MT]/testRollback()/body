{
  cs.store(TestInternalCacheEntryFactory.create("old","old"));
  List<Modification> mods=new ArrayList<Modification>();
  mods.add(new Store(TestInternalCacheEntryFactory.create("k1","v1")));
  mods.add(new Store(TestInternalCacheEntryFactory.create("k2","v2")));
  mods.add(new Remove("k1"));
  mods.add(new Remove("old"));
  GlobalTransaction tx=gtf.newGlobalTransaction(null,false);
  cs.prepare(mods,tx,false);
  assertFalse(cs.containsKey("k1"));
  assertFalse(cs.containsKey("k2"));
  assertTrue(cs.containsKey("old"));
  cs.rollback(tx);
  assertFalse(cs.containsKey("k1"));
  assertFalse(cs.containsKey("k2"));
  assertTrue(cs.containsKey("old"));
  mods=new ArrayList<Modification>();
  mods.add(new Store(TestInternalCacheEntryFactory.create("k1","v1")));
  mods.add(new Store(TestInternalCacheEntryFactory.create("k2","v2")));
  mods.add(new Clear());
  mods.add(new Store(TestInternalCacheEntryFactory.create("k3","v3")));
  cs.prepare(mods,tx,false);
  assertFalse(cs.containsKey("k1"));
  assertFalse(cs.containsKey("k2"));
  assertFalse(cs.containsKey("k3"));
  cs.rollback(tx);
  assertFalse(cs.containsKey("k1"));
  assertFalse(cs.containsKey("k2"));
  assertFalse(cs.containsKey("k3"));
  assertTrue(cs.containsKey("old"));
}
