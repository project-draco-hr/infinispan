{
switch (second.getComparisonType()) {
case EQUAL:
    if (cmp == 0) {
      return first;
    }
  return isConjunction ? ConstantBooleanExpr.FALSE : null;
case NOT_EQUAL:
if (cmp == 0) {
  return ConstantBooleanExpr.forBoolean(!isConjunction);
}
return isConjunction ? first : null;
case LESS:
if (cmp == 0) {
return isConjunction ? ConstantBooleanExpr.FALSE : new ComparisonExpr(first.getLeftChild(),first.getRightChild(),ComparisonExpr.Type.LESS_OR_EQUAL);
}
if (cmp < 0) {
return isConjunction ? first : second;
}
return isConjunction ? ConstantBooleanExpr.FALSE : null;
case LESS_OR_EQUAL:
if (cmp <= 0) {
return isConjunction ? first : second;
}
return isConjunction ? ConstantBooleanExpr.FALSE : null;
case GREATER:
if (cmp == 0) {
return isConjunction ? ConstantBooleanExpr.FALSE : new ComparisonExpr(first.getLeftChild(),first.getRightChild(),ComparisonExpr.Type.GREATER_OR_EQUAL);
}
if (cmp > 0) {
return isConjunction ? first : second;
}
return isConjunction ? ConstantBooleanExpr.FALSE : null;
case GREATER_OR_EQUAL:
if (cmp >= 0) {
return isConjunction ? first : second;
}
return isConjunction ? ConstantBooleanExpr.FALSE : null;
default :
return null;
}
}
