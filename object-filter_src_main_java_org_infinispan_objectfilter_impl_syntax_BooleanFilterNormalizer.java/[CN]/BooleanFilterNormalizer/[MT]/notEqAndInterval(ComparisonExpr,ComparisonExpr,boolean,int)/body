{
switch (second.getComparisonType()) {
case EQUAL:
    if (cmp == 0) {
      return ConstantBooleanExpr.FALSE;
    }
  return isConjunction ? second : first;
case NOT_EQUAL:
if (cmp == 0) {
  return first;
}
return isConjunction ? null : ConstantBooleanExpr.TRUE;
case LESS:
if (cmp >= 0) {
return isConjunction ? second : first;
}
return isConjunction ? null : ConstantBooleanExpr.TRUE;
case LESS_OR_EQUAL:
if (cmp < 0) {
return isConjunction ? null : ConstantBooleanExpr.TRUE;
}
if (cmp > 0) {
return isConjunction ? second : first;
}
return isConjunction ? new ComparisonExpr(first.getLeftChild(),first.getRightChild(),ComparisonExpr.Type.LESS) : ConstantBooleanExpr.TRUE;
case GREATER:
if (cmp > 0) {
return isConjunction ? null : ConstantBooleanExpr.TRUE;
}
return isConjunction ? second : first;
case GREATER_OR_EQUAL:
if (cmp < 0) {
return isConjunction ? second : first;
}
if (cmp > 0) {
return isConjunction ? new ComparisonExpr(first.getLeftChild(),first.getRightChild(),ComparisonExpr.Type.GREATER) : ConstantBooleanExpr.TRUE;
}
return isConjunction ? ConstantBooleanExpr.FALSE : null;
default :
return null;
}
}
