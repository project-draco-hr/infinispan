{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceSystemProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ASYNC_MARSHALLING:
      if (Boolean.valueOf(value).booleanValue())       builder.clustering().async().asyncMarshalling();
 else       builder.clustering().async().syncMarshalling();
    break;
case REPL_QUEUE_CLASS:
  builder.clustering().async().replQueue(Util.<ReplicationQueue>getInstance(value,cl));
break;
case REPL_QUEUE_INTERVAL:
builder.clustering().async().replQueueInterval(Long.valueOf(value).longValue());
break;
case REPL_QUEUE_MAX_ELEMENTS:
builder.clustering().async().replQueueMaxElements(Integer.valueOf(value).intValue());
break;
case USE_REPL_QUEUE:
builder.clustering().async().useReplQueue(Boolean.valueOf(value).booleanValue());
break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
ParseUtils.requireNoContent(reader);
}
