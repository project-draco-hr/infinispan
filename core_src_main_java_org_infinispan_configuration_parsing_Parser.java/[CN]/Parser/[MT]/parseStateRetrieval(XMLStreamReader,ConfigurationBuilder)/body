{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceSystemProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ALWAYS_PROVIDE_IN_MEMORY_STATE:
      builder.clustering().stateRetrieval().alwaysProvideInMemoryState(Boolean.valueOf(value).booleanValue());
    break;
case FETCH_IN_MEMORY_STATE:
  builder.clustering().stateRetrieval().fetchInMemoryState(Boolean.valueOf(value).booleanValue());
break;
case INITIAL_RETRY_WAIT_TIME:
builder.clustering().stateRetrieval().initialRetryWaitTime(Long.valueOf(value).longValue());
break;
case LOG_FLUSH_TIMEOUT:
builder.clustering().stateRetrieval().logFlushTimeout(Long.valueOf(value).longValue());
break;
case MAX_NON_PROGRESSING_LOG_WRITES:
builder.clustering().stateRetrieval().maxNonProgressingLogWrites(Integer.valueOf(value).intValue());
break;
case NUM_RETRIES:
builder.clustering().stateRetrieval().numRetries(Integer.valueOf(value).intValue());
break;
case RETRY_WAIT_TIME_INCREASE_FACTOR:
builder.clustering().stateRetrieval().retryWaitTimeIncreaseFactor(Integer.valueOf(value).intValue());
break;
case TIMEOUT:
builder.clustering().stateRetrieval().timeout(Long.valueOf(value).longValue());
break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
ParseUtils.requireNoContent(reader);
}
