{
  ParseUtils.requireSingleAttribute(reader,"enabled");
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceSystemProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ENABLED:
      if (Boolean.valueOf(value).booleanValue())       builder.clustering().hash().groups().enabled();
 else       builder.clustering().hash().groups().disabled();
    break;
default :
  throw ParseUtils.unexpectedAttribute(reader,i);
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case GROUPER:
String value=ParseUtils.readStringAttributeElement(reader,"class");
builder.clustering().hash().groups().addGrouper(Util.<Grouper<?>>getInstance(value,cl));
break;
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
