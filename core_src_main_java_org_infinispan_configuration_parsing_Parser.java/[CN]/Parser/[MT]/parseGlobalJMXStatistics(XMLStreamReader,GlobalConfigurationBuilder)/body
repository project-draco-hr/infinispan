{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceSystemProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case ALLOW_DUPLICATE_DOMAINS:
{
        builder.globalJmxStatistics().allowDuplicateDomains(Boolean.valueOf(value));
        break;
      }
case CACHE_MANAGER_NAME:
{
      builder.globalJmxStatistics().cacheManagerName(value);
      break;
    }
case ENABLED:
{
    if (!Boolean.parseBoolean(value))     builder.globalJmxStatistics().disable();
 else     builder.globalJmxStatistics().enable();
    break;
  }
case JMX_DOMAIN:
{
  builder.globalJmxStatistics().jmxDomain(value);
  break;
}
case MBEAN_SERVER_LOOKUP:
{
builder.globalJmxStatistics().mBeanServerLookup(Util.<MBeanServerLookup>getInstance(value,cl));
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROPERTIES:
{
builder.globalJmxStatistics().withProperties(parseProperties(reader));
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
