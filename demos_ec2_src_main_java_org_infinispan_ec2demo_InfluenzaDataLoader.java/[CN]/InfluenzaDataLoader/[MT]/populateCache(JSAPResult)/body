{
  String cfgFileName=System.getProperty("infinispan.demo.cfg");
  if (cfgFileName == null)   cfgFileName=config.getString("InfinispanCfg");
  try {
    cbuilder=new CacheBuilder(cfgFileName);
    influenzaCache=cbuilder.getCacheManager().getCache("InfluenzaCache");
    proteinCache=cbuilder.getCacheManager().getCache("ProteinCache");
    nucleiodCache=cbuilder.getCacheManager().getCache("NucleotideCache");
    npParser=new Nucleotide_Protein_Parser();
    iParser=new Influenza_Parser();
    System.out.println("Caches created....Starting CacheManager");
    cbuilder.getCacheManager().start();
    int loadLimit=config.getInt("count");
    List<Address> z=cbuilder.getCacheManager().getMembers();
    for (    Address k : z)     if (k != null)     System.out.println("Cache Address=" + k.toString());
    System.out.println("Parsing files....");
    if (config.getString("ifile") != null) {
      myLogger.info("Parsing Influenza data");
      List<Influenza_N_P_CR_Element> iList=iParser.parseFile(config.getString("ifile"));
      boolean rQuery=config.getBoolean("randomquery");
      int lSize=iList.size() - 1;
      if (rQuery) {
        System.out.println("Performing random queries");
        Random randomGenerator=new Random();
        while (true) {
          int currRec=randomGenerator.nextInt(lSize);
          Influenza_N_P_CR_Element curreElem=iList.get(currRec);
          this.searchCache(curreElem.getGanNucleoid());
          try {
            Thread.currentThread().sleep(1000);
          }
 catch (          InterruptedException ex) {
          }
        }
      }
 else {
        System.out.println("About to load " + iList.size() + " influenza elements into influenzaCache");
        int loopCount=0;
        influenzaCache.startBatch();
        for (        Influenza_N_P_CR_Element x : iList) {
          influenzaCache.put(x.getGanNucleoid(),x);
          loopCount++;
          if ((loopCount % 5000) == 0) {
            System.out.println("Added " + loopCount + " Influenza records");
            influenzaCache.endBatch(true);
            influenzaCache.startBatch();
          }
          if (loopCount == loadLimit) {
            System.out.println("Limited to " + loadLimit + " records");
            break;
          }
        }
        influenzaCache.endBatch(true);
        System.out.println("Loaded " + influenzaCache.size() + " influenza elements into influenzaCache");
      }
    }
    if (config.getString("pfile") != null) {
      myLogger.info("Parsing Protein data");
      List<Nucleotide_Protein_Element> npList=npParser.parseFile(config.getString("pfile"));
      System.out.println("About to load " + npList.size() + " protein elements into ProteinCache");
      int loopCount=0;
      proteinCache.startBatch();
      for (      Nucleotide_Protein_Element x : npList) {
        proteinCache.put(x.getGenbankAccessionNumber(),x);
        loopCount++;
        if ((loopCount % 5000) == 0) {
          System.out.println("Added " + loopCount + " protein records");
          proteinCache.endBatch(true);
          proteinCache.startBatch();
        }
        if (loopCount == loadLimit) {
          System.out.println("Limited to " + loadLimit + " records");
          break;
        }
      }
      proteinCache.endBatch(true);
      System.out.println("Loaded " + proteinCache.size() + " protein elements into ProteinCache");
    }
    if (config.getString("nfile") != null) {
      myLogger.info("Parsing Nucleotide data");
      List<Nucleotide_Protein_Element> npList=npParser.parseFile(config.getString("nfile"));
      System.out.println("About to load " + npList.size() + " nucleotide elements into NucleiodCache");
      int loopCount=0;
      nucleiodCache.startBatch();
      for (      Nucleotide_Protein_Element x : npList) {
        nucleiodCache.put(x.getGenbankAccessionNumber(),x);
        loopCount++;
        if ((loopCount % 5000) == 0) {
          System.out.println("Added " + loopCount + " Nucleotide records");
          nucleiodCache.endBatch(true);
          nucleiodCache.startBatch();
        }
        if (loopCount == loadLimit) {
          System.out.println("Limited to " + loadLimit + " records");
          break;
        }
      }
      nucleiodCache.endBatch(true);
      System.out.println("Loaded " + nucleiodCache.size() + " nucleotide elements into NucleiodCache");
    }
    System.out.println("Parsing files....Done");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
