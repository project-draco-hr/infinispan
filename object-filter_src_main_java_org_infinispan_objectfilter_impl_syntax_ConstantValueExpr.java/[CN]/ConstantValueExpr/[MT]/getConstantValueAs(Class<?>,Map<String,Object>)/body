{
  Comparable value;
  if (constantValue instanceof ParamPlaceholder) {
    String paramName=((ParamPlaceholder)constantValue).getName();
    value=(Comparable)namedParameters.get(paramName);
    if (value == null) {
      throw new IllegalStateException("Missing value for parameter " + paramName);
    }
  }
 else {
    value=constantValue;
  }
  Class<?> type=value.getClass();
  if (type != targetType) {
    if (targetType == String.class) {
      return value.toString();
    }
 else     if (targetType == Boolean.class) {
      if (type == String.class) {
        return Boolean.valueOf((String)value);
      }
    }
 else     if (targetType == Double.class) {
      if (type == String.class) {
        return Double.valueOf((String)value);
      }
 else       if (Number.class.isAssignableFrom(type)) {
        return ((Number)value).doubleValue();
      }
    }
 else     if (targetType == Float.class) {
      if (type == String.class) {
        return Float.valueOf((String)value);
      }
 else       if (Number.class.isAssignableFrom(type)) {
        return ((Number)value).floatValue();
      }
    }
 else     if (targetType == Long.class) {
      if (type == String.class) {
        return Long.valueOf((String)value);
      }
 else       if (Number.class.isAssignableFrom(type)) {
        return ((Number)value).longValue();
      }
    }
 else     if (targetType == Integer.class) {
      if (type == String.class) {
        return Integer.valueOf((String)value);
      }
 else       if (Number.class.isAssignableFrom(type)) {
        return ((Number)value).intValue();
      }
    }
 else     if (targetType == Short.class) {
      if (type == String.class) {
        return Short.valueOf((String)value);
      }
 else       if (Number.class.isAssignableFrom(type)) {
        return ((Number)value).shortValue();
      }
    }
 else     if (targetType == Byte.class) {
      if (type == String.class) {
        return Byte.valueOf((String)value);
      }
 else       if (Number.class.isAssignableFrom(type)) {
        return ((Number)value).byteValue();
      }
    }
  }
  return value;
}
