{
  AdvancedCache cache=mock(AdvancedCache.class);
  ComponentRegistry registry=mock(ComponentRegistry.class);
  Configuration configuration=mock(Configuration.class);
  DataContainerConfiguration dataContainerConfiguration=mock(DataContainerConfiguration.class);
  LockingConfiguration lockingConfiguration=mock(LockingConfiguration.class);
  TransactionConfiguration transactionConfiguration=mock(TransactionConfiguration.class);
  LoadersConfiguration loadersConfiguration=mock(LoadersConfiguration.class);
  ClusteringConfiguration clusteringConfiguration=mock(ClusteringConfiguration.class);
  CacheMode cacheMode=CacheMode.LOCAL;
  when(cache.getName()).thenReturn(name);
  when(cache.getAdvancedCache()).thenReturn(cache);
  when(cache.getComponentRegistry()).thenReturn(registry);
  when(registry.getTimeService()).thenReturn(TIME_SERVICE);
  when(cache.getStatus()).thenReturn(ComponentStatus.RUNNING);
  when(cache.getCacheConfiguration()).thenReturn(configuration);
  when(configuration.dataContainer()).thenReturn(dataContainerConfiguration);
  when(configuration.locking()).thenReturn(lockingConfiguration);
  when(configuration.loaders()).thenReturn(loadersConfiguration);
  when(configuration.clustering()).thenReturn(clusteringConfiguration);
  when(configuration.transaction()).thenReturn(transactionConfiguration);
  when(configuration.dataContainer()).thenReturn(dataContainerConfiguration);
  when(dataContainerConfiguration.keyEquivalence()).thenReturn(AnyEquivalence.getInstance());
  when(lockingConfiguration.concurrencyLevel()).thenReturn(16);
  when(transactionConfiguration.cacheStopTimeout()).thenReturn(30000L);
  when(loadersConfiguration.preload()).thenReturn(false);
  when(clusteringConfiguration.cacheMode()).thenReturn(cacheMode);
  return cache;
}
