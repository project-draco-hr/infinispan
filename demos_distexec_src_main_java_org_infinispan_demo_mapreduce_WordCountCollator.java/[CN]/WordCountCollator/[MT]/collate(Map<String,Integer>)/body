{
  Thread.currentThread().setName(String.format("CollatorThread-%d",Thread.currentThread().getId()));
  Set<Map.Entry<String,Integer>> entrySet=reducedResults.entrySet();
  ArrayList<Map.Entry<String,Integer>> l=new ArrayList<Map.Entry<String,Integer>>(entrySet);
  Collections.sort(l,new Comparator<Map.Entry<String,Integer>>(){
    @Override public int compare(    Map.Entry<String,Integer> o1,    Map.Entry<String,Integer> o2){
      return o1.getValue() < o2.getValue() ? 1 : o1.getValue() > o2.getValue() ? -1 : 0;
    }
  }
);
  List<Map.Entry<String,Integer>> results=new LinkedList<Map.Entry<String,Integer>>();
  for (int i=0; i < kthFrequentWord; i++)   results.add(l.get(i));
  return results;
}
