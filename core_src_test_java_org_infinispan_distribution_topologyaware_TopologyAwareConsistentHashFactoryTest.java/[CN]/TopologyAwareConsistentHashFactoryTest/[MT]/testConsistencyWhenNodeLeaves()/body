{
  addNode(testAddresses[0],"m2","r0","s1");
  addNode(testAddresses[1],"m1","r0","s0");
  addNode(testAddresses[2],"m1","r0","s1");
  addNode(testAddresses[3],"m1","r1","s0");
  addNode(testAddresses[4],"m0","r0","s1");
  addNode(testAddresses[5],"m0","r1","s1");
  addNode(testAddresses[6],"m0","r1","s0");
  addNode(testAddresses[7],"m0","r0","s3");
  addNode(testAddresses[8],"m0","r0","s2");
  addNode(testAddresses[9],"m0","r0","s0");
  updateConsistentHash(3);
  for (  Address addr : chMembers) {
    log.debugf("Removing node %s" + addr);
    List<Address> addressCopy=new ArrayList<Address>(chMembers);
    addressCopy.remove(addr);
    DefaultConsistentHash newCH=chf.updateMembers(ch,addressCopy);
    newCH=chf.rebalance(newCH);
    for (int segment=0; segment < numSegments; segment++) {
      checkConsistency(segment,3,ch.locateOwnersForSegment(segment),addr,newCH);
    }
  }
}
