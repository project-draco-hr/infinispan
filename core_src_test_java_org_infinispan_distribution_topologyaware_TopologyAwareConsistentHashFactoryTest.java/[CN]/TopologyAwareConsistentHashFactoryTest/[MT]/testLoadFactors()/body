{
  try {
    capacityFactors=new HashMap<Address,Float>();
    capacityFactors.put(testAddresses[0],2.0f);
    capacityFactors.put(testAddresses[1],0.0f);
    capacityFactors.put(testAddresses[2],1.0f);
    capacityFactors.put(testAddresses[3],2.0f);
    capacityFactors.put(testAddresses[4],0.0f);
    capacityFactors.put(testAddresses[5],1.0f);
    capacityFactors.put(testAddresses[6],2.0f);
    capacityFactors.put(testAddresses[7],0.0f);
    capacityFactors.put(testAddresses[8],1.0f);
    addNode(testAddresses[0],"m0","r0","s0");
    addNode(testAddresses[1],"m1","r0","s0");
    addNode(testAddresses[2],"m2","r0","s0");
    addNode(testAddresses[3],"m3","r1","s0");
    addNode(testAddresses[4],"m4","r1","s0");
    addNode(testAddresses[5],"m5","r1","s0");
    addNode(testAddresses[6],"m6","r2","s0");
    addNode(testAddresses[7],"m7","r2","s0");
    addNode(testAddresses[8],"m8","r2","s0");
    assertAllLocationsWithRebalance(1);
    assertAllLocationsWithRebalance(2);
    assertAllLocationsWithRebalance(3);
  }
  finally {
    capacityFactors=null;
  }
}
