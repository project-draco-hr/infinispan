{
  insertData();
  final ConcurrentMap<Object,Object> entries=new ConcurrentHashMap<>();
  final AtomicBoolean stopped=new AtomicBoolean(false);
  store.process(null,new AdvancedCacheLoader.CacheLoaderTask(){
    @Override public void processEntry(    MarshalledEntry marshalledEntry,    AdvancedCacheLoader.TaskContext taskContext) throws InterruptedException {
synchronized (entries) {
        boolean shouldStop=entries.size() == 100 && !stopped.get();
        log.info("shouldStop = " + shouldStop + ",entries size = "+ entries.size());
        if (shouldStop) {
          stopped.set(true);
          taskContext.stop();
          return;
        }
        entries.put(unwrapKey(marshalledEntry.getKey()),unwrapValue(marshalledEntry.getValue()));
      }
    }
  }
,persistenceExecutor,true,true);
  assertTrue(stopped.get());
  assertTrue(entries.size() <= 100 + numThreads(),"got " + entries.size() + " elements, expected less than "+ (100 + numThreads()));
  assertTrue(entries.size() >= 100);
}
