{
  resetStreamSummary(cache(0));
  resetStreamSummary(cache(1));
  Cache<Object,Object> primary;
  Cache<Object,Object> nonPrimary;
  if (isPrimaryOwner(cache(0),"key")) {
    primary=cache(0);
    nonPrimary=cache(1);
  }
 else {
    primary=cache(1);
    nonPrimary=cache(0);
  }
  PrepareCommandBlocker blocker=addPrepareBlockerIfAbsent(primary);
  blocker.reset();
  ThrowableAwareThread thread=putInOtherThread(nonPrimary,"key","value");
  blocker.awaitUntilPrepareBlocked();
  try {
    primary.put("key","value");
    Assert.fail("The key should be locked!");
  }
 catch (  Throwable t) {
  }
  blocker.unblock();
  thread.join();
  Assert.assertNull(thread.throwable);
  assertTopKeyAccesses(cache(0),"key",1,false);
  assertTopKeyAccesses(cache(0),"key",0,true);
  assertTopKeyAccesses(cache(1),"key",1,false);
  assertTopKeyAccesses(cache(1),"key",0,true);
  assertLockInformation(primary,"key",2,1,1);
  assertLockInformation(nonPrimary,"key",0,0,0);
  assertWriteSkew(cache(0),"key",0);
  assertWriteSkew(cache(1),"key",0);
}
