{
  GlobalConfigurationBuilder builder=new GlobalConfigurationBuilder();
  ModuleLoader moduleLoader=this.loader.getValue();
  builder.serialization().classResolver(ModularClassResolver.getInstance(moduleLoader));
  ClassLoader loader=null;
  try {
    loader=(this.module != null) ? moduleLoader.loadModule(this.module).getClassLoader() : CacheContainerConfiguration.class.getClassLoader();
    builder.classLoader(loader);
    int id=Ids.MAX_ID;
    for (    SimpleExternalizer<?> externalizer : ServiceLoader.load(SimpleExternalizer.class,loader)) {
      InfinispanLogger.ROOT_LOGGER.debugf("Cache container %s will use an externalizer for %s",this.name,externalizer.getTargetClass().getName());
      builder.serialization().addAdvancedExternalizer(id++,externalizer);
    }
  }
 catch (  ModuleLoadException e) {
    throw new IllegalStateException(e);
  }
  builder.shutdown().hookBehavior(ShutdownHookBehavior.DONT_REGISTER);
  AuthorizationConfiguration authorization=(this.authorization != null) ? this.authorization.getValue() : null;
  GlobalAuthorizationConfigurationBuilder authorizationBuilder=builder.security().authorization();
  if (authorization != null) {
    authorizationBuilder.enable();
    if (authorization.getPrincipalMapper() != null) {
      try {
        authorizationBuilder.principalRoleMapper(Class.forName(authorization.getPrincipalMapper(),true,loader).asSubclass(PrincipalRoleMapper.class).newInstance());
      }
 catch (      Exception e) {
        throw new IllegalStateException(e);
      }
    }
 else {
      authorizationBuilder.principalRoleMapper(new ClusterRoleMapper());
    }
    for (    Entry<String,List<String>> role : authorization.getRoles().entrySet()) {
      GlobalRoleConfigurationBuilder roleBuilder=authorizationBuilder.role(role.getKey());
      for (      String perm : role.getValue()) {
        roleBuilder.permission(perm);
      }
    }
  }
  TransportConfiguration transport=(this.transport != null) ? this.transport.getValue() : null;
  if (transport != null) {
    org.infinispan.configuration.global.TransportConfigurationBuilder transportBuilder=builder.transport().clusterName(this.name).transport(new ChannelTransport(transport.getChannel(),transport.getChannelFactory())).distributedSyncTimeout(transport.getLockTimeout());
    ProtocolStackConfiguration stack=transport.getChannelFactory().getProtocolStackConfiguration();
    org.infinispan.server.jgroups.spi.TransportConfiguration.Topology topology=stack.getTransport().getTopology();
    if (topology != null) {
      transportBuilder.siteId(topology.getSite()).rackId(topology.getRack()).machineId(topology.getMachine());
    }
    Executor executor=transport.getExecutor();
    if (executor != null) {
      transportBuilder.transportThreadPool().threadPoolFactory(new ManagedExecutorFactory(executor));
    }
    RelayConfiguration relay=stack.getRelay();
    if (relay != null) {
      builder.site().localSite(relay.getSiteName());
    }
  }
  Executor asyncExecutor=(this.asyncExecutor != null) ? this.asyncExecutor.getValue() : null;
  if (asyncExecutor != null) {
    builder.asyncThreadPool().threadPoolFactory(new ManagedExecutorFactory(asyncExecutor));
  }
  Executor listenerExecutor=(this.listenerExecutor != null) ? this.listenerExecutor.getValue() : null;
  if (listenerExecutor != null) {
    builder.listenerThreadPool().threadPoolFactory(new ManagedExecutorFactory(listenerExecutor));
  }
  ScheduledExecutorService expirationExecutor=(this.expirationExecutor != null) ? this.expirationExecutor.getValue() : null;
  if (expirationExecutor != null) {
    builder.expirationThreadPool().threadPoolFactory(new ManagedScheduledExecutorFactory(expirationExecutor));
  }
  ScheduledExecutorService replicationQueueExecutor=(this.replicationQueueExecutor != null) ? this.replicationQueueExecutor.getValue() : null;
  if (replicationQueueExecutor != null) {
    builder.replicationQueueThreadPool().threadPoolFactory(new ManagedExecutorFactory(replicationQueueExecutor));
  }
  builder.globalJmxStatistics().enabled(this.statisticsEnabled).cacheManagerName(this.name).mBeanServerLookup(new MBeanServerProvider(this.server.getValue())).jmxDomain(CacheContainerServiceName.CACHE_CONTAINER.getServiceName(CacheServiceNameFactory.DEFAULT_CACHE).getParent().getCanonicalName()).allowDuplicateDomains(true);
  return builder.build();
}
