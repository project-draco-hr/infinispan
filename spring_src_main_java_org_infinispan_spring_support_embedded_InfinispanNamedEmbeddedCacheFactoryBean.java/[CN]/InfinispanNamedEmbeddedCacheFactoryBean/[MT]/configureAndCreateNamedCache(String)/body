{
switch (this.configurationTemplateMode) {
case NONE:
    this.logger.debug("ConfigurationTemplateMode is NONE: using a fresh Configuration");
  if (this.infinispanEmbeddedCacheManager.getCacheNames().contains(cacheName)) {
    throw new IllegalStateException("Cannot use ConfigurationTemplateMode NONE: a cache named [" + cacheName + "] has already been defined.");
  }
builder=new ConfigurationBuilder();
this.infinispanEmbeddedCacheManager.defineConfiguration(cacheName,builder.build());
break;
case NAMED:
this.logger.debug("ConfigurationTemplateMode is NAMED: using a named Configuration [" + cacheName + "]");
Configuration cacheConfiguration=infinispanEmbeddedCacheManager.getCacheConfiguration(cacheName);
if (cacheConfiguration != null) {
builder=new ConfigurationBuilder();
builder.read(cacheConfiguration);
this.infinispanEmbeddedCacheManager.defineConfiguration(cacheName,builder.build());
}
break;
case DEFAULT:
this.logger.debug("ConfigurationTemplateMode is DEFAULT.");
if (this.infinispanEmbeddedCacheManager.getCacheNames().contains(cacheName)) {
throw new IllegalStateException("Cannot use ConfigurationTemplateMode DEFAULT: a cache named [" + cacheName + "] has already been defined.");
}
break;
case CUSTOM:
this.logger.debug("ConfigurationTemplateMode is CUSTOM. Using the provided ConfigurationBuilder.");
if (this.builder == null) {
throw new IllegalStateException("There has not been a ConfigurationBuilder provided. There has to be one " + "provided for ConfigurationTemplateMode CUSTOM.");
}
this.infinispanEmbeddedCacheManager.defineConfiguration(cacheName,builder.build());
break;
default :
throw new IllegalStateException("Unknown ConfigurationTemplateMode: " + this.configurationTemplateMode);
}
return this.infinispanEmbeddedCacheManager.getCache(cacheName);
}
