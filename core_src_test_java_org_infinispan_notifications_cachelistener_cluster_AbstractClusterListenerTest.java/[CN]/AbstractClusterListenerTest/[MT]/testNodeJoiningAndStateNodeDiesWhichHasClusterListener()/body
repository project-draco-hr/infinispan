{
  Cache<Object,String> cache0=cache(0,CACHE_NAME);
  Cache<Object,String> cache1=cache(1,CACHE_NAME);
  Cache<Object,String> cache2=cache(2,CACHE_NAME);
  int initialCache0ListenerSize=cache0.getAdvancedCache().getListeners().size();
  int initialCache1ListenerSize=cache1.getAdvancedCache().getListeners().size();
  int initialCache2ListenerSize=cache2.getAdvancedCache().getListeners().size();
  ClusterListener clusterListener=new ClusterListener();
  cache0.addListener(clusterListener);
  assertEquals(cache0.getAdvancedCache().getListeners().size(),initialCache0ListenerSize + 1);
  assertEquals(cache1.getAdvancedCache().getListeners().size(),initialCache1ListenerSize + 1);
  assertEquals(cache2.getAdvancedCache().getListeners().size(),initialCache2ListenerSize + 1);
  assertEquals(manager(0).getAddress(),manager(0).getMembers().get(0));
  CheckPoint checkPoint=new CheckPoint();
  waitUntilRequestingListeners(cache0,checkPoint);
  checkPoint.triggerForever("post_cluster_listeners_release_" + cache0);
  waitUntilViewChangeOccurs(manager(1),"manager1",checkPoint);
  checkPoint.trigger("pre_view_listener_release_" + "manager1");
  log.info("Adding a new node ..");
  addClusterEnabledCacheManager(builderUsed);
  log.info("Added a new node");
  waitUntilViewChangeOccurs(manager(3),"manager3",checkPoint);
  checkPoint.trigger("pre_view_listener_release_" + "manager3");
  Future<Cache<Object,String>> future=fork(new Callable<Cache<Object,String>>(){
    @Override public Cache<Object,String> call() throws Exception {
      return cache(3,CACHE_NAME);
    }
  }
);
  checkPoint.awaitStrict("post_view_listener_invoked_" + "manager1",10,TimeUnit.SECONDS);
  checkPoint.awaitStrict("pre_cluster_listeners_invoked_" + cache0,10,TimeUnit.SECONDS);
  log.info("Killing node 0 ..");
  TestingUtil.killCacheManagers(manager(0));
  cacheManagers.remove(0);
  log.info("Node 0 killed");
  Cache<Object,String> cache3=future.get(10,TimeUnit.SECONDS);
  checkPoint.triggerForever("pre_view_listener_release_" + "manager1");
  TestingUtil.blockUntilViewsReceived(60000,false,cache1,cache2);
  TestingUtil.waitForRehashToComplete(cache1,cache2);
  MagicKey key=new MagicKey(cache3);
  cache3.put(key,FIRST_VALUE);
  assertEquals(cache1.getAdvancedCache().getListeners().size(),initialCache1ListenerSize);
  assertEquals(cache2.getAdvancedCache().getListeners().size(),initialCache2ListenerSize);
  for (  Object listener : cache3.getAdvancedCache().getListeners()) {
    assertFalse(listener instanceof RemoteClusterListener);
  }
}
