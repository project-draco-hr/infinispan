{
  MBeanServerConnectionProvider provider1;
  MBeanServerConnectionProvider provider2;
  RemoteInfinispanMBeans s2=createRemotes("hotrod-rolling-upgrade-2","local",DEFAULT_CACHE_NAME);
  final RemoteCache<Object,Object> c2=createCache(s2);
  c2.put("key1","value1");
  assertEquals("value1",c2.get("key1"));
  for (int i=0; i < 50; i++) {
    c2.put("keyLoad" + i,"valueLoad" + i);
  }
  controller.start("hotrod-rolling-upgrade-1");
  RemoteInfinispanMBeans s1=createRemotes("hotrod-rolling-upgrade-1","local",DEFAULT_CACHE_NAME);
  final RemoteCache<Object,Object> c1=createCache(s1);
  assertEquals("Can't access etries stored in source node (target's RemoteCacheStore).","value1",c1.get("key1"));
  provider1=new MBeanServerConnectionProvider(s1.server.getHotrodEndpoint().getInetAddress().getHostName(),SERVER1_MGMT_PORT);
  provider2=new MBeanServerConnectionProvider(s2.server.getHotrodEndpoint().getInetAddress().getHostName(),SERVER2_MGMT_PORT);
  final ObjectName rollMan=new ObjectName("jboss.infinispan:type=Cache," + "name=\"default(local)\"," + "manager=\"local\","+ "component=RollingUpgradeManager");
  invokeOperation(provider2,rollMan.toString(),"recordKnownGlobalKeyset",new Object[]{},new String[]{});
  invokeOperation(provider1,rollMan.toString(),"synchronizeData",new Object[]{"hotrod"},new String[]{"java.lang.String"});
  invokeOperation(provider1,rollMan.toString(),"disconnectSource",new Object[]{"hotrod"},new String[]{"java.lang.String"});
  c2.put("disconnected","source");
  assertEquals("Can't obtain value from cache1 (source node).","source",c2.get("disconnected"));
  assertNull("Source node entries should NOT be accessible from target node (after RCS disconnection)",c1.get("disconnected"));
  assertEquals("Entry was not successfully migrated.","value1",c1.get("key1"));
  for (int i=0; i < 50; i++) {
    assertEquals("Entry was not successfully migrated.","valueLoad" + i,c1.get("keyLoad" + i));
  }
}
