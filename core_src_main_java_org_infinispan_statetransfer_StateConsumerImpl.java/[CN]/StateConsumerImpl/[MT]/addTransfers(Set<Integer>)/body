{
  log.debugf("Adding inbound state transfer for segments %s of cache %s",segments,cacheName);
  Set<Integer> segmentsToProcess=new HashSet<Integer>(segments);
  Set<Address> faultysources=new HashSet<Address>();
  for (Iterator<Integer> it=segmentsToProcess.iterator(); it.hasNext(); ) {
    Integer segmentId=it.next();
    Address source=pickSourceOwner(segmentId,faultysources);
    if (source == null) {
      it.remove();
    }
  }
  while (!segmentsToProcess.isEmpty()) {
    Map<Address,Set<Integer>> segmentsBySource=new HashMap<Address,Set<Integer>>();
    for (    int segmentId : segmentsToProcess) {
synchronized (this) {
        if (transfersBySegment.containsKey(segmentId)) {
          continue;
        }
      }
      Address source=pickSourceOwner(segmentId,faultysources);
      if (source != null) {
        Set<Integer> segmentsFromSource=segmentsBySource.get(source);
        if (segmentsFromSource == null) {
          segmentsFromSource=new HashSet<Integer>();
          segmentsBySource.put(source,segmentsFromSource);
        }
        segmentsFromSource.add(segmentId);
      }
    }
    Set<Integer> failedSegments=new HashSet<Integer>();
    for (    Address source : segmentsBySource.keySet()) {
      Set<Integer> segmentsFromSource=segmentsBySource.get(source);
      InboundTransferTask inboundTransfer;
synchronized (this) {
        segmentsFromSource.removeAll(transfersBySegment.keySet());
        if (segmentsFromSource.isEmpty()) {
          continue;
        }
        inboundTransfer=new InboundTransferTask(segmentsFromSource,source,cacheTopology.getTopologyId(),this,rpcManager,commandsFactory,timeout,cacheName);
        for (        int segmentId : segmentsFromSource) {
          transfersBySegment.put(segmentId,inboundTransfer);
        }
        List<InboundTransferTask> inboundTransfers=transfersBySource.get(inboundTransfer.getSource());
        if (inboundTransfers == null) {
          inboundTransfers=new ArrayList<InboundTransferTask>();
          transfersBySource.put(inboundTransfer.getSource(),inboundTransfers);
        }
        inboundTransfers.add(inboundTransfer);
      }
      if (configuration.transaction().transactionMode().isTransactional()) {
        if (!inboundTransfer.requestTransactions()) {
          log.failedToRetrieveTransactionsForSegments(segmentsFromSource,cacheName,source);
          failedSegments.addAll(segmentsFromSource);
          faultysources.add(source);
          removeTransfer(inboundTransfer);
          continue;
        }
      }
      if (fetchEnabled) {
        if (!inboundTransfer.requestSegments()) {
          log.failedToRequestSegments(segmentsFromSource,cacheName,source);
          failedSegments.addAll(segmentsFromSource);
          faultysources.add(source);
          removeTransfer(inboundTransfer);
        }
      }
 else {
        removeTransfer(inboundTransfer);
      }
    }
    segmentsToProcess=failedSegments;
  }
  log.debugf("Finished adding inbound state transfer for segments %s of cache %s",segments,cacheName);
}
