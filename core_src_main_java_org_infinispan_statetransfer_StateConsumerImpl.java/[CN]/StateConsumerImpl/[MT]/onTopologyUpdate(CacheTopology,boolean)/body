{
  if (trace)   log.tracef("Received new topology for cache %s, isRebalance = %b, topology = %s",cacheName,isRebalance,cacheTopology);
  int numStartedTopologyUpdates=activeTopologyUpdates.incrementAndGet();
  if (isRebalance) {
    rebalanceInProgress.set(true);
    waitingForState.set(true);
    cacheNotifier.notifyDataRehashed(cacheTopology.getCurrentCH(),cacheTopology.getPendingCH(),cacheTopology.getTopologyId(),true);
  }
  final ConsistentHash previousReadCh=this.cacheTopology != null ? this.cacheTopology.getReadConsistentHash() : null;
  final ConsistentHash previousWriteCh=this.cacheTopology != null ? this.cacheTopology.getWriteConsistentHash() : null;
  stateTransferLock.acquireExclusiveTopologyLock();
  this.cacheTopology=cacheTopology;
  if (numStartedTopologyUpdates == 1) {
    updatedKeys=new ConcurrentHashSet<Object>();
  }
  stateTransferLock.releaseExclusiveTopologyLock();
  stateTransferLock.notifyTopologyInstalled(cacheTopology.getTopologyId());
  try {
    if (isTransactional || isFetchEnabled) {
      Set<Integer> addedSegments;
      if (previousWriteCh == null) {
        addedSegments=getOwnedSegments(cacheTopology.getWriteConsistentHash());
        if (trace) {
          log.tracef("On cache %s we have: added segments: %s",cacheName,addedSegments);
        }
      }
 else {
        Set<Integer> previousSegments=getOwnedSegments(previousWriteCh);
        Set<Integer> newSegments=getOwnedSegments(cacheTopology.getWriteConsistentHash());
        Set<Integer> removedSegments=new HashSet<Integer>(previousSegments);
        removedSegments.removeAll(newSegments);
        addedSegments=new HashSet<Integer>(newSegments);
        addedSegments.removeAll(previousSegments);
        if (trace) {
          log.tracef("On cache %s we have: removed segments: %s; new segments: %s; old segments: %s; added segments: %s",cacheName,removedSegments,newSegments,previousSegments,addedSegments);
        }
        cancelTransfers(removedSegments);
        invalidateSegments(newSegments,removedSegments);
        Set<Address> members=new HashSet<Address>(cacheTopology.getReadConsistentHash().getMembers());
synchronized (this) {
          for (Iterator<Address> it=transfersBySource.keySet().iterator(); it.hasNext(); ) {
            Address source=it.next();
            if (!members.contains(source)) {
              if (trace) {
                log.tracef("Removing inbound transfers from source %s for cache %s",source,cacheName);
              }
              List<InboundTransferTask> inboundTransfers=transfersBySource.get(source);
              it.remove();
              for (              InboundTransferTask inboundTransfer : inboundTransfers) {
                if (trace) {
                  log.tracef("Removing inbound transfers for segments %s from source %s for cache %s",inboundTransfer.getSegments(),source,cacheName);
                }
                taskQueue.remove(inboundTransfer);
                inboundTransfer.terminate();
                transfersBySegment.keySet().removeAll(inboundTransfer.getSegments());
                addedSegments.addAll(inboundTransfer.getUnfinishedSegments());
              }
            }
          }
          addedSegments.removeAll(transfersBySegment.keySet());
        }
      }
      if (!addedSegments.isEmpty()) {
        addTransfers(addedSegments);
      }
    }
    log.tracef("Topology update processed, rebalanceInProgress = %s, isRebalance = %s, pending CH = %s",rebalanceInProgress.get(),isRebalance,cacheTopology.getPendingCH());
    if (rebalanceInProgress.get()) {
      if (!isRebalance && cacheTopology.getPendingCH() == null) {
        boolean changed=rebalanceInProgress.compareAndSet(true,false);
        if (changed) {
          cacheNotifier.notifyDataRehashed(previousReadCh,cacheTopology.getCurrentCH(),cacheTopology.getTopologyId(),false);
        }
      }
    }
  }
  finally {
    stateTransferLock.notifyTransactionDataReceived(cacheTopology.getTopologyId());
    if (activeTopologyUpdates.decrementAndGet() == 0) {
      notifyEndOfTopologyUpdate(cacheTopology.getTopologyId());
    }
  }
}
