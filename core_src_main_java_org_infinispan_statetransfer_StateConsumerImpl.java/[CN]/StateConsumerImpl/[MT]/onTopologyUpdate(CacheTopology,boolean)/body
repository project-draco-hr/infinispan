{
  final boolean isMember=cacheTopology.getMembers().contains(rpcManager.getAddress());
  if (trace)   log.tracef("Received new topology for cache %s, isRebalance = %b, isMember = %b, topology = %s",cacheName,isRebalance,isMember,cacheTopology);
  if (!ownsData && isMember) {
    ownsData=true;
  }
 else   if (ownsData && !isMember) {
    ownsData=false;
  }
  if (isRebalance) {
    stateTransferTopologyId.compareAndSet(NO_REBALANCE_IN_PROGRESS,cacheTopology.getTopologyId());
    cacheNotifier.notifyDataRehashed(cacheTopology.getCurrentCH(),cacheTopology.getPendingCH(),cacheTopology.getUnionCH(),cacheTopology.getTopologyId(),true);
  }
  awaitTotalOrderTransactions(cacheTopology,isRebalance);
  waitingForState.set(false);
  final ConsistentHash newReadCh=cacheTopology.getReadConsistentHash();
  final ConsistentHash newWriteCh=cacheTopology.getWriteConsistentHash();
  final ConsistentHash previousReadCh=this.cacheTopology != null ? this.cacheTopology.getReadConsistentHash() : null;
  final ConsistentHash previousWriteCh=this.cacheTopology != null ? this.cacheTopology.getWriteConsistentHash() : null;
  stateTransferLock.acquireExclusiveTopologyLock();
  this.cacheTopology=cacheTopology;
  if (isRebalance) {
    if (trace)     log.tracef("Start keeping track of keys for rebalance");
    commitManager.stopTrack(PUT_FOR_STATE_TRANSFER);
    commitManager.startTrack(PUT_FOR_STATE_TRANSFER);
  }
  stateTransferLock.releaseExclusiveTopologyLock();
  stateTransferLock.notifyTopologyInstalled(cacheTopology.getTopologyId());
  try {
    if (isTransactional || isFetchEnabled) {
      Set<Integer> addedSegments;
      if (previousWriteCh == null) {
        addedSegments=getOwnedSegments(newWriteCh);
        if (configuration.clustering().cacheMode().isDistributed()) {
          Collection<DistributedCallable> callables=getClusterListeners(cacheTopology);
          for (          DistributedCallable callable : callables) {
            callable.setEnvironment(cache,null);
            try {
              callable.call();
            }
 catch (            Exception e) {
              log.clusterListenerInstallationFailure(e);
            }
          }
        }
        if (trace) {
          log.tracef("On cache %s we have: added segments: %s",cacheName,addedSegments);
        }
      }
 else {
        Set<Integer> previousSegments=getOwnedSegments(previousWriteCh);
        Set<Integer> newSegments=getOwnedSegments(newWriteCh);
        Set<Integer> removedSegments=new HashSet<Integer>(previousSegments);
        removedSegments.removeAll(newSegments);
        addedSegments=new HashSet<Integer>(newSegments);
        addedSegments.removeAll(previousSegments);
        if (trace) {
          log.tracef("On cache %s we have: new segments: %s; old segments: %s",cacheName,newSegments,previousSegments);
          log.tracef("On cache %s we have: added segments: %s; removed segments: %s",addedSegments,removedSegments);
        }
        cancelTransfers(removedSegments);
        restartBrokenTransfers(cacheTopology,addedSegments);
      }
      if (!addedSegments.isEmpty()) {
        addTransfers(addedSegments);
      }
    }
    int rebalanceTopologyId=stateTransferTopologyId.get();
    if (trace)     log.tracef("Topology update processed, stateTransferTopologyId = %s, isRebalance = %s, pending CH = %s",rebalanceTopologyId,isRebalance,cacheTopology.getPendingCH());
    if (rebalanceTopologyId != NO_REBALANCE_IN_PROGRESS) {
      if (!isRebalance && cacheTopology.getPendingCH() == null) {
        boolean changed=stateTransferTopologyId.compareAndSet(rebalanceTopologyId,NO_REBALANCE_IN_PROGRESS);
        if (changed) {
          stopApplyingState();
          cacheNotifier.notifyDataRehashed(previousReadCh,cacheTopology.getCurrentCH(),previousWriteCh,cacheTopology.getTopologyId(),false);
          if (trace) {
            log.tracef("Unlock State Transfer in Progress for topology ID %s",cacheTopology.getTopologyId());
          }
          if (isTotalOrder) {
            totalOrderManager.notifyStateTransferEnd();
          }
        }
      }
    }
  }
  finally {
    stateTransferLock.notifyTransactionDataReceived(cacheTopology.getTopologyId());
    remoteCommandsExecutor.checkForReadyTasks();
    if (stateTransferTopologyId.get() != NO_REBALANCE_IN_PROGRESS) {
      waitingForState.set(true);
    }
    notifyEndOfRebalanceIfNeeded(cacheTopology.getTopologyId(),cacheTopology.getRebalanceId());
    if (transactionTable != null) {
      transactionTable.cleanupLeaverTransactions(rpcManager.getTransport().getMembers());
    }
    Set<Integer> removedSegments;
    boolean wasMember=previousWriteCh != null ? previousWriteCh.getMembers().contains(rpcManager.getAddress()) : false;
    if (isMember || (!isMember && wasMember)) {
      removedSegments=new HashSet<>(newWriteCh.getNumSegments());
      for (int i=0; i < newWriteCh.getNumSegments(); i++) {
        removedSegments.add(i);
      }
      Set<Integer> newSegments=getOwnedSegments(newWriteCh);
      removedSegments.removeAll(newSegments);
      try {
        removeStaleData(removedSegments);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new CacheException(e);
      }
    }
  }
}
