{
  int h=hash(k.hashCode());
  Segment s=segmentFor(h);
  s.lock();
  LinkedEntry le=null;
  Aux before=null, after=null;
  boolean newEntry=false;
  try {
    le=s.get(k,h);
    InternalCacheEntry ice=le == null ? null : le.entry;
    if (ice == null) {
      newEntry=true;
      ice=InternalEntryFactory.create(k,v,lifespan,maxIdle);
      le=new LinkedEntry();
      le.lock();
      after=new Aux();
      after.lock();
      le.next=after;
      after.next=dummyEntry;
    }
 else {
      ice.setValue(v);
      ice=ice.setLifespan(lifespan).setMaxIdle(maxIdle);
      updateLinks(le);
    }
    le.entry=ice;
    s.locklessPut(k,h,le);
    if (newEntry) {
      dummyEntry.lock();
      (before=dummyEntry.prev).lock();
      before.next=le;
      le.prev=before;
      dummyEntry.prev=after;
    }
  }
  finally {
    if (newEntry) {
      if (le != null) {
        before.unlock();
        dummyEntry.unlock();
        after.unlock();
        le.unlock();
      }
    }
    s.unlock();
  }
}
