{
  ExecutorCompletionService<Void> ecs=new ExecutorCompletionService<Void>(executor);
  Future<Void> future=ecs.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      Connection conn=null;
      PreparedStatement ps=null;
      ResultSet rs=null;
      try {
        String sql=tableManipulation.getLoadNonExpiredAllRowsSql();
        if (log.isTraceEnabled()) {
          log.tracef("Running sql %s",sql);
        }
        conn=connectionFactory.getConnection();
        ps=conn.prepareStatement(sql);
        ps.setLong(1,ctx.getTimeService().wallClockTime());
        rs=ps.executeQuery();
        rs.setFetchSize(tableManipulation.getFetchSize());
        TaskContext taskContext=new TaskContextImpl();
        while (rs.next()) {
          String keyStr=rs.getString(2);
          Object key=((TwoWayKey2StringMapper)key2StringMapper).getKeyMapping(keyStr);
          if (taskContext.isStopped())           break;
          if (filter != null && !filter.accept(key))           continue;
          InputStream inputStream=rs.getBinaryStream(1);
          MarshalledEntry entry;
          if (fetchValue || fetchMetadata) {
            KeyValuePair<ByteBuffer,ByteBuffer> kvp=JdbcUtil.unmarshall(ctx.getMarshaller(),inputStream);
            entry=ctx.getMarshalledEntryFactory().newMarshalledEntry(key,kvp.getKey(),kvp.getValue());
          }
 else {
            entry=ctx.getMarshalledEntryFactory().newMarshalledEntry(key,(Object)null,null);
          }
          task.processEntry(entry,taskContext);
        }
        return null;
      }
 catch (      SQLException e) {
        log.sqlFailureFetchingAllStoredEntries(e);
        throw new PersistenceException("SQL error while fetching all StoredEntries",e);
      }
 finally {
        JdbcUtil.safeClose(rs);
        JdbcUtil.safeClose(ps);
        connectionFactory.releaseConnection(conn);
      }
    }
  }
);
  try {
    future.get();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
catch (  ExecutionException e) {
    log.errorExecutingParallelStoreTask(e);
    throw new PersistenceException(e);
  }
}
