{
  final int concurrencyLevel=configuration.locking().concurrencyLevel();
  localTransactions=CollectionFactory.makeConcurrentMap(concurrencyLevel,0.75f,concurrencyLevel);
  globalToLocalTransactions=CollectionFactory.makeConcurrentMap(concurrencyLevel,0.75f,concurrencyLevel);
  if (configuration.clustering().cacheMode().isClustered()) {
    minTopologyRecalculationLock=new ReentrantLock();
    remoteTransactions=CollectionFactory.makeConcurrentMap(concurrencyLevel,0.75f,concurrencyLevel);
    notifier.addListener(this);
    clustered=true;
  }
  boolean transactional=configuration.transaction().transactionMode().isTransactional();
  boolean totalOrder=configuration.transaction().transactionProtocol().isTotalOrder();
  if (clustered && transactional && !totalOrder) {
    completedTransactionsInfo=new CompletedTransactionsInfo();
    ThreadFactory tf=new ThreadFactory(){
      @Override public Thread newThread(      Runnable r){
        String address=rpcManager != null ? rpcManager.getTransport().getAddress().toString() : "local";
        Thread th=new Thread(r,"TxCleanupService," + cacheName + ","+ address);
        th.setDaemon(true);
        return th;
      }
    }
;
    executorService=Executors.newSingleThreadScheduledExecutor(tf);
    long interval=configuration.transaction().reaperWakeUpInterval();
    executorService.scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        completedTransactionsInfo.cleanupCompletedTransactions();
      }
    }
,interval,interval,TimeUnit.MILLISECONDS);
    executorService.scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        cleanupOrphanedTransactions();
      }
    }
,interval,interval,TimeUnit.MILLISECONDS);
  }
}
