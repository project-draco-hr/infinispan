{
  Class<?> bean=findBean(beans,treeNode.getName(),treeNode.getParent().getName());
  if (bean == null) {
    log.warn("Did not find bean for node " + treeNode + ". Verify annotations on all AbstractConfigurationBeans");
    return;
  }
  for (  Method m : bean.getMethods()) {
    ConfigurationAttribute a=m.getAnnotation(ConfigurationAttribute.class);
    boolean childElement=a != null && a.containingElement().equals(treeNode.getName());
    if (childElement) {
      String type="";
      if (isSetterMethod(m)) {
        type=m.getParameterTypes()[0].getSimpleName();
        type=type.toLowerCase();
      }
      Element att=xmldoc.createElement("xs:attribute");
      att.setAttribute("name",a.name());
      boolean hasRestriction=a.allowedValues().length() > 0;
      if (!hasRestriction) {
        att.setAttribute("type","xs:" + type);
      }
 else {
        Element simpleType=xmldoc.createElement("xs:simpleType");
        att.appendChild(simpleType);
        Element restriction=xmldoc.createElement("xs:restriction");
        restriction.setAttribute("base","xs:" + type);
        simpleType.appendChild(restriction);
        String[] values=a.allowedValues().split(",");
        for (        String constraint : values) {
          Element restrictionValue=xmldoc.createElement("xs:enumeration");
          restrictionValue.setAttribute("value",constraint.trim());
          restriction.appendChild(restrictionValue);
        }
      }
      complexType.appendChild(att);
    }
  }
}
