{
  if (annotations.isEmpty()) {
    return "";
  }
  StringBuilder builder=new StringBuilder();
  builder.append('[');
  List<Annotation> annotationList=new ArrayList<Annotation>(annotations.size());
  annotationList.addAll(annotations);
  Collections.sort(annotationList,AnnotationComparator.INSTANCE);
  for (  Annotation a : annotationList) {
    builder.append('@');
    builder.append(a.annotationType().getName());
    builder.append('(');
    Method[] declaredMethods=a.annotationType().getDeclaredMethods();
    List<Method> methods=new ArrayList<Method>(declaredMethods.length);
    for (    Method m : declaredMethods) {
      methods.add(m);
    }
    Collections.sort(methods,MethodComparator.INSTANCE);
    for (int i=0; i < methods.size(); ++i) {
      Method method=methods.get(i);
      try {
        Object value=method.invoke(a);
        builder.append(method.getName());
        builder.append('=');
        builder.append(value.toString());
      }
 catch (      NullPointerException e) {
        throw new RuntimeException("NullPointerException accessing annotation member, annotation:" + a.annotationType().getName() + " member: "+ method.getName(),e);
      }
catch (      IllegalArgumentException e) {
        throw new RuntimeException("IllegalArgumentException accessing annotation member, annotation:" + a.annotationType().getName() + " member: "+ method.getName(),e);
      }
catch (      IllegalAccessException e) {
        throw new RuntimeException("IllegalAccessException accessing annotation member, annotation:" + a.annotationType().getName() + " member: "+ method.getName(),e);
      }
catch (      InvocationTargetException e) {
        throw new RuntimeException("InvocationTargetException accessing annotation member, annotation:" + a.annotationType().getName() + " member: "+ method.getName(),e);
      }
      if (i + 1 != methods.size()) {
        builder.append(',');
      }
    }
    builder.append(')');
  }
  builder.append(']');
  return builder.toString();
}
