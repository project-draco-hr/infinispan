{
  ByteString cacheName=ByteString.fromString(EmbeddedCacheManager.DEFAULT_CACHE_NAME);
  ClusteredGetCommand c2=new ClusteredGetCommand("key",cacheName,EnumUtil.EMPTY_BIT_SET,false,null,AnyEquivalence.getInstance());
  marshallAndAssertEquality(c2);
  GetKeyValueCommand c4=new GetKeyValueCommand("key",EnumUtil.EMPTY_BIT_SET);
  marshallAndAssertEquality(c4);
  PutKeyValueCommand c5=new PutKeyValueCommand("k","v",false,null,new EmbeddedMetadata.Builder().build(),EnumUtil.EMPTY_BIT_SET,AnyEquivalence.getInstance(),CommandInvocationId.generateId(null));
  marshallAndAssertEquality(c5);
  RemoveCommand c6=new RemoveCommand("key",null,null,EnumUtil.EMPTY_BIT_SET,AnyEquivalence.getInstance(),CommandInvocationId.generateId(null));
  marshallAndAssertEquality(c6);
  InvalidateCommand c7=new InvalidateCommand(null,EnumUtil.EMPTY_BIT_SET,CommandInvocationId.generateId(null),"key1","key2");
  marshallAndAssertEquality(c7);
  InvalidateCommand c71=new InvalidateL1Command(null,null,null,EnumUtil.EMPTY_BIT_SET,CommandInvocationId.generateId(null),"key1","key2");
  marshallAndAssertEquality(c71);
  ReplaceCommand c8=new ReplaceCommand("key","oldvalue","newvalue",null,new EmbeddedMetadata.Builder().build(),EnumUtil.EMPTY_BIT_SET,AnyEquivalence.getInstance(),CommandInvocationId.generateId(null));
  marshallAndAssertEquality(c8);
  ClearCommand c9=new ClearCommand();
  marshallAndAssertEquality(c9);
  Map<Integer,GlobalTransaction> m1=new HashMap<Integer,GlobalTransaction>();
  for (int i=0; i < 10; i++) {
    GlobalTransaction gtx=gtf.newGlobalTransaction(new JGroupsAddress(new IpAddress(1000 * i)),false);
    m1.put(1000 * i,gtx);
  }
  PutMapCommand c10=new PutMapCommand(m1,null,new EmbeddedMetadata.Builder().build(),EnumUtil.EMPTY_BIT_SET,CommandInvocationId.generateId(null));
  marshallAndAssertEquality(c10);
  Address local=new JGroupsAddress(new IpAddress(12345));
  GlobalTransaction gtx=gtf.newGlobalTransaction(local,false);
  PrepareCommand c11=new PrepareCommand(cacheName,gtx,true,c5,c6,c8,c10);
  marshallAndAssertEquality(c11);
  CommitCommand c12=new CommitCommand(cacheName,gtx);
  marshallAndAssertEquality(c12);
  RollbackCommand c13=new RollbackCommand(cacheName,gtx);
  marshallAndAssertEquality(c13);
  TotalOrderNonVersionedPrepareCommand c14=new TotalOrderNonVersionedPrepareCommand(cacheName,gtx,c5,c6,c8,c10);
  marshallAndAssertEquality(c14);
  TotalOrderVersionedPrepareCommand c15=new TotalOrderVersionedPrepareCommand(cacheName,gtx,Arrays.<WriteCommand>asList(c5,c10),true);
  c15.setVersionsSeen(new EntryVersionsMap());
  marshallAndAssertEquality(c15);
  TotalOrderRollbackCommand c16=new TotalOrderRollbackCommand(cacheName,gtx);
  marshallAndAssertEquality(c16);
  TotalOrderCommitCommand c17=new TotalOrderCommitCommand(cacheName,gtx);
  marshallAndAssertEquality(c17);
  TotalOrderVersionedCommitCommand c18=new TotalOrderVersionedCommitCommand(cacheName,gtx);
  marshallAndAssertEquality(c18);
}
