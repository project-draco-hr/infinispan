{
  KeyFilter kf=new KeyFilter(){
    @Override public boolean accept(    Object key){
      return key.toString().equals("accept");
    }
  }
;
  n=new CacheNotifierImpl();
  mockCache=mock(Cache.class,RETURNS_DEEP_STUBS);
  Configuration config=mock(Configuration.class,RETURNS_DEEP_STUBS);
  when(mockCache.getAdvancedCache().getStatus()).thenReturn(ComponentStatus.INITIALIZING);
  Answer answer=new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return Mockito.mock((Class)invocationOnMock.getArguments()[0]);
    }
  }
;
  when(mockCache.getAdvancedCache().getComponentRegistry().getComponent(any(Class.class))).then(answer);
  when(mockCache.getAdvancedCache().getComponentRegistry().getComponent(any(Class.class),anyString())).then(answer);
  n.injectDependencies(mockCache,new ClusteringDependentLogic.LocalLogic(),null,config,mock(DistributionManager.class),mock(InternalEntryFactory.class),mock(ClusterEventManager.class));
  cl=new CacheListener();
  n.start();
  n.addListener(cl,kf);
  ctx=new NonTxInvocationContext(null,AnyEquivalence.getInstance());
}
