{
  DefaultEvictionListener evictionListener;
switch (policy) {
case PIGGYBACK:
case DEFAULT:
    evictionListener=new DefaultEvictionListener();
  break;
default :
throw new IllegalArgumentException("No such eviction thread policy " + strategy);
}
Eviction eviction;
switch (strategy) {
case FIFO:
case UNORDERED:
case LRU:
eviction=Eviction.LRU;
break;
case LIRS:
eviction=Eviction.LIRS;
if (thresholdPolicy == EvictionType.MEMORY) {
throw new IllegalArgumentException("Memory based approximation eviction cannot be used with LIRS!");
}
break;
default :
throw new IllegalArgumentException("No such eviction strategy " + strategy);
}
EntrySizeCalculator<K,InternalCacheEntry<K,V>> sizeCalculator=thresholdPolicy == EvictionType.MEMORY ? new CacheEntrySizeCalculator<>(new MarshalledValueEntrySizeCalculator()) : null;
entries=new BoundedEquivalentConcurrentHashMapV8<>(thresholdSize,eviction,evictionListener,keyEquivalence,AnyEquivalence.getInstance(),sizeCalculator);
}
