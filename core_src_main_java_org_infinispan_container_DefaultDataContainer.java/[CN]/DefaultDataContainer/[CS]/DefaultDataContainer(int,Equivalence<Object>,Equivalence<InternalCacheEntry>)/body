{
  entries=CollectionFactory.makeConcurrentParallelMap(128,concurrencyLevel,keyEq,valueEq);
  evictionListener=null;
  extendedMap=new ExtendedMap(){
    @Override public void evict(    Object key){
      ((EquivalentConcurrentHashMapV8<Object,InternalCacheEntry>)entries).computeIfPresent(key,new EquivalentConcurrentHashMapV8.BiFun<Object,InternalCacheEntry,InternalCacheEntry>(){
        @Override public InternalCacheEntry apply(        Object o,        InternalCacheEntry entry){
          passivator.passivate(entry);
          return null;
        }
      }
);
    }
    @Override public void compute(    Object key,    final ComputeAction action){
      ((EquivalentConcurrentHashMapV8<Object,InternalCacheEntry>)entries).compute(key,new EquivalentConcurrentHashMapV8.BiFun<Object,InternalCacheEntry,InternalCacheEntry>(){
        @Override public InternalCacheEntry apply(        Object key,        InternalCacheEntry oldEntry){
          InternalCacheEntry newEntry=action.compute(key,oldEntry,entryFactory);
          if (newEntry == oldEntry) {
            return oldEntry;
          }
 else           if (newEntry == null) {
            return null;
          }
          if (oldEntry == null) {
            activator.activate(key);
          }
          if (trace)           log.tracef("Store %s in container",newEntry);
          return newEntry;
        }
      }
);
    }
    @Override public void putAndActivate(    final InternalCacheEntry newEntry){
      ((EquivalentConcurrentHashMapV8<Object,InternalCacheEntry>)entries).compute(newEntry.getKey(),new EquivalentConcurrentHashMapV8.BiFun<Object,InternalCacheEntry,InternalCacheEntry>(){
        @Override public InternalCacheEntry apply(        Object key,        InternalCacheEntry entry){
          if (entry == null) {
            activator.activate(key);
          }
          return newEntry;
        }
      }
);
    }
  }
;
}
