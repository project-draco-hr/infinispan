{
  assertEquals(config.balancingStrategy().getName(),getRequestBalancingStrategyProperty(rc));
  String servers=getServerListProperty(rc);
  for (  ServerConfiguration scfg : config.servers()) {
    boolean found=false;
    String host;
    int port=ConfigurationProperties.DEFAULT_HOTROD_PORT;
    Pattern patternIpv6=Pattern.compile(IPV6_REGEX);
    Pattern patternIpv4=Pattern.compile(IPV4_REGEX);
    for (    String server : servers.split(";")) {
      Matcher matcher6=patternIpv6.matcher(server);
      Matcher matcher4=patternIpv4.matcher(server);
      if (matcher6.matches()) {
        host=matcher6.group(1);
        port=Integer.parseInt(matcher6.group(2));
      }
 else       if (matcher4.matches()) {
        host=matcher4.group(1);
        port=Integer.parseInt(matcher4.group(2));
      }
 else {
        host=server;
      }
      if (scfg.host().equals(host) && scfg.port() == port)       found=true;
    }
    if (!found)     fail("The remote cache manager was configured to have server with an address " + scfg.host() + ":"+ scfg.port()+ ", but it doesn't.");
  }
  assertEquals(config.forceReturnValues(),Boolean.parseBoolean(getForceReturnValueProperty(rc)));
  assertEquals(config.tcpNoDelay(),Boolean.parseBoolean(getTcpNoDelayProperty(rc)));
  assertEquals(config.tcpKeepAlive(),Boolean.parseBoolean(getTcpKeepAliveProperty(rc)));
  assertEquals(config.maxRetries(),Integer.parseInt(getMaxRetries(rc)));
  assertEquals(config.pingOnStartup(),rc.getRemoteCacheManager().getConfiguration().pingOnStartup());
  assertEquals(config.asyncExecutorFactory().factoryClass().getName(),rc.getRemoteCacheManager().getConfiguration().asyncExecutorFactory().factoryClass().getName());
  assertEquals(config.transportFactory().getName(),getTransportFactoryProperty(rc));
  if (config.marshaller() != null) {
    assertEquals(config.marshaller().getClass().getName(),getMarshallerProperty(rc));
  }
 else {
    assertEquals(config.marshallerClass().getName(),getMarshallerProperty(rc));
  }
  rc.stats();
  if (isDistributedMode()) {
    assertEquals(config.consistentHashImpl(3).getName(),getHashFunctionImplProperty(rc));
  }
  assertEquals(config.keySizeEstimate(),getKeySizeEstimateProperty(rc));
  assertEquals(config.valueSizeEstimate(),getValueSizeEstimateProperty(rc));
}
