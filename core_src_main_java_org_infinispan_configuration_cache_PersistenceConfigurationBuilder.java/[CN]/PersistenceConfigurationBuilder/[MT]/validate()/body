{
  int numFetchPersistentState=0;
  for (  StoreConfigurationBuilder<?,?> b : stores) {
    b.validate();
    StoreConfiguration storeConfiguration=b.create();
    if (storeConfiguration.shared() && storeConfiguration.singletonStore().enabled()) {
      throw new CacheConfigurationException("Invalid cache loader configuration for " + storeConfiguration.getClass().getSimpleName() + "  If a cache loader is configured as a singleton, the cache loader cannot be shared in a cluster!");
    }
    if (!storeConfiguration.shared() && storeConfiguration.transactional()) {
      throw new CacheConfigurationException("Invalid cache loader configuration for " + storeConfiguration.getClass().getSimpleName() + ". In order for a cache loader to be transactional, it must also be shared.");
    }
    if (storeConfiguration.async().enabled() && storeConfiguration.transactional()) {
      throw new CacheConfigurationException("Invalid cache loader configuration for " + storeConfiguration.getClass().getSimpleName() + ". A cache loader cannot be both Asynchronous and transactional.");
    }
    if (storeConfiguration.fetchPersistentState())     numFetchPersistentState++;
  }
  if (numFetchPersistentState > 1)   throw new CacheConfigurationException("Maximum one store can be set to 'fetchPersistentState'!");
  if (!stores.isEmpty()) {
    boolean reaperEnabled=builder.expiration().reaperEnabled();
    long wakeupInterval=builder.expiration().wakeupInterval();
    if (!reaperEnabled || wakeupInterval < 0) {
      builder.expiration().enableReaper();
      if (wakeupInterval < 0) {
        log.debug("Store present and expiration reaper wakeup was less than 0 - explicitly enabling and setting " + "wakeup interval to 1 minute.");
        builder.expiration().wakeUpInterval(1,TimeUnit.MINUTES);
      }
 else {
        log.debug("Store present however expiration reaper was not enabled - explicitly enabling.");
      }
    }
  }
}
