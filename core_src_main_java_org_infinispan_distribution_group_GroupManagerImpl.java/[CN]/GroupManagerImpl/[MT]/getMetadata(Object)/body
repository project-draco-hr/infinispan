{
  final Class<?> keyClass=key.getClass();
  if (!groupMetadataCache.containsKey(keyClass)) {
    Callable<GroupMetadata> c=new Callable<GroupMetadata>(){
      @Override public GroupMetadata call() throws Exception {
        return createGroupMetadata(keyClass);
      }
    }
;
    FutureTask<GroupMetadata> ft=new FutureTask<GroupMetadata>(c);
    if (groupMetadataCache.putIfAbsent(keyClass,ft) == null) {
      ft.run();
    }
  }
  try {
    return groupMetadataCache.get(keyClass).get();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    return null;
  }
catch (  ExecutionException e) {
    throw new IllegalStateException("Error extracting @Group from class hierarchy",e);
  }
}
