{
  System.out.println(TreeStructureSupport.printTree(cache1,true));
  Node<Object,Object> rootNode=cache1.getRoot();
  Node<Object,Object> nodeA=rootNode.addChild(A);
  Node<Object,Object> nodeB=nodeA.addChild(B);
  nodeA.put(k,vA);
  nodeB.put(k,vB);
  assertEquals(vA,cache1.getRoot().getChild(A).get(k));
  assertEquals(vB,cache1.getRoot().getChild(A).getChild(B).get(k));
  assertEquals(vA,cache2.getRoot().getChild(A).get(k));
  assertEquals(vB,cache2.getRoot().getChild(A).getChild(B).get(k));
  System.out.println(TreeStructureSupport.printTree(cache1,true));
  tm1.begin();
  cache1.move(nodeB.getFqn(),Fqn.ROOT);
  assertEquals(vA,cache1.get(A,k));
  assertEquals(vB,cache1.get(B,k));
  tm1.rollback();
  System.out.println(TreeStructureSupport.printTree(cache1,true));
  assertEquals(vA,cache1.getRoot().getChild(A).get(k));
  assertEquals(vB,cache1.getRoot().getChild(A).getChild(B).get(k));
  assertEquals(vA,cache2.getRoot().getChild(A).get(k));
  assertEquals(vB,cache2.getRoot().getChild(A).getChild(B).get(k));
}
