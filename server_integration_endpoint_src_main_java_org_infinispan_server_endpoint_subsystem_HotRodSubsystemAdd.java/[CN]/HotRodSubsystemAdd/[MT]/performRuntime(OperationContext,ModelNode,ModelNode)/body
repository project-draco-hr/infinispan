{
  ModelNode config=Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
  HotRodServerConfigurationBuilder configurationBuilder=new HotRodServerConfigurationBuilder();
  configureProtocolServer(configurationBuilder,config);
  configureProtocolServerAuthentication(configurationBuilder,config);
  configureProtocolServerTopology(configurationBuilder,config);
  final ProtocolServerService service=new ProtocolServerService(getServiceName(operation),HotRodServer.class,configurationBuilder);
  final ServiceName hotRodServerServiceName=EndpointUtils.getServiceName(operation,"hotrod");
  ServiceBuilder<?> builder=context.getServiceTarget().addService(hotRodServerServiceName,service);
  String cacheContainerName=getCacheContainerName(operation);
  EndpointUtils.addCacheContainerConfigurationDependency(builder,cacheContainerName,service.getCacheManagerConfiguration());
  EndpointUtils.addCacheContainerDependency(builder,cacheContainerName,service.getCacheManager());
  EndpointUtils.addCacheDependency(builder,cacheContainerName,null);
  EndpointUtils.addSocketBindingDependency(builder,getSocketBindingName(operation),service.getSocketBinding());
  EncryptableSubsystemHelper.processEncryption(config,service,builder);
  processAuthentication(config,configurationBuilder,service,builder);
  builder.addDependency(Constants.EXTENSION_MANAGER_NAME,ExtensionManagerService.class,service.getExtensionManager());
  builder.install();
}
