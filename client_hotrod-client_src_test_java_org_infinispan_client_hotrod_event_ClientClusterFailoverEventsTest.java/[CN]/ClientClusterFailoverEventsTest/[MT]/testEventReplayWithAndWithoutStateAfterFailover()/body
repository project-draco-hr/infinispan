{
  ConfigurationBuilder base=getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC,false);
  ConfigurationBuilder builder=hotRodCacheConfiguration(base);
  createHotRodServers(2,builder);
  injectTimeServices();
  try {
    final Integer key00=HotRodClientTestingUtil.getIntKeyForServer(server(0));
    final Integer key10=HotRodClientTestingUtil.getIntKeyForServer(server(0));
    final Integer key11=HotRodClientTestingUtil.getIntKeyForServer(server(1));
    final Integer key21=HotRodClientTestingUtil.getIntKeyForServer(server(1));
    final Integer key31=HotRodClientTestingUtil.getIntKeyForServer(server(1));
    final Integer key41=HotRodClientTestingUtil.getIntKeyForServer(server(1));
    org.infinispan.client.hotrod.configuration.ConfigurationBuilder clientBuilder=new org.infinispan.client.hotrod.configuration.ConfigurationBuilder();
    HotRodServer server=server(0);
    clientBuilder.addServers(server.getHost() + ":" + server.getPort());
    clientBuilder.balancingStrategy(StickyServerLoadBalancingStrategy.class);
    RemoteCacheManager newClient=new RemoteCacheManager(clientBuilder.build());
    try {
      WithStateEventLogListener<Integer> statefulListener=new WithStateEventLogListener<>();
      EventLogListener<Integer> statelessListener=new EventLogListener<>();
      FailoverEventLogListener<Integer> failoverListener=new FailoverEventLogListener<>();
      RemoteCache<Integer,String> c=newClient.getCache();
      c.addClientListener(statelessListener);
      c.addClientListener(statefulListener);
      c.addClientListener(failoverListener);
      c.put(key00,"zero");
      statefulListener.expectOnlyCreatedEvent(key00,cache(0));
      statelessListener.expectOnlyCreatedEvent(key00,cache(0));
      failoverListener.expectOnlyCreatedEvent(key00,cache(0));
      c.put(key10,"one",1000,TimeUnit.MILLISECONDS);
      statefulListener.expectOnlyCreatedEvent(key10,cache(0));
      statelessListener.expectOnlyCreatedEvent(key10,cache(0));
      failoverListener.expectOnlyCreatedEvent(key10,cache(0));
      c.put(key11,"two");
      statefulListener.expectOnlyCreatedEvent(key11,cache(0));
      statelessListener.expectOnlyCreatedEvent(key11,cache(0));
      failoverListener.expectOnlyCreatedEvent(key11,cache(0));
      c.put(key41,"three",1000,TimeUnit.MILLISECONDS);
      statefulListener.expectOnlyCreatedEvent(key41,cache(0));
      statelessListener.expectOnlyCreatedEvent(key41,cache(0));
      failoverListener.expectOnlyCreatedEvent(key41,cache(0));
      ts0.advance(1001);
      ts1.advance(1001);
      findServerAndKill(newClient,servers,cacheManagers);
      c.put(key21,"four");
      statelessListener.expectNoEvents();
      statefulListener.expectFailoverEvent();
      failoverListener.expectFailoverEvent();
      statelessListener.expectNoEvents();
      failoverListener.expectNoEvents();
      statefulListener.expectUnorderedEvents(ClientEvent.Type.CLIENT_CACHE_ENTRY_CREATED,key00,key11,key21);
      statefulListener.expectNoEvents();
      c.put(key31,"five");
      statefulListener.expectUnorderedEvents(ClientEvent.Type.CLIENT_CACHE_ENTRY_CREATED,key31);
      c.remove(key11);
      c.remove(key21);
      c.remove(key31);
    }
  finally {
      killRemoteCacheManager(newClient);
    }
  }
  finally {
    destroy();
  }
}
