{
  String clClass=storeConfig.getCacheLoaderClassName();
  if (clClass == null || clClass.length() == 0)   throw new ConfigurationException("Missing 'class'  attribute for cache loader configuration");
  CacheLoaderConfig clc;
  try {
    clc=instantiateCacheLoaderConfig(clClass,storeConfig.getClassLoader());
  }
 catch (  Exception e) {
    throw new ConfigurationException("Unable to instantiate cache loader or configuration",e);
  }
  clc.setCacheLoaderClassName(clClass);
  Properties props=storeConfig.getProperties();
  if (props != null)   XmlConfigHelper.setValues(clc,props,false,true);
  if (clc instanceof CacheStoreConfig) {
    CacheStoreConfig csc=(CacheStoreConfig)clc;
    csc.fetchPersistentState(storeConfig.isFetchPersistentState()).ignoreModifications(storeConfig.isIgnoreModifications()).purgeOnStartup(storeConfig.isPurgeOnStartup()).purgeSynchronously(storeConfig.isPurgeSynchronously()).purgerThreads(storeConfig.getPurgerThreads());
    SingletonStoreConfig singletonStoreConfig=storeConfig.getSingletonStoreConfig();
    if (singletonStoreConfig != null) {
      csc.singletonStore().enabled(singletonStoreConfig.isSingletonStoreEnabled()).pushStateTimeout(singletonStoreConfig.getPushStateTimeout());
    }
    AsyncStoreConfig asyncStoreConfig=storeConfig.getAsyncStoreConfig();
    if (asyncStoreConfig != null && asyncStoreConfig.isEnabled()) {
      csc.asyncStore().flushLockTimeout(asyncStoreConfig.getFlushLockTimeout()).shutdownTimeout(asyncStoreConfig.getShutdownTimeout()).threadPoolSize(asyncStoreConfig.getThreadPoolSize());
    }
  }
  return clc;
}
