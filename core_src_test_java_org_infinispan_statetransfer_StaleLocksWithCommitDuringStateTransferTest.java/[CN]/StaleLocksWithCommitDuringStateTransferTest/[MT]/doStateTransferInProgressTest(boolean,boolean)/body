{
  MagicKey k1=new MagicKey("k1",c1);
  MagicKey k2=new MagicKey("k2",c2);
  tm(c1).begin();
  c1.put(k1,"v1");
  c1.put(k2,"v2");
  TransactionTable txTable=TestingUtil.extractComponent(c1,TransactionTable.class);
  TransactionCoordinator txCoordinator=TestingUtil.extractComponent(c1,TransactionCoordinator.class);
  LocalTransaction localTx=txTable.getLocalTransaction(tm(c1).getTransaction());
  txCoordinator.prepare(localTx);
  final CountDownLatch commitLatch=new CountDownLatch(1);
  Thread worker=new Thread("RehasherSim,StaleLocksWithCommitDuringStateTransferTest"){
    @Override public void run(){
      try {
        final StateTransferLock blockFirst=TestingUtil.extractComponent(failOnOriginator ? c1 : c2,StateTransferLock.class);
        final StateTransferLock blockSecond=TestingUtil.extractComponent(failOnOriginator ? c2 : c1,StateTransferLock.class);
        try {
          blockFirst.acquireExclusiveTopologyLock();
          blockSecond.acquireExclusiveTopologyLock();
          commitLatch.countDown();
          Thread.sleep(1000);
        }
  finally {
          blockSecond.releaseExclusiveTopologyLock();
          blockFirst.releaseExclusiveTopologyLock();
        }
      }
 catch (      Throwable t) {
        log.errorf(t,"Error blocking/unblocking transactions");
      }
    }
  }
;
  worker.start();
  commitLatch.await(10,TimeUnit.SECONDS);
  try {
    if (commit) {
      tm(c1).commit();
    }
 else {
      tm(c1).rollback();
    }
    tm(c1).suspend();
  }
  finally {
    worker.join();
  }
  assertEventuallyNotLocked(c1,k1);
  assertEventuallyNotLocked(c2,k1);
  assertEventuallyNotLocked(c1,k2);
  assertEventuallyNotLocked(c2,k2);
}
