{
  this.likePattern=likePattern;
  StringBuilder sb=new StringBuilder(likePattern.length());
  BitSet multi=new BitSet(likePattern.length());
  int multiCount=0;
  BitSet single=new BitSet(likePattern.length());
  int singleCount=0;
  boolean isEscaped=false;
  for (int i=0; i < likePattern.length(); i++) {
    char c=likePattern.charAt(i);
    if (!isEscaped && c == escapeCharacter) {
      isEscaped=true;
    }
 else {
      if (isEscaped) {
        isEscaped=false;
      }
 else {
        if (c == LikeExpr.MULTIPLE_CHARACTERS_WILDCARD) {
          multi.set(sb.length());
          multiCount++;
        }
 else         if (c == LikeExpr.SINGLE_CHARACTER_WILDCARD) {
          single.set(sb.length());
          singleCount++;
        }
      }
      sb.append(c);
    }
  }
  if (multiCount == 0 && singleCount == 0) {
    type=Type.Equals;
    value=sb.toString();
    regexPattern=null;
    length=-1;
  }
 else {
    if (multi.get(0)) {
      if (singleCount == 0) {
        if (multiCount == 1) {
          type=Type.EndsWith;
          value=sb.substring(1);
          length=-1;
          regexPattern=null;
          return;
        }
 else         if (multiCount == 2 && multi.get(sb.length() - 1)) {
          type=Type.Contains;
          value=sb.substring(1,sb.length() - 1);
          length=-1;
          regexPattern=null;
          return;
        }
      }
    }
 else     if (single.get(0)) {
      if (multiCount == 0 && singleCount == 1) {
        type=Type.EndsWith;
        value=sb.substring(1);
        length=sb.length();
        regexPattern=null;
        return;
      }
    }
 else     if (multi.get(sb.length() - 1)) {
      if (multiCount == 1 && singleCount == 0) {
        type=Type.StartsWith;
        value=sb.substring(0,sb.length() - 1);
        length=-1;
        regexPattern=null;
        return;
      }
    }
 else     if (single.get(sb.length() - 1)) {
      if (singleCount == 1 && multiCount == 0) {
        type=Type.StartsWith;
        value=sb.substring(0,sb.length() - 1);
        length=sb.length();
        regexPattern=null;
        return;
      }
    }
    StringBuilder regexpPattern=new StringBuilder(sb.length() + 2);
    regexpPattern.append('^');
    for (int i=0; i < sb.length(); i++) {
      if (multi.get(i)) {
        regexpPattern.append(".*");
      }
 else       if (single.get(i)) {
        regexpPattern.append('.');
      }
 else {
        char c=sb.charAt(i);
switch (c) {
case '+':
case '*':
case '(':
case ')':
case '[':
case ']':
case '$':
case '^':
case '.':
case '{':
case '}':
case '|':
case '\\':
          regexpPattern.append('\\');
default :
        regexpPattern.append(c);
    }
  }
}
regexpPattern.append('$');
type=Type.Regexp;
regexPattern=Pattern.compile(regexpPattern.toString());
value=null;
length=-1;
}
}
