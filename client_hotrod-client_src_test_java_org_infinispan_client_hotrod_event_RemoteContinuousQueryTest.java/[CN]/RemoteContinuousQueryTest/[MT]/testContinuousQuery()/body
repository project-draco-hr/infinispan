{
  User user1=new UserPB();
  user1.setId(1);
  user1.setName("John");
  user1.setSurname("Doe");
  user1.setGender(User.Gender.MALE);
  user1.setAge(22);
  user1.setAccountIds(new HashSet<Integer>(Arrays.asList(1,2)));
  user1.setNotes("Lorem ipsum dolor sit amet");
  User user2=new UserPB();
  user2.setId(2);
  user2.setName("Spider");
  user2.setSurname("Man");
  user2.setGender(User.Gender.MALE);
  user2.setAge(32);
  user2.setAccountIds(Collections.singleton(3));
  User user3=new UserPB();
  user3.setId(3);
  user3.setName("Spider");
  user3.setSurname("Woman");
  user3.setGender(User.Gender.FEMALE);
  user3.setAge(40);
  user3.setAccountIds(Collections.<Integer>emptySet());
  remoteCache.put("user" + user1.getId(),user1);
  remoteCache.put("user" + user2.getId(),user2);
  remoteCache.put("user" + user3.getId(),user3);
  assertEquals(3,remoteCache.size());
  QueryFactory qf=Search.getQueryFactory(remoteCache);
  Query query=qf.from(UserPB.class).having("age").lte(Expression.param("ageParam")).toBuilder().select("age").build().setParameter("ageParam",32);
  final BlockingQueue<Object> joined=new ArrayBlockingQueue<Object>(50);
  final BlockingQueue<Object> left=new ArrayBlockingQueue<Object>(50);
  ContinuousQueryListener listener=new ContinuousQueryListener(){
    @Override public void resultJoining(    Object key,    Object value){
      joined.add(key);
    }
    @Override public void resultLeaving(    Object key){
      left.add(key);
    }
  }
;
  Object clientListener=ClientEvents.addContinuousQueryListener(remoteCache,listener,query);
  assertNotNull(clientListener);
  expectElementsInQueue(joined,2);
  expectElementsInQueue(left,0);
  user3.setAge(30);
  remoteCache.put("user" + user3.getId(),user3);
  expectElementsInQueue(joined,1);
  expectElementsInQueue(left,0);
  user1.setAge(40);
  user2.setAge(40);
  user3.setAge(40);
  remoteCache.put("user" + user1.getId(),user1);
  remoteCache.put("user" + user2.getId(),user2);
  remoteCache.put("user" + user3.getId(),user3);
  expectElementsInQueue(joined,0);
  expectElementsInQueue(left,3);
  remoteCache.removeClientListener(clientListener);
  user2.setAge(22);
  remoteCache.put("user" + user2.getId(),user2);
  expectElementsInQueue(joined,0);
  expectElementsInQueue(left,0);
}
