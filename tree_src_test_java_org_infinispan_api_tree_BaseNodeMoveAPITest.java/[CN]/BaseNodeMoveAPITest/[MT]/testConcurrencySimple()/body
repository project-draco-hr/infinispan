{
  Node<Object,Object> rootNode=treeCache.getRoot();
  final Fqn FQN_A=A, FQN_B=B, FQN_C=C;
  Node nodeA=rootNode.addChild(FQN_A);
  Node nodeB=rootNode.addChild(FQN_B);
  rootNode.addChild(FQN_C);
  final CountDownLatch latch1=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(1);
  final CountDownLatch latch3=new CountDownLatch(1);
  Thread t1=new Thread(new Runnable(){
    public void run(){
      try {
        latch1.await();
        tm().begin();
        try {
          try {
            treeCache.getNode(FQN_C);
          }
  finally {
            latch2.countDown();
          }
          latch3.await();
          treeCache.move(FQN_C,FQN_B);
          tm().commit();
        }
 catch (        Exception e) {
          if (tm().getTransaction() != null) {
            try {
              tm().rollback();
            }
 catch (            SystemException e1) {
              log.error("Failed to rollback",e1);
            }
          }
          throw e;
        }
      }
 catch (      Exception ex) {
        log.error(ex);
      }
    }
  }
,getClass().getSimpleName() + ".Mover-1");
  Thread t2=new Thread(new Runnable(){
    public void run(){
      try {
        latch2.await();
        tm().begin();
        try {
          try {
            treeCache.move(FQN_C,FQN_A);
            tm().commit();
          }
  finally {
            latch3.countDown();
          }
        }
 catch (        Exception e) {
          if (tm().getTransaction() != null) {
            try {
              tm().rollback();
            }
 catch (            SystemException e1) {
              log.error("Failed to rollback",e1);
            }
          }
          throw e;
        }
      }
 catch (      Exception ex) {
        log.error(ex);
      }
    }
  }
,getClass().getSimpleName() + ".Mover-2");
  t1.start();
  t2.start();
  latch1.countDown();
  t1.join();
  t2.join();
  assertNoLocks();
  int foundC=0;
  for (  Node n : new Node[]{rootNode,nodeA,nodeB}) {
    if (n.hasChild(FQN_C)) {
      foundC++;
    }
  }
  log.trace("Tree: " + TreeStructureSupport.printTree(treeCache,true));
  assertEquals("Should have found C only once",1,foundC);
}
