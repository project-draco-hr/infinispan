{
  EntryRetriever retriever=TestingUtil.extractComponent(cache,EntryRetriever.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(retriever);
  EntryRetriever mockRetriever=mock(EntryRetriever.class,withSettings().defaultAnswer(forwardedAnswer));
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      CloseableIterator realIter=(CloseableIterator)forwardedAnswer.answer(invocation);
      final Answer<Object> forwardedIterAnswer=AdditionalAnswers.delegatesTo(realIter);
      CloseableIterator iter=mock(CloseableIterator.class,withSettings().defaultAnswer(forwardedIterAnswer));
      doAnswer(new Answer(){
        @Override public Object answer(        InvocationOnMock invocationOnMock) throws Throwable {
          checkPoint.trigger("pre_close_iter_invoked");
          checkPoint.awaitStrict("pre_close_iter_released",10,TimeUnit.SECONDS);
          return forwardedIterAnswer.answer(invocationOnMock);
        }
      }
).when(iter).close();
      return iter;
    }
  }
).when(mockRetriever).retrieveEntries(any(KeyValueFilter.class),any(Converter.class),anySetOf(Flag.class),any(EntryRetriever.SegmentListener.class));
  TestingUtil.replaceComponent(cache,EntryRetriever.class,mockRetriever,true);
  return retriever;
}
