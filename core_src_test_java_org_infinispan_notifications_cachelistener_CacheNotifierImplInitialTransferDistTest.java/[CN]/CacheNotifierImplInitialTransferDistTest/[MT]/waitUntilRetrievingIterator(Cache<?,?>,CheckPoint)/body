{
  EntryRetriever retriever=TestingUtil.extractComponent(cache,EntryRetriever.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(retriever);
  EntryRetriever mockRetriever=mock(EntryRetriever.class,withSettings().defaultAnswer(forwardedAnswer));
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      checkPoint.trigger("pre_retrieve_entry_invoked");
      checkPoint.awaitStrict("pre_retrieve_entry_released",10,TimeUnit.SECONDS);
      return forwardedAnswer.answer(invocation);
    }
  }
).when(mockRetriever).retrieveEntries(any(KeyValueFilter.class),any(Converter.class),any(EntryRetriever.SegmentListener.class));
  TestingUtil.replaceComponent(cache,EntryRetriever.class,mockRetriever,true);
  return retriever;
}
