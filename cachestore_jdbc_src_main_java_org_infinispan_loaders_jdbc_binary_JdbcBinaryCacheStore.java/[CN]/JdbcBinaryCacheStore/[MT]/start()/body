{
  super.start();
  if (configuration.manageConnectionFactory()) {
    ConnectionFactory factory=ConnectionFactory.getConnectionFactory(configuration.connectionFactory().connectionFactoryClass());
    factory.start(configuration.connectionFactory(),factory.getClass().getClassLoader());
    doConnectionFactoryInitialization(factory);
  }
  dmHelper=new DataManipulationHelper(connectionFactory,tableManipulation,marshaller,timeService){
    @Override protected String getLoadAllKeysSql(){
      return tableManipulation.getLoadAllKeysBinarySql();
    }
    @Override public void loadAllProcess(    ResultSet rs,    Set<InternalCacheEntry> result) throws SQLException, CacheLoaderException {
      Bucket bucket=unmarshallBucket(rs.getBinaryStream(1));
      long currentTimeMillis=timeService.wallClockTime();
      for (      InternalCacheEntry ice : bucket.getStoredEntries()) {
        if (!ice.isExpired(currentTimeMillis)) {
          result.add(ice);
        }
      }
    }
    @Override public void loadAllProcess(    ResultSet rs,    Set<InternalCacheEntry> result,    int maxEntries) throws SQLException, CacheLoaderException {
      Bucket bucket=unmarshallBucket(rs.getBinaryStream(1));
      long currentTimeMillis=timeService.wallClockTime();
      for (      InternalCacheEntry ice : bucket.getStoredEntries()) {
        if (!ice.isExpired(currentTimeMillis))         result.add(ice);
        if (result.size() == maxEntries)         break;
      }
    }
    @Override public void loadAllKeysProcess(    ResultSet rs,    Set<Object> keys,    Set<Object> keysToExclude) throws SQLException, CacheLoaderException {
      Bucket bucket=unmarshallBucket(rs.getBinaryStream(1));
      long currentTimeMillis=timeService.wallClockTime();
      for (      InternalCacheEntry ice : bucket.getStoredEntries()) {
        if (!ice.isExpired(currentTimeMillis) && includeKey(ice.getKey(),keysToExclude)) {
          keys.add(ice.getKey());
        }
      }
    }
    @Override public void toStreamProcess(    ResultSet rs,    InputStream is,    ObjectOutput objectOutput) throws CacheLoaderException, SQLException, IOException {
      Bucket bucket=unmarshallBucket(is);
      String bucketName=rs.getString(2);
      marshaller.objectToObjectStream(bucketName,objectOutput);
      marshaller.objectToObjectStream(bucket.getEntries(),objectOutput);
    }
    @Override public boolean fromStreamProcess(    Object bucketName,    PreparedStatement ps,    ObjectInput objectInput) throws SQLException, CacheLoaderException, IOException, ClassNotFoundException, InterruptedException {
      if (bucketName instanceof String) {
        Map<Object,InternalCacheEntry> entries=(Map<Object,InternalCacheEntry>)marshaller.objectFromObjectStream(objectInput);
        Bucket bucket=new Bucket(timeService,keyEquivalence,entries);
        ByteBuffer buffer=JdbcUtil.marshall(getMarshaller(),bucket.getEntries());
        ps.setBinaryStream(1,buffer.getStream(),buffer.getLength());
        ps.setLong(2,bucket.timestampOfFirstEntryToExpire());
        ps.setString(3,(String)bucketName);
        return true;
      }
 else {
        return false;
      }
    }
  }
;
}
