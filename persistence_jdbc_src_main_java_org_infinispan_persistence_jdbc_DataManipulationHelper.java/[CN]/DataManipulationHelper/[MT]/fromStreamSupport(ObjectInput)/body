{
  Connection conn=null;
  PreparedStatement ps=null;
  try {
    conn=connectionFactory.getConnection();
    String sql=tableManipulation.getInsertRowSql();
    ps=conn.prepareStatement(sql);
    int readCount=0;
    int batchSize=tableManipulation.getBatchSize();
    int batchSizeMinusOne=batchSize - 1;
    Object objFromStream=marshaller.objectFromObjectStream(objectInput);
    while (fromStreamProcess(objFromStream,ps,objectInput)) {
      ps.addBatch();
      readCount++;
      if ((readCount & batchSizeMinusOne) == 0) {
        ps.executeBatch();
        if (log.isTraceEnabled()) {
          log.tracef("Executing batch %s, batch size is %d",readCount / batchSize,batchSize);
        }
      }
      objFromStream=marshaller.objectFromObjectStream(objectInput);
    }
    if ((readCount & batchSizeMinusOne) != 0) {
      ps.executeBatch();
    }
    if (log.isTraceEnabled()) {
      log.tracef("Successfully inserted %d buckets into the database, batch size is %d",readCount,batchSize);
    }
  }
 catch (  IOException ex) {
    log.ioErrorIntegratingState(ex);
    throw new CacheLoaderException("I/O failure while integrating state into store",ex);
  }
catch (  SQLException e) {
    log.sqlFailureIntegratingState(e);
    throw new CacheLoaderException("SQL failure while integrating state into store",e);
  }
catch (  ClassNotFoundException e) {
    log.classNotFoundIntegratingState(e);
    throw new CacheLoaderException("Unexpected failure while integrating state into store",e);
  }
catch (  InterruptedException ie) {
    if (log.isTraceEnabled())     log.trace("Interrupted while reading from stream");
    Thread.currentThread().interrupt();
  }
 finally {
    JdbcUtil.safeClose(ps);
    connectionFactory.releaseConnection(conn);
  }
}
