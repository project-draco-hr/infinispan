{
  int[][] nodeChanges={{1,0},{2,0},{0,1},{0,2},{1,1},{2,2},{10,0},{0,10},{10,10}};
  int numSegments=baseCH.getNumSegments();
  int numOwners=baseCH.getNumOwners();
  assertSame(baseCH,chf.updateConsistentHashMembers(baseCH,baseCH.getMembers()));
  assertSame(baseCH,chf.rebalanceConsistentHash(baseCH,true));
  assertSame(baseCH,chf.rebalanceConsistentHash(baseCH,false));
  int nodeIndex=baseCH.getMembers().size();
  for (int i=0; i < nodeChanges.length; i++) {
    int nodesToAdd=nodeChanges[i][0];
    int nodesToRemove=nodeChanges[i][1];
    if (nodesToRemove > baseCH.getMembers().size())     break;
    List<Address> newMembers=new ArrayList<Address>(baseCH.getMembers());
    for (int k=0; k < nodesToRemove; k++) {
      newMembers.remove(Math.abs(baseCH.getHashFunction().hash(k) % newMembers.size()));
    }
    for (int k=0; k < nodesToAdd; k++) {
      newMembers.add(new TestAddress(nodeIndex++));
    }
    if (newMembers.size() > baseCH.getNumSegments())     break;
    log.debugf("Testing consistent hash modifications iteration %d. Initial CH is %s. New members are %s",iterationCount,baseCH,newMembers);
    NewDefaultConsistentHash updatedMembersCH=(NewDefaultConsistentHash)chf.updateConsistentHashMembers(baseCH,newMembers);
    if (nodesToRemove > 0) {
      for (int l=0; l < updatedMembersCH.getNumSegments(); l++) {
        assertTrue(updatedMembersCH.locateOwnersForSegment(l).size() >= 0);
      }
    }
    NewDefaultConsistentHash inclRebalancedCH=(NewDefaultConsistentHash)chf.rebalanceConsistentHash(updatedMembersCH,true);
    checkDistribution(inclRebalancedCH,true);
    for (int l=0; l < inclRebalancedCH.getNumSegments(); l++) {
      int actualNumOwners=Math.min(inclRebalancedCH.getMembers().size(),inclRebalancedCH.getNumOwners());
      assertTrue(inclRebalancedCH.locateOwnersForSegment(l).size() >= actualNumOwners);
    }
    NewDefaultConsistentHash exclRebalancedCH=(NewDefaultConsistentHash)chf.rebalanceConsistentHash(updatedMembersCH,false);
    NewDefaultConsistentHash exclRebalancedCH2=(NewDefaultConsistentHash)chf.rebalanceConsistentHash(inclRebalancedCH,false);
    checkDistribution(exclRebalancedCH,false);
    assertEquals(exclRebalancedCH.getNumSegments(),baseCH.getNumSegments());
    assertEquals(exclRebalancedCH.getNumOwners(),baseCH.getNumOwners());
    assertEquals(exclRebalancedCH.getMembers(),newMembers);
    baseCH=exclRebalancedCH;
    iterationCount++;
  }
}
