{
  final FastIterator fi;
  try {
    fi=tree.keys();
  }
 catch (  IOException e) {
    throw new CacheException(e);
  }
  return new Iterator<InternalCacheEntry>(){
    InternalCacheEntry current=null;
    boolean next=true;
    public boolean hasNext(){
      if (current == null && next) {
        Object key=fi.next();
        if (key == null) {
          next=false;
        }
 else {
          try {
            current=unmarshall(tree.get(key),key);
          }
 catch (          IOException e) {
            throw new CacheException(e);
          }
catch (          ClassNotFoundException e) {
            throw new CacheException(e);
          }
        }
      }
      return next;
    }
    public InternalCacheEntry next(){
      if (!hasNext())       throw new NoSuchElementException();
      try {
        return current;
      }
  finally {
        current=null;
      }
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
