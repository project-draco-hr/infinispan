{
  final Cache<Object,String>[] owners=getOwners(key,2);
  final Cache<Object,String> ownerCache=owners[0];
  final Cache<Object,String> backupOwnerCache=owners[1];
  final Cache<Object,String> nonOwnerCache=getFirstNonOwner(key);
  ownerCache.put(key,firstValue);
  assertEquals(firstValue,nonOwnerCache.get(key));
  assertIsInL1(nonOwnerCache,key);
  RpcManager rm=TestingUtil.extractComponent(ownerCache,RpcManager.class);
  ControlledRpcManager crm=new ControlledRpcManager(rm);
  crm.blockBefore(InvalidateL1Command.class);
  TestingUtil.replaceComponent(ownerCache,RpcManager.class,crm,true);
  RpcManager rm2=TestingUtil.extractComponent(backupOwnerCache,RpcManager.class);
  ControlledRpcManager crm2=new ControlledRpcManager(rm2);
  crm.blockBefore(InvalidateL1Command.class);
  TestingUtil.replaceComponent(backupOwnerCache,RpcManager.class,crm2,true);
  try {
    Future<String> future=fork(new Callable<String>(){
      @Override public String call() throws Exception {
        return ownerCache.put(key,secondValue);
      }
    }
);
    crm.waitForCommandToBlock(10,TimeUnit.SECONDS);
    crm2.waitForCommandToBlock(10,TimeUnit.SECONDS);
    try {
      future.get(1,TimeUnit.SECONDS);
      fail("This should have timed out since, they cannot invalidate L1");
    }
 catch (    TimeoutException e) {
    }
    crm.stopBlocking();
    crm2.stopBlocking();
    assertEquals(firstValue,future.get(10,TimeUnit.SECONDS));
    assertIsNotInL1(nonOwnerCache,key);
    assertEquals(secondValue,nonOwnerCache.get(key));
  }
  finally {
    removeAllBlockingInterceptorsFromCache(ownerCache);
    removeAllBlockingInterceptorsFromCache(backupOwnerCache);
  }
}
