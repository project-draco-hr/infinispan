{
  Configuration config=cm.getCacheConfiguration("transactional3");
  assertTrue(config.clustering().cacheMode().isReplicated());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  config=cm.getCacheConfiguration("lockingSyncInval");
  assertTrue(config.clustering().cacheMode().isInvalidation());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  config=cm.getCacheConfiguration("lockingAsyncInval");
  assertTrue(config.clustering().cacheMode().isInvalidation());
  assertFalse(config.clustering().cacheMode().isSynchronous());
  assertTrue(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  config=cm.getCacheConfiguration("syncRepl");
  assertTrue(config.clustering().cacheMode().isReplicated());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertEquals(15000,config.clustering().sync().replTimeout());
  assertEquals(15000,config.clustering().remoteTimeout());
  assertFalse(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  config=cm.getCacheConfiguration("asyncRepl");
  assertTrue(config.clustering().cacheMode().isReplicated());
  assertFalse(config.clustering().cacheMode().isSynchronous());
  assertFalse(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  config=cm.getCacheConfiguration("asyncReplQueue");
  assertTrue(config.clustering().cacheMode().isReplicated());
  assertFalse(config.clustering().cacheMode().isSynchronous());
  assertFalse(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  config=cm.getCacheConfiguration("txSyncRepl");
  assertTrue(config.clustering().cacheMode().isReplicated());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertEquals(15000,config.clustering().remoteTimeout());
  assertFalse(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  config=cm.getCacheConfiguration("dist");
  assertTrue(config.clustering().cacheMode().isDistributed());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertEquals(120000,config.clustering().stateTransfer().timeout());
  assertTrue(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  assertEquals(3,config.clustering().hash().numOwners());
  assertTrue(config.clustering().l1().enabled());
  assertEquals(600000,config.clustering().l1().lifespan());
  assertEquals(1200,config.clustering().l1().cleanupTaskFrequency());
  config=cm.getCacheConfiguration("dist_with_capacity_factors");
  assertTrue(config.clustering().cacheMode().isDistributed());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertEquals(120000,config.clustering().stateTransfer().timeout());
  assertTrue(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  assertEquals(3,config.clustering().hash().numOwners());
  assertEquals(1000,config.clustering().hash().numSegments());
  assertTrue(config.clustering().l1().enabled());
  assertEquals(610000,config.clustering().l1().lifespan());
  config=cm.getCacheConfiguration("groups");
  assertTrue(config.clustering().cacheMode().isDistributed());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertTrue(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  assertTrue(config.clustering().hash().groups().enabled());
  assertEquals(1,config.clustering().hash().groups().groupers().size());
  assertTrue(config.clustering().hash().groups().groupers().get(0) instanceof org.infinispan.distribution.groups.KXGrouper);
  config=cm.getCacheConfiguration("groupsDisabled");
  assertTrue(config.clustering().cacheMode().isDistributed());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertTrue(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  assertFalse(config.clustering().hash().groups().enabled());
  config=cm.getCacheConfiguration("chunkSize");
  assertTrue(config.clustering().cacheMode().isDistributed());
  assertFalse(config.clustering().cacheMode().isSynchronous());
  assertTrue(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  assertEquals(120000,config.clustering().stateTransfer().timeout());
  assertEquals(1000,config.clustering().stateTransfer().chunkSize());
  assertEquals(3,config.clustering().hash().numOwners());
  assertTrue(config.clustering().l1().enabled());
  assertEquals(600000,config.clustering().l1().lifespan());
  assertEquals(1200,config.clustering().l1().cleanupTaskFrequency());
  config=cm.getCacheConfiguration("distAsync");
  assertTrue(config.clustering().cacheMode().isDistributed());
  assertFalse(config.clustering().cacheMode().isSynchronous());
  assertEquals(120000,config.clustering().stateTransfer().timeout());
  assertTrue(config.clustering().stateTransfer().fetchInMemoryState());
  assertTrue(config.clustering().stateTransfer().awaitInitialTransfer());
  assertEquals(3,config.clustering().hash().numOwners());
  assertTrue(config.clustering().l1().enabled());
  assertEquals(600000,config.clustering().l1().lifespan());
  assertEquals(1200,config.clustering().l1().cleanupTaskFrequency());
  config=cm.getCacheConfiguration("localCache");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  config=cm.getCacheConfiguration("hashWithFactory");
  assertTrue(config.clustering().cacheMode().isDistributed());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertTrue(config.clustering().hash().consistentHashFactory() instanceof org.infinispan.distribution.ch.impl.ReplicatedConsistentHashFactory);
  assertFalse(config.clustering().l1().enabled());
}
