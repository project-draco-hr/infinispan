{
  Configuration config=cm.getCacheConfiguration("withClusterLoader");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof ClusterLoaderConfiguration);
  ClusterLoaderConfiguration clusterLoaderConfiguration=(ClusterLoaderConfiguration)config.persistence().stores().get(0);
  assertEquals(15000,clusterLoaderConfiguration.remoteCallTimeout());
  assertTrue(clusterLoaderConfiguration.preload());
  assertTrue(clusterLoaderConfiguration.fetchPersistentState());
  assertTrue(clusterLoaderConfiguration.ignoreModifications());
  assertTrue(clusterLoaderConfiguration.purgeOnStartup());
  assertTrue(clusterLoaderConfiguration.shared());
  config=cm.getCacheConfiguration("withFileStore");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertTrue(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof SingleFileStoreConfiguration);
  SingleFileStoreConfiguration singleFileStoreConfiguration=(SingleFileStoreConfiguration)config.persistence().stores().get(0);
  assertEquals("/tmp/FileCacheStore-Location",singleFileStoreConfiguration.location());
  assertEquals(5000,singleFileStoreConfiguration.maxEntries());
  assertTrue(singleFileStoreConfiguration.preload());
  assertTrue(singleFileStoreConfiguration.fetchPersistentState());
  assertTrue(singleFileStoreConfiguration.ignoreModifications());
  assertTrue(singleFileStoreConfiguration.purgeOnStartup());
  assertTrue(singleFileStoreConfiguration.async().enabled());
  assertEquals(5,singleFileStoreConfiguration.async().threadPoolSize());
  assertEquals(700,singleFileStoreConfiguration.async().modificationQueueSize());
  assertFalse(singleFileStoreConfiguration.singletonStore().enabled());
  config=cm.getCacheConfiguration("withFileStoreDisabledAsync");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof SingleFileStoreConfiguration);
  singleFileStoreConfiguration=(SingleFileStoreConfiguration)config.persistence().stores().get(0);
  assertEquals("/tmp/FileCacheStore-Location",singleFileStoreConfiguration.location());
  assertEquals(5000,singleFileStoreConfiguration.maxEntries());
  assertTrue(singleFileStoreConfiguration.preload());
  assertTrue(singleFileStoreConfiguration.fetchPersistentState());
  assertTrue(singleFileStoreConfiguration.ignoreModifications());
  assertTrue(singleFileStoreConfiguration.purgeOnStartup());
  assertFalse(singleFileStoreConfiguration.async().enabled());
  assertFalse(singleFileStoreConfiguration.singletonStore().enabled());
  config=cm.getCacheConfiguration("withLoaderDefaults");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof SingleFileStoreConfiguration);
  singleFileStoreConfiguration=(SingleFileStoreConfiguration)config.persistence().stores().get(0);
  assertEquals("/tmp/Another-FileCacheStore-Location",singleFileStoreConfiguration.location());
  assertTrue(singleFileStoreConfiguration.preload());
  assertTrue(singleFileStoreConfiguration.fetchPersistentState());
  assertTrue(singleFileStoreConfiguration.ignoreModifications());
  assertTrue(singleFileStoreConfiguration.purgeOnStartup());
  assertTrue(singleFileStoreConfiguration.shared());
  config=cm.getCacheConfiguration("withClusterLoader1");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof ClusterLoaderConfiguration);
  clusterLoaderConfiguration=(ClusterLoaderConfiguration)config.persistence().stores().get(0);
  assertEquals(15000,clusterLoaderConfiguration.remoteCallTimeout());
  assertTrue(clusterLoaderConfiguration.preload());
  assertTrue(clusterLoaderConfiguration.fetchPersistentState());
  assertTrue(clusterLoaderConfiguration.ignoreModifications());
  assertTrue(clusterLoaderConfiguration.purgeOnStartup());
  assertTrue(clusterLoaderConfiguration.shared());
  config=cm.getCacheConfiguration("lockingWithJDBCLoader");
  assertTrue(config.clustering().cacheMode().isClustered());
  assertTrue(config.clustering().cacheMode().isSynchronous());
  assertEquals(20000,config.clustering().sync().replTimeout());
  assertFalse(config.persistence().usingAsyncStore());
  assertTrue(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof SingleFileStoreConfiguration);
  singleFileStoreConfiguration=(SingleFileStoreConfiguration)config.persistence().stores().get(0);
  assertTrue(singleFileStoreConfiguration.preload());
  assertTrue(singleFileStoreConfiguration.fetchPersistentState());
  assertTrue(singleFileStoreConfiguration.ignoreModifications());
  assertTrue(singleFileStoreConfiguration.purgeOnStartup());
  assertFalse(singleFileStoreConfiguration.shared());
  assertFalse(singleFileStoreConfiguration.async().enabled());
  assertTrue(singleFileStoreConfiguration.singletonStore().enabled());
  assertEquals("${java.io.tmpdir}",singleFileStoreConfiguration.location());
  config=cm.getCacheConfiguration("jdbcStringBasedWithConnectionPool");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof JdbcStringBasedStoreConfiguration);
  JdbcStringBasedStoreConfiguration jdbcStringBasedStoreConfiguration=(JdbcStringBasedStoreConfiguration)config.persistence().stores().get(0);
  assertFalse(jdbcStringBasedStoreConfiguration.fetchPersistentState());
  assertFalse(jdbcStringBasedStoreConfiguration.ignoreModifications());
  assertFalse(jdbcStringBasedStoreConfiguration.purgeOnStartup());
  assertEquals("org.infinispan.persistence.jdbc.configuration.DummyKey2StringMapper",jdbcStringBasedStoreConfiguration.key2StringMapper());
  assertTrue(jdbcStringBasedStoreConfiguration.table().dropOnExit());
  assertTrue(jdbcStringBasedStoreConfiguration.table().createOnStart());
  assertEquals("ISPN_STRING_TABLE",jdbcStringBasedStoreConfiguration.table().tableNamePrefix());
  assertEquals("ID_COLUMN",jdbcStringBasedStoreConfiguration.table().idColumnName());
  assertEquals("VARCHAR(255)",jdbcStringBasedStoreConfiguration.table().idColumnType());
  assertEquals("DATA_COLUMN",jdbcStringBasedStoreConfiguration.table().dataColumnName());
  assertEquals("BINARY",jdbcStringBasedStoreConfiguration.table().dataColumnType());
  assertEquals("TIMESTAMP_COLUMN",jdbcStringBasedStoreConfiguration.table().timestampColumnName());
  assertEquals("BIGINT",jdbcStringBasedStoreConfiguration.table().timestampColumnType());
  PooledConnectionFactoryConfiguration connectionPool=(PooledConnectionFactoryConfiguration)jdbcStringBasedStoreConfiguration.connectionFactory();
  assertEquals("jdbc:h2:mem:infinispan_string_based;DB_CLOSE_DELAY=-1",connectionPool.connectionUrl());
  assertEquals("sa",connectionPool.username());
  assertEquals("sa",connectionPool.password());
  assertEquals("org.h2.Driver",connectionPool.driverClass());
  config=cm.getCacheConfiguration("jdbcStringBasedWithDataSource");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof JdbcStringBasedStoreConfiguration);
  jdbcStringBasedStoreConfiguration=(JdbcStringBasedStoreConfiguration)config.persistence().stores().get(0);
  assertFalse(jdbcStringBasedStoreConfiguration.fetchPersistentState());
  assertTrue(jdbcStringBasedStoreConfiguration.ignoreModifications());
  assertTrue(jdbcStringBasedStoreConfiguration.purgeOnStartup());
  assertEquals("org.infinispan.persistence.jdbc.configuration.DummyKey2StringMapper",jdbcStringBasedStoreConfiguration.key2StringMapper());
  assertTrue(jdbcStringBasedStoreConfiguration.table().dropOnExit());
  assertTrue(jdbcStringBasedStoreConfiguration.table().createOnStart());
  assertEquals(50,jdbcStringBasedStoreConfiguration.table().batchSize());
  assertEquals(70,jdbcStringBasedStoreConfiguration.table().fetchSize());
  assertEquals("ISPN_STRING_TABLE",jdbcStringBasedStoreConfiguration.table().tableNamePrefix());
  assertEquals("ID_COLUMN",jdbcStringBasedStoreConfiguration.table().idColumnName());
  assertEquals("VARCHAR(255)",jdbcStringBasedStoreConfiguration.table().idColumnType());
  assertEquals("DATA_COLUMN",jdbcStringBasedStoreConfiguration.table().dataColumnName());
  assertEquals("BINARY",jdbcStringBasedStoreConfiguration.table().dataColumnType());
  assertEquals("TIMESTAMP_COLUMN",jdbcStringBasedStoreConfiguration.table().timestampColumnName());
  assertEquals("BIGINT",jdbcStringBasedStoreConfiguration.table().timestampColumnType());
  ManagedConnectionFactoryConfiguration managedConnectionFactoryConfiguration=(ManagedConnectionFactoryConfiguration)jdbcStringBasedStoreConfiguration.connectionFactory();
  assertEquals("url",managedConnectionFactoryConfiguration.jndiUrl());
  config=cm.getCacheConfiguration("jdbcStringBasedWithSimpleConnection");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof JdbcStringBasedStoreConfiguration);
  jdbcStringBasedStoreConfiguration=(JdbcStringBasedStoreConfiguration)config.persistence().stores().get(0);
  assertTrue(jdbcStringBasedStoreConfiguration.fetchPersistentState());
  assertTrue(jdbcStringBasedStoreConfiguration.ignoreModifications());
  assertFalse(jdbcStringBasedStoreConfiguration.purgeOnStartup());
  assertEquals("org.infinispan.persistence.jdbc.configuration.DummyKey2StringMapper",jdbcStringBasedStoreConfiguration.key2StringMapper());
  assertFalse(jdbcStringBasedStoreConfiguration.table().dropOnExit());
  assertFalse(jdbcStringBasedStoreConfiguration.table().createOnStart());
  assertEquals("ISPN_STRING_TABLE",jdbcStringBasedStoreConfiguration.table().tableNamePrefix());
  assertEquals("ID_COLUMN",jdbcStringBasedStoreConfiguration.table().idColumnName());
  assertEquals("VARCHAR(255)",jdbcStringBasedStoreConfiguration.table().idColumnType());
  assertEquals("DATA_COLUMN",jdbcStringBasedStoreConfiguration.table().dataColumnName());
  assertEquals("BINARY",jdbcStringBasedStoreConfiguration.table().dataColumnType());
  assertEquals("TIMESTAMP_COLUMN",jdbcStringBasedStoreConfiguration.table().timestampColumnName());
  assertEquals("BIGINT",jdbcStringBasedStoreConfiguration.table().timestampColumnType());
  SimpleConnectionFactoryConfiguration simpleConnectionFactoryConfiguration=(SimpleConnectionFactoryConfiguration)jdbcStringBasedStoreConfiguration.connectionFactory();
  assertEquals("jdbc:h2:mem:infinispan_string_based;DB_CLOSE_DELAY=-1",simpleConnectionFactoryConfiguration.connectionUrl());
  assertEquals("sa",simpleConnectionFactoryConfiguration.username());
  assertEquals("sa",simpleConnectionFactoryConfiguration.password());
  assertEquals("org.h2.Driver",simpleConnectionFactoryConfiguration.driverClass());
  assertTrue(jdbcStringBasedStoreConfiguration.singletonStore().enabled());
  assertEquals("testValue",jdbcStringBasedStoreConfiguration.properties().getProperty("testName"));
  config=cm.getCacheConfiguration("jdbcBinary");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof JdbcBinaryStoreConfiguration);
  JdbcBinaryStoreConfiguration jdbcBinaryStoreConfiguration=(JdbcBinaryStoreConfiguration)config.persistence().stores().get(0);
  assertFalse(jdbcBinaryStoreConfiguration.fetchPersistentState());
  assertFalse(jdbcBinaryStoreConfiguration.ignoreModifications());
  assertFalse(jdbcBinaryStoreConfiguration.purgeOnStartup());
  assertTrue(jdbcBinaryStoreConfiguration.table().dropOnExit());
  assertTrue(jdbcBinaryStoreConfiguration.table().createOnStart());
  assertEquals("ISPN_BINARY_TABLE",jdbcBinaryStoreConfiguration.table().tableNamePrefix());
  assertEquals("ID_COLUMN",jdbcBinaryStoreConfiguration.table().idColumnName());
  assertEquals("BINARY",jdbcBinaryStoreConfiguration.table().idColumnType());
  assertEquals("DATA_COLUMN",jdbcBinaryStoreConfiguration.table().dataColumnName());
  assertEquals("BINARY",jdbcBinaryStoreConfiguration.table().dataColumnType());
  assertEquals("TIMESTAMP_COLUMN",jdbcBinaryStoreConfiguration.table().timestampColumnName());
  assertEquals("BIGINT",jdbcBinaryStoreConfiguration.table().timestampColumnType());
  connectionPool=(PooledConnectionFactoryConfiguration)jdbcBinaryStoreConfiguration.connectionFactory();
  assertEquals("jdbc:h2:mem:infinispan_string_based;DB_CLOSE_DELAY=-1",connectionPool.connectionUrl());
  assertEquals("sa",connectionPool.username());
  assertEquals(null,connectionPool.password());
  assertEquals("org.h2.Driver",connectionPool.driverClass());
  config=cm.getCacheConfiguration("jdbcMixed");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof JdbcMixedStoreConfiguration);
  JdbcMixedStoreConfiguration jdbcMixedStoreConfiguration=(JdbcMixedStoreConfiguration)config.persistence().stores().get(0);
  assertFalse(jdbcMixedStoreConfiguration.fetchPersistentState());
  assertFalse(jdbcMixedStoreConfiguration.ignoreModifications());
  assertFalse(jdbcMixedStoreConfiguration.purgeOnStartup());
  assertEquals("org.infinispan.persistence.jdbc.configuration.DummyKey2StringMapper",jdbcStringBasedStoreConfiguration.key2StringMapper());
  assertFalse(jdbcMixedStoreConfiguration.stringTable().dropOnExit());
  assertTrue(jdbcMixedStoreConfiguration.stringTable().createOnStart());
  assertEquals("ISPN_STRING_TABLE",jdbcMixedStoreConfiguration.stringTable().tableNamePrefix());
  assertEquals("ID_COLUMN",jdbcMixedStoreConfiguration.stringTable().idColumnName());
  assertEquals("VARCHAR(255)",jdbcMixedStoreConfiguration.stringTable().idColumnType());
  assertEquals("DATA_COLUMN",jdbcMixedStoreConfiguration.stringTable().dataColumnName());
  assertEquals("BINARY",jdbcMixedStoreConfiguration.stringTable().dataColumnType());
  assertEquals("TIMESTAMP_COLUMN",jdbcMixedStoreConfiguration.stringTable().timestampColumnName());
  assertEquals("BIGINT",jdbcMixedStoreConfiguration.stringTable().timestampColumnType());
  assertTrue(jdbcMixedStoreConfiguration.binaryTable().dropOnExit());
  assertFalse(jdbcMixedStoreConfiguration.binaryTable().createOnStart());
  assertEquals("ISPN_BINARY_TABLE",jdbcMixedStoreConfiguration.binaryTable().tableNamePrefix());
  assertEquals("ID_COLUMN",jdbcMixedStoreConfiguration.binaryTable().idColumnName());
  assertEquals("BINARY",jdbcMixedStoreConfiguration.binaryTable().idColumnType());
  assertEquals("DATA_COLUMN",jdbcMixedStoreConfiguration.binaryTable().dataColumnName());
  assertEquals("BINARY",jdbcMixedStoreConfiguration.binaryTable().dataColumnType());
  assertEquals("TIMESTAMP_COLUMN",jdbcMixedStoreConfiguration.binaryTable().timestampColumnName());
  assertEquals("BIGINT",jdbcMixedStoreConfiguration.binaryTable().timestampColumnType());
  connectionPool=(PooledConnectionFactoryConfiguration)jdbcMixedStoreConfiguration.connectionFactory();
  assertEquals("jdbc:h2:mem:infinispan_string_based;DB_CLOSE_DELAY=-1",connectionPool.connectionUrl());
  assertEquals("sa",connectionPool.username());
  assertEquals("sa",connectionPool.password());
  assertEquals("org.h2.Driver",connectionPool.driverClass());
  config=cm.getCacheConfiguration("withRemoteStore");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof RemoteStoreConfiguration);
  RemoteStoreConfiguration remoteStoreConfiguration=(RemoteStoreConfiguration)config.persistence().stores().get(0);
  assertFalse(remoteStoreConfiguration.fetchPersistentState());
  assertTrue(remoteStoreConfiguration.shared());
  assertFalse(remoteStoreConfiguration.preload());
  assertFalse(remoteStoreConfiguration.ignoreModifications());
  assertFalse(remoteStoreConfiguration.purgeOnStartup());
  assertTrue(remoteStoreConfiguration.tcpNoDelay());
  assertEquals("org.infinispan.client.hotrod.impl.transport.tcp.RoundRobinBalancingStrategy",remoteStoreConfiguration.balancingStrategy());
  assertEquals("org.infinispan.client.hotrod.impl.transport.tcp.TcpTransportFactory",remoteStoreConfiguration.transportFactory());
  assertEquals(32,remoteStoreConfiguration.keySizeEstimate());
  assertEquals(512,remoteStoreConfiguration.valueSizeEstimate());
  assertFalse(remoteStoreConfiguration.forceReturnValues());
  assertEquals(5000,remoteStoreConfiguration.connectionTimeout());
  assertFalse(remoteStoreConfiguration.hotRodWrapping());
  assertEquals("org.infinispan.commons.marshall.jboss.GenericJBossMarshaller",remoteStoreConfiguration.marshaller());
  assertEquals("1.0",remoteStoreConfiguration.protocolVersion());
  assertTrue(remoteStoreConfiguration.rawValues());
  assertEquals("test",remoteStoreConfiguration.remoteCacheName());
  assertEquals(12500,remoteStoreConfiguration.socketTimeout());
  assertEquals(1,remoteStoreConfiguration.servers().size());
  assertEquals("127.0.0.1",remoteStoreConfiguration.servers().get(0).host());
  assertEquals(19711,remoteStoreConfiguration.servers().get(0).port());
  assertTrue(remoteStoreConfiguration.asyncExecutorFactory().factory() instanceof org.infinispan.client.hotrod.impl.async.DefaultAsyncExecutorFactory);
  assertEquals(1,remoteStoreConfiguration.asyncExecutorFactory().properties().getIntProperty("pool_size",0));
  assertEquals(10000,remoteStoreConfiguration.asyncExecutorFactory().properties().getIntProperty("queue_size",0));
  ConnectionPoolConfiguration remoteConnectionPoolConfiguration=remoteStoreConfiguration.connectionPool();
  assertEquals(99,remoteConnectionPoolConfiguration.maxActive());
  assertEquals(97,remoteConnectionPoolConfiguration.maxIdle());
  assertEquals(27,remoteConnectionPoolConfiguration.minIdle());
  assertEquals(98,remoteConnectionPoolConfiguration.maxTotal());
  assertEquals("CREATE_NEW",remoteConnectionPoolConfiguration.exhaustedAction().name());
  assertEquals(50,remoteConnectionPoolConfiguration.minEvictableIdleTime());
  assertEquals(60000,remoteConnectionPoolConfiguration.timeBetweenEvictionRuns());
  assertFalse(remoteConnectionPoolConfiguration.testWhileIdle());
  config=cm.getCacheConfiguration("withRestStore");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertFalse(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof RestStoreConfiguration);
  RestStoreConfiguration restStoreConfiguration=(RestStoreConfiguration)config.persistence().stores().get(0);
  assertFalse(restStoreConfiguration.fetchPersistentState());
  assertFalse(restStoreConfiguration.ignoreModifications());
  assertTrue(restStoreConfiguration.purgeOnStartup());
  assertTrue(restStoreConfiguration.shared());
  assertFalse(restStoreConfiguration.preload());
  assertEquals("org.infinispan.persistence.keymappers.MarshalledValueOrPrimitiveMapper",restStoreConfiguration.key2StringMapper());
  assertEquals("/rest/___defaultcache/",restStoreConfiguration.path());
  assertEquals("localhost",restStoreConfiguration.host());
  assertEquals(18212,restStoreConfiguration.port());
  assertTrue(restStoreConfiguration.appendCacheNameToPath());
  org.infinispan.persistence.rest.configuration.ConnectionPoolConfiguration restConnectionPool=restStoreConfiguration.connectionPool();
  assertEquals(10000,restConnectionPool.connectionTimeout());
  assertEquals(10,restConnectionPool.maxConnectionsPerHost());
  assertEquals(10,restConnectionPool.maxTotalConnections());
  assertEquals(20000,restConnectionPool.bufferSize());
  assertEquals(10000,restConnectionPool.socketTimeout());
  assertTrue(restConnectionPool.tcpNoDelay());
  config=cm.getCacheConfiguration("withLevelDBStore");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertTrue(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof RocksDBStoreConfiguration);
  RocksDBStoreConfiguration rocksDBStoreConfiguration=(RocksDBStoreConfiguration)config.persistence().stores().get(0);
  assertEquals("/tmp/leveldb/data",rocksDBStoreConfiguration.location());
  assertEquals("/tmp/leveldb/expired",rocksDBStoreConfiguration.expiredLocation());
  assertTrue(rocksDBStoreConfiguration.shared());
  assertTrue(rocksDBStoreConfiguration.preload());
  assertEquals(20,rocksDBStoreConfiguration.clearThreshold());
  assertEquals(30,rocksDBStoreConfiguration.expiryQueueSize());
  assertEquals(10,rocksDBStoreConfiguration.blockSize().intValue());
  assertEquals(50,rocksDBStoreConfiguration.cacheSize().longValue());
  assertEquals("SNAPPY",rocksDBStoreConfiguration.compressionType().name());
  config=cm.getCacheConfiguration("withJpaStore");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertFalse(config.persistence().usingAsyncStore());
  assertTrue(config.persistence().passivation());
  assertTrue(config.persistence().usingStores());
  assertEquals(1,config.persistence().stores().size());
  assertTrue(config.persistence().stores().get(0) instanceof JpaStoreConfiguration);
  JpaStoreConfiguration jpaStoreConfiguration=(JpaStoreConfiguration)config.persistence().stores().get(0);
  assertEquals("TestPersistentName",jpaStoreConfiguration.persistenceUnitName());
  assertEquals(80,jpaStoreConfiguration.batchSize());
  assertEquals("org.infinispan.tools.customs.CustomDataContainer",jpaStoreConfiguration.entityClass().getCanonicalName());
  assertFalse(jpaStoreConfiguration.storeMetadata());
}
