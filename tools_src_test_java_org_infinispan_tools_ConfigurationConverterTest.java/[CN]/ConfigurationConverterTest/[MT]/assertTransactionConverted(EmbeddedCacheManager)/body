{
  Configuration config=cm.getCacheConfiguration("transactionalWithInvocationBatching");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertTrue(config.transaction().transactionMode().isTransactional());
  assertEquals("TRANSACTIONAL",config.transaction().transactionMode().name());
  assertTrue(config.transaction().useSynchronization());
  assertFalse(config.transaction().recovery().enabled());
  assertTrue(config.transaction().autoCommit());
  assertTrue(config.invocationBatching().enabled());
  config=cm.getCacheConfiguration("transactionalWithDisabledInvocationBatching");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertTrue(config.transaction().transactionMode().isTransactional());
  assertEquals("TRANSACTIONAL",config.transaction().transactionMode().name());
  assertTrue(config.transaction().useSynchronization());
  assertFalse(config.transaction().recovery().enabled());
  assertTrue(config.transaction().autoCommit());
  assertFalse(config.invocationBatching().enabled());
  config=cm.getCacheConfiguration("transactional");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertTrue(config.transaction().transactionMode().isTransactional());
  assertEquals("TRANSACTIONAL",config.transaction().transactionMode().name());
  assertFalse(config.transaction().useSynchronization());
  assertTrue(config.transaction().autoCommit());
  assertFalse(config.invocationBatching().enabled());
  assertTrue(config.transaction().recovery().enabled());
  assertEquals("transactional2",config.transaction().recovery().recoveryInfoCacheName());
  config=cm.getCacheConfiguration("transactional2");
  assertFalse(config.clustering().cacheMode().isClustered());
  assertTrue(config.transaction().transactionMode().isTransactional());
  assertEquals("TRANSACTIONAL",config.transaction().transactionMode().name());
  assertFalse(config.transaction().useSynchronization());
  assertFalse(config.transaction().recovery().enabled());
  assertFalse(config.transaction().autoCommit());
  assertFalse(config.invocationBatching().enabled());
  assertEquals("PESSIMISTIC",config.transaction().lockingMode().name());
  assertEquals(10000,config.transaction().cacheStopTimeout());
  assertTrue(config.transaction().transactionManagerLookup() instanceof org.infinispan.test.tx.TestLookup);
  config=cm.getCacheConfiguration("transactional3");
  assertTrue(config.clustering().cacheMode().isReplicated());
  assertTrue(config.transaction().transactionMode().isTransactional());
  assertEquals("TRANSACTIONAL",config.transaction().transactionMode().name());
  assertFalse(config.transaction().useSynchronization());
  assertTrue(config.transaction().autoCommit());
  assertFalse(config.invocationBatching().enabled());
  assertEquals("OPTIMISTIC",config.transaction().lockingMode().name());
  assertEquals("TOTAL_ORDER",config.transaction().transactionProtocol().name());
  assertFalse(config.transaction().recovery().enabled());
  config=cm.getCacheConfiguration("txSyncRepl");
  assertTrue(config.clustering().cacheMode().isReplicated());
  assertTrue(config.transaction().transactionMode().isTransactional());
  assertEquals("TRANSACTIONAL",config.transaction().transactionMode().name());
  assertFalse(config.transaction().useSynchronization());
  assertTrue(config.transaction().autoCommit());
  assertFalse(config.invocationBatching().enabled());
  assertEquals("OPTIMISTIC",config.transaction().lockingMode().name());
  assertFalse(config.transaction().recovery().enabled());
  assertTrue(config.transaction().transactionManagerLookup() instanceof org.infinispan.transaction.lookup.GenericTransactionManagerLookup);
}
