{
  NodeList interceptorNodes=e.getElementsByTagName("interceptor");
  List<CustomInterceptorConfig> interceptorConfigs=new ArrayList<CustomInterceptorConfig>(interceptorNodes.getLength());
  for (int i=0; i < interceptorNodes.getLength(); i++) {
    Element interceptorElement=(Element)interceptorNodes.item(i);
    CustomInterceptorConfig customInterceptorConfig=new CustomInterceptorConfig();
    String position=parser.getAttributeValue(interceptorElement,"position");
    if (parser.existsAttribute(position)) {
      customInterceptorConfig.setPosition(position);
    }
    String indexStr=parser.getAttributeValue(interceptorElement,"index");
    int index=parser.existsAttribute(indexStr) ? parser.getInt(indexStr) : -1;
    customInterceptorConfig.setIndex(index);
    String before=parser.getAttributeValue(interceptorElement,"before");
    if (parser.existsAttribute(before)) {
      customInterceptorConfig.setBeforeInterceptor(before);
    }
    String after=parser.getAttributeValue(interceptorElement,"after");
    if (parser.existsAttribute(after)) {
      customInterceptorConfig.setAfterInterceptor(before);
    }
    String interceptorClass=parser.getAttributeValue(interceptorElement,"class");
    if (!parser.existsAttribute(interceptorClass))     throw new ConfigurationException("Interceptor class cannot be empty!");
    customInterceptorConfig.setClassName(interceptorClass);
    CommandInterceptor interceptor;
    try {
      interceptor=(CommandInterceptor)Util.loadClass(interceptorClass).newInstance();
    }
 catch (    Exception ex) {
      throw new ConfigurationException("CommandInterceptor class is not properly loaded in classloader",ex);
    }
    Properties p=XmlConfigHelper.extractProperties(interceptorElement);
    if (p != null)     XmlConfigHelper.setValues(interceptor,p,false,true);
    customInterceptorConfig.setInterceptor(interceptor);
    interceptorConfigs.add(customInterceptorConfig);
  }
  ((Configuration)bean).setCustomInterceptors(interceptorConfigs);
}
