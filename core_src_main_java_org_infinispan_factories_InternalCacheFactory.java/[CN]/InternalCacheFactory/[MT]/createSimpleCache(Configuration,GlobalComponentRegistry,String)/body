{
  AdvancedCache<K,V> cache;
  JMXStatisticsConfiguration jmxStatistics=configuration.jmxStatistics();
  boolean statisticsAvailable=jmxStatistics != null && jmxStatistics.available();
  if (statisticsAvailable) {
    cache=new StatsCollectingCache<>(cacheName);
  }
 else {
    cache=new SimpleCacheImpl<>(cacheName);
  }
  this.configuration=configuration;
  componentRegistry=new ComponentRegistry(cacheName,configuration,cache,globalComponentRegistry,globalComponentRegistry.getClassLoader()){
    @Override protected void bootstrapComponents(){
      if (statisticsAvailable) {
        registerComponent(new StatsCollector.Factory(),StatsCollector.Factory.class);
      }
      registerComponent(new ClusterEventManagerStub<K,V>(),ClusterEventManager.class);
      registerComponent(new PassivationManagerStub(),PassivationManager.class);
      registerComponent(new ActivationManagerStub(),ActivationManager.class);
      registerComponent(new PersistenceManagerStub(),PersistenceManager.class);
    }
    @Override public void cacheComponents(){
      cacheMarshaler=getOrCreateComponent(StreamingMarshaller.class,KnownComponentNames.CACHE_MARSHALLER);
      getOrCreateComponent(ExpirationManager.class);
    }
  }
;
  componentRegistry.registerComponent(new CacheJmxRegistration(),CacheJmxRegistration.class.getName(),true);
  componentRegistry.registerComponent(new RollingUpgradeManager(),RollingUpgradeManager.class.getName(),true);
  componentRegistry.registerComponent(cache,Cache.class.getName(),true);
  return cache;
}
