{
  final StateSequencer sequencer=new StateSequencer();
  sequencer.logicalThread("st","st:cache0_before_send_state");
  sequencer.logicalThread("write","write:before_start","write:start","write:cache1_before_return","write:cache2_before_dist","write:end","write:after_end");
  sequencer.logicalThread("remote_get_cache0","remote_get_cache0");
  sequencer.logicalThread("remote_get_cache1","remote_get_cache1");
  sequencer.order("write:end","remote_get_cache0").order("write:end","remote_get_cache1");
  sequencer.action("st:cache0_before_send_state",new Callable<Object>(){
    @Override public Object call() throws Exception {
      sequencer.advance("write:before_start");
      sequencer.advance("write:after_end");
      return null;
    }
  }
);
  final AdvancedCache<Object,Object> cache0=advancedCache(0);
  final AdvancedCache<Object,Object> cache1=advancedCache(1);
  advanceOnOutboundRpc(sequencer,cache0,matchCommand(StateResponseCommand.class).build()).before("st:cache0_before_send_state");
  advanceOnInterceptor(sequencer,cache0,StateTransferInterceptor.class,matchCommand(GetKeyValueCommand.class).build()).before("remote_get_cache0");
  advanceOnInterceptor(sequencer,cache1,StateTransferInterceptor.class,matchCommand(GetKeyValueCommand.class).build()).before("remote_get_cache1");
  ConfigurationBuilder c=getConfigurationBuilder();
  c.clustering().stateTransfer().awaitInitialTransfer(false);
  addClusterEnabledCacheManager(c);
  log.tracef("Starting the cache on the joiner");
  final AdvancedCache<Object,Object> cache2=advancedCache(2);
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return cache0.getRpcManager().getMembers().size() == 3 && cache1.getRpcManager().getMembers().size() == 3 && cache2.getRpcManager().getMembers().size() == 3;
    }
  }
);
  CommandMatcher writeCommandMatcher=matchCommand(op.getCommandClass()).build();
  advanceOnInterceptor(sequencer,cache1,StateTransferInterceptor.class,writeCommandMatcher).before("write:cache1_before_return");
  advanceOnInterceptor(sequencer,cache2,StateTransferInterceptor.class,writeCommandMatcher).before("write:cache2_before_dist");
  sequencer.advance("write:start");
  final MagicKey key=getKeyForCache2();
  if (op.getPreviousValue() != null) {
    cache0.withFlags(Flag.CACHE_MODE_LOCAL).put(key,op.getPreviousValue());
    cache1.withFlags(Flag.CACHE_MODE_LOCAL).put(key,op.getPreviousValue());
  }
  log.tracef("Initial value set, %s = %s",key,op.getPreviousValue());
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return op.perform(cache0,key);
    }
  }
);
  Object result=future.get(10,TimeUnit.SECONDS);
  assertEquals(op.getReturnValue(),result);
  log.tracef("%s operation is done",op);
  sequencer.advance("write:end");
  TestingUtil.waitForRehashToComplete(cache0,cache1,cache2);
  sequencer.stop();
  assertEquals(op.getValue(),cache0.get(key));
  assertEquals(op.getValue(),cache1.get(key));
  assertEquals(op.getValue(),cache2.get(key));
}
