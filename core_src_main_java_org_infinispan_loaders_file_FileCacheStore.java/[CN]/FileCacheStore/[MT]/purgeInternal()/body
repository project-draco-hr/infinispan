{
  if (trace)   log.trace("purgeInternal()");
  if (acquireGlobalLock(false)) {
    try {
      for (      final File bucketFile : root.listFiles()) {
        if (multiThreadedPurge) {
          purgerService.execute(new Runnable(){
            @Override public void run(){
              Bucket bucket;
              try {
                if ((bucket=loadBucket(bucketFile)) != null && bucket.removeExpiredEntries())                 updateBucket(bucket);
              }
 catch (              InterruptedException ie) {
                if (log.isDebugEnabled())                 log.debug("Interrupted, so finish work.");
              }
catch (              CacheLoaderException e) {
                log.problemsPurgingFile(bucketFile,e);
              }
            }
          }
);
        }
 else {
          Bucket bucket;
          if ((bucket=loadBucket(bucketFile)) != null && bucket.removeExpiredEntries())           updateBucket(bucket);
        }
      }
    }
 catch (    InterruptedException ie) {
      if (log.isDebugEnabled())       log.debug("Interrupted, so stop loading and finish with purging.");
      Thread.currentThread().interrupt();
    }
 finally {
      releaseGlobalLock(false);
      if (trace)       log.trace("Exit purgeInternal()");
    }
  }
 else {
    log.unableToAcquireLockToPurgeStore();
  }
}
