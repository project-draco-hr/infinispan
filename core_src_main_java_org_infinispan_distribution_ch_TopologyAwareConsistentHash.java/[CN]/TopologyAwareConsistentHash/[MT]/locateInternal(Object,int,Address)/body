{
  int actualReplCount=Math.min(replCount,caches.size());
  int keyNormalizedHash=getNormalizedHash(getGrouping(key));
  int firstOwnerIndex=getPositionIndex(keyNormalizedHash);
  Address firstOwner=positionValues[firstOwnerIndex];
  List<Address> owners=new ArrayList<Address>(actualReplCount);
  owners.add(firstOwner);
  if (owners.size() >= actualReplCount)   return owners;
  if (locateOwnersForLevel(firstOwnerIndex,actualReplCount,Level.SITE,siteIdChangeIndexes,target,owners))   return owners;
  if (locateOwnersForLevel(firstOwnerIndex,actualReplCount,Level.RACK,rackIdChangeIndexes,target,owners))   return owners;
  if (locateOwnersForLevel(firstOwnerIndex,actualReplCount,Level.MACHINE,machineIdChangeIndexes,target,owners))   return owners;
  for (Iterator<Map.Entry<Integer,Address>> it=getPositionsIterator(keyNormalizedHash); it.hasNext(); ) {
    TopologyAwareAddress address=(TopologyAwareAddress)it.next().getValue();
    if (addOwner(owners,address,replCount,target,Level.NONE))     return owners;
  }
  return owners;
}
