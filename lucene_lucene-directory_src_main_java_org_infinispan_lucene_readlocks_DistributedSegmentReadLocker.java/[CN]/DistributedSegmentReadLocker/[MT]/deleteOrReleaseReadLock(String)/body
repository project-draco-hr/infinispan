{
  FileCacheKey fileCacheKey=new FileCacheKey(indexName,filename);
  FileMetadata fileMetadata=metadataCache.get(fileCacheKey);
  boolean isMultiChunked=fileMetadata.isMultiChunked();
  FileReadLockKey readLockKey=new FileReadLockKey(indexName,filename);
  int newValue=0;
  boolean done=false;
  Object lockValue=locksCache.get(readLockKey);
  while (!done && isMultiChunked) {
    if (lockValue == null) {
      lockValue=locksCache.putIfAbsent(readLockKey,0);
      done=(null == lockValue);
    }
 else {
      Integer refCountObject=(Integer)lockValue;
      int refCount=refCountObject.intValue();
      newValue=refCount - 1;
      done=locksCache.replace(readLockKey,refCountObject,newValue);
      if (!done) {
        lockValue=locksCache.get(readLockKey);
      }
    }
  }
  if (newValue == 0) {
    realFileDelete(indexName,filename,locksCache,chunksCache,metadataCache,forceSynchronousDeletes);
  }
}
