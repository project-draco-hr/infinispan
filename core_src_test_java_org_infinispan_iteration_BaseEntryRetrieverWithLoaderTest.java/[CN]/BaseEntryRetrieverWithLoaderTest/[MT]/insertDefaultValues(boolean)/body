{
  Cache<Object,String> cache0=cache(0,cacheName);
  Map<Object,String> originalValues=new HashMap<Object,String>();
  Object loaderKey=null;
  if (cacheMode.isDistributed() || cacheMode.isReplicated()) {
    Cache<Object,String> cache1=cache(1,cacheName);
    Cache<Object,String> cache2=cache(2,cacheName);
    originalValues.put(new MagicKey(cache0),"cache0");
    originalValues.put(new MagicKey(cache1),"cache1");
    originalValues.put(new MagicKey(cache2),"cache2");
    loaderKey=new MagicKey(cache2);
  }
 else {
    originalValues.put(1,"value0");
    originalValues.put(2,"value1");
    originalValues.put(3,"value2");
    loaderKey=4;
  }
  cache0.putAll(originalValues);
  PersistenceManager persistenceManager=TestingUtil.extractComponent(cache0,PersistenceManager.class);
  DummyInMemoryStore store=persistenceManager.getStores(DummyInMemoryStore.class).iterator().next();
  TestObjectStreamMarshaller sm=new TestObjectStreamMarshaller();
  try {
    String loaderValue="loader-value";
    store.write(new MarshalledEntryImpl(loaderKey,loaderValue,null,sm));
    if (includeLoaderEntry) {
      originalValues.put(loaderKey,loaderValue);
    }
  }
  finally {
    sm.stop();
  }
  return originalValues;
}
