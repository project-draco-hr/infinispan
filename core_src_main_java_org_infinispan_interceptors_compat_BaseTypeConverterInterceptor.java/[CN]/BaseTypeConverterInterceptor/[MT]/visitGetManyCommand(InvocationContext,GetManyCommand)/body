{
  Set<Object> keys=command.getKeys();
  TypeConverter<Object,Object,Object,Object> converter=determineTypeConverter(command.getFlags());
  if (ctx.isOriginLocal()) {
    Set<Object> boxedKeys=new HashSet<>(keys.size());
    for (    Object key : keys) {
      boxedKeys.add(converter.boxKey(key));
    }
    command.setKeys(boxedKeys);
  }
  Object ret=invokeNextInterceptor(ctx,command);
  if (ret != null) {
    if (command.isReturnEntries()) {
      Map<Object,CacheEntry> map=(Map<Object,CacheEntry>)ret;
      Map<Object,Object> unboxed=command.createMap();
      for (      Map.Entry<Object,CacheEntry> entry : map.entrySet()) {
        CacheEntry cacheEntry=entry.getValue();
        if (command.getRemotelyFetched() == null || !command.getRemotelyFetched().containsKey(entry.getKey())) {
          unboxed.put(entry.getKey(),entryFactory.create(entry.getKey(),converter.unboxValue(cacheEntry.getValue()),cacheEntry.getMetadata(),cacheEntry.getLifespan(),cacheEntry.getMaxIdle()));
        }
 else {
          unboxed.put(entry.getKey(),cacheEntry);
        }
      }
      return unboxed;
    }
 else {
      Map<Object,Object> map=(Map<Object,Object>)ret;
      Map<Object,Object> unboxed=command.createMap();
      for (      Map.Entry<Object,Object> entry : map.entrySet()) {
        if (command.getRemotelyFetched() == null || !command.getRemotelyFetched().containsKey(entry.getKey())) {
          unboxed.put(entry.getKey(),converter.unboxValue(entry.getValue()));
        }
 else {
          unboxed.put(entry.getKey(),entry.getValue());
        }
      }
      return unboxed;
    }
  }
  return null;
}
