{
  if (log.isTraceEnabled())   log.trace("Command line: " + line);
  String[] args=line.trim().split(" +");
  CommandType type=null;
  String tmp=args[0];
  if (tmp == null)   throw new EOFException();
 else   type=CommandType.parseType(tmp);
switch (type) {
case SET:
case ADD:
case REPLACE:
case APPEND:
case PREPEND:
case CAS:
    String key=args[1];
  if (key == null)   throw new EOFException();
tmp=args[2];
if (tmp == null) throw new EOFException();
int flags=Integer.parseInt(tmp);
tmp=args[3];
if (tmp == null) throw new EOFException();
long expiry=Long.parseLong(tmp);
tmp=args[4];
if (tmp == null) throw new EOFException();
int bytes=Integer.parseInt(tmp);
StorageParameters storage=new StorageParameters(key,flags,expiry,bytes);
if (type == CommandType.CAS) {
tmp=args[5];
long cas=Long.parseLong(tmp);
return CasCommand.newCasCommand(cache,storage,cas,null);
}
return StorageCommand.newStorageCommand(cache,type,storage,null);
case GET:
case GETS:
List<String> keys=new ArrayList<String>(5);
keys.addAll(Arrays.asList(args).subList(1,args.length));
return RetrievalCommand.newRetrievalCommand(cache,type,new RetrievalParameters(keys));
default :
return null;
}
}
