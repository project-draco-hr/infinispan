{
  Cache<Object,Object> cache0=cache(0);
  Cache<Object,Object> cache1=cache(1);
  Cache<Object,Object> cache2=cache(2);
  Cache<Object,Object> cache3=cache(3);
  int NUM_KEYS=20;
  MagicKey[] keys=new MagicKey[NUM_KEYS];
  String[] values=new String[NUM_KEYS];
  for (int i=0; i < NUM_KEYS; i++) {
    keys[i]=new MagicKey("key" + i,cache3);
    values[i]="v" + i;
    cache0.put(keys[i],values[i]);
  }
  checkStateTransfer(keys,values);
  Transaction[] txs=new Transaction[NUM_KEYS];
  for (int i=0; i < NUM_KEYS; i++) {
    int cacheIndex=i % 3;
    tm(cacheIndex).begin();
{
      assertEquals(values[i],cache(cacheIndex).get(keys[i]));
    }
    txs[i]=tm(cacheIndex).suspend();
  }
  log.debugf("Starting joiner");
  addClusterEnabledCacheManager(builder);
  Cache<Object,Object> cache4=cache(4);
  log.debugf("Joiner started, checking transferred data");
  checkStateTransfer(keys,values);
  log.debugf("Stopping cache %s",cache3);
  manager(3).stop();
  cacheManagers.remove(3);
  TestingUtil.waitForRehashToComplete(caches());
  log.debugf("Leaver stopped, checking transferred data");
  checkStateTransfer(keys,values);
  for (int i=0; i < NUM_KEYS; i++) {
    cache4.put(keys[i],"new " + values[i]);
  }
  for (int i=0; i < NUM_KEYS; i++) {
    int cacheIndex=i % 3;
    log.tracef("Expecting a write skew failure for key %s on cache %s",keys[i],cache(cacheIndex));
    tm(cacheIndex).resume(txs[i]);
{
      cache(cacheIndex).put(keys[i],"new new " + values[i]);
    }
    try {
      tm(cacheIndex).commit();
      fail("The write skew check should have failed!");
    }
 catch (    RollbackException expected) {
    }
  }
  for (int cacheIndex=0; cacheIndex < 4; cacheIndex++) {
    for (int i=0; i < NUM_KEYS; i++) {
      assertEquals("Wrong value found on cache " + cache(cacheIndex),"new " + values[i],cache(cacheIndex).get(keys[i]));
    }
  }
}
