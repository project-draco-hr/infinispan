{
  Properties props=new Properties();
  props.put("databaseType",DatabaseType.DERBY.toString());
  props.put("createOnStart","false");
  props.put("dropOnExit","true");
  ConfigurationBuilder b=new ConfigurationBuilder();
  b.persistence().addStore(JdbcStringBasedStoreConfigurationBuilder.class).connectionPool().connectionUrl(JDBC_URL).withProperties(props);
  Configuration stringConfiguration=b.build();
  JdbcStringBasedStoreConfiguration stringStoreConfiguration=(JdbcStringBasedStoreConfiguration)stringConfiguration.persistence().stores().get(0);
  verifyTableManipulation(stringStoreConfiguration.table());
  b=new ConfigurationBuilder();
  b.persistence().addStore(JdbcBinaryStoreConfigurationBuilder.class).connectionPool().connectionUrl(JDBC_URL).withProperties(props);
  Configuration binaryConfiguration=b.build();
  JdbcBinaryStoreConfiguration binaryStoreConfiguration=(JdbcBinaryStoreConfiguration)binaryConfiguration.persistence().stores().get(0);
  verifyTableManipulation(binaryStoreConfiguration.table());
  b=new ConfigurationBuilder();
  b.persistence().addStore(JdbcMixedStoreConfigurationBuilder.class).stringTable().tableNamePrefix("STRINGS_").binaryTable().tableNamePrefix("BINARY_").connectionPool().connectionUrl(JDBC_URL).withProperties(props);
  Configuration mixedConfiguration=b.build();
  JdbcMixedStoreConfiguration mixedStoreConfiguration=(JdbcMixedStoreConfiguration)mixedConfiguration.persistence().stores().get(0);
  verifyTableManipulation(mixedStoreConfiguration.binaryTable());
  verifyTableManipulation(mixedStoreConfiguration.stringTable());
}
