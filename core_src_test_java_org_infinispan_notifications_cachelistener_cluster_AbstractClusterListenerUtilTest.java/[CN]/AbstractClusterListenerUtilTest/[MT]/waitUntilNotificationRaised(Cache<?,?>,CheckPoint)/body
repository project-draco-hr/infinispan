{
  CacheNotifier cn=TestingUtil.extractComponent(cache,CacheNotifier.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(cn);
  CacheNotifier mockNotifier=mock(CacheNotifier.class,withSettings().defaultAnswer(forwardedAnswer));
  Answer answer=new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      checkPoint.trigger("pre_raise_notification_invoked");
      checkPoint.awaitStrict("pre_raise_notification_release",10,TimeUnit.SECONDS);
      try {
        return forwardedAnswer.answer(invocation);
      }
  finally {
        checkPoint.trigger("post_raise_notification_invoked");
        checkPoint.awaitStrict("post_raise_notification_release",10,TimeUnit.SECONDS);
      }
    }
  }
;
  doAnswer(answer).when(mockNotifier).notifyCacheEntryCreated(any(),any(),any(Metadata.class),eq(false),any(InvocationContext.class),any(FlagAffectedCommand.class));
  doAnswer(answer).when(mockNotifier).notifyCacheEntryModified(any(),any(),any(Metadata.class),any(),any(Metadata.class),anyBoolean(),any(InvocationContext.class),any(FlagAffectedCommand.class));
  doAnswer(answer).when(mockNotifier).notifyCacheEntryRemoved(any(),any(),any(Metadata.class),eq(false),any(InvocationContext.class),any(FlagAffectedCommand.class));
  TestingUtil.replaceComponent(cache,CacheNotifier.class,mockNotifier,true);
}
