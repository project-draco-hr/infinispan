{
  EmbeddedCacheManager cacheManager=cacheManagers.iterator().next();
  Cache cache=cacheManager.getCache();
  AtomicObjectFactory factory=new AtomicObjectFactory(cache);
  SortedMap<Integer,Integer> map=factory.getInstanceOf(ShardedTreeMap.class,"test",false,null,false,3);
  for (int i=0; i < NCALLS; i++) {
    map.put(i,i);
    map.get(i);
  }
  factory.disposeInstanceOf(ShardedTreeMap.class,"test",true);
  map=factory.getInstanceOf(ShardedTreeMap.class,"test",false,null,false,3);
  int a=map.size();
  log.debug(a);
  assertEquals(NCALLS,map.size());
  assertEquals(NCALLS / 2,map.subMap(0,NCALLS / 2).size());
  SortedMap<Integer,Integer> map2=factory.getInstanceOf(ShardedTreeMap.class,"test2",false,null,false,3);
  Map<Integer,Integer> toAdd=new HashMap<Integer,Integer>();
  for (int i=0; i < NCALLS; i++) {
    toAdd.put(i,i);
    toAdd.get(i);
  }
  map2.putAll(toAdd);
  assertEquals(NCALLS,map2.size());
  assertEquals(map2.lastKey(),Integer.valueOf(NCALLS - 1));
}
