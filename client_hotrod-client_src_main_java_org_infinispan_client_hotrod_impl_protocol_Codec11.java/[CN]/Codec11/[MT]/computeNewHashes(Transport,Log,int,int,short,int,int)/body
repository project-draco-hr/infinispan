{
  int numVirtualNodes=transport.readVInt();
  if (trace) {
    localLog.tracef("Topology change request: newTopologyId=%d, numKeyOwners=%d, " + "hashFunctionVersion=%d, hashSpaceSize=%d, clusterSize=%d, numVirtualNodes=%d",newTopologyId,numKeyOwners,hashFunctionVersion,hashSpace,clusterSize,numVirtualNodes);
  }
  Map<SocketAddress,Set<Integer>> servers2Hash=new LinkedHashMap<SocketAddress,Set<Integer>>();
  ConsistentHash ch=null;
  if (hashFunctionVersion == 0) {
    localLog.trace("Not using a consistent hash function (version 0)");
  }
 else   if (hashFunctionVersion == 1) {
    localLog.trace("Ignoring obsolete consistent hash function (version 1)");
  }
 else {
    ch=transport.getTransportFactory().getConsistentHashFactory().newConsistentHash(hashFunctionVersion);
  }
  for (int i=0; i < clusterSize; i++) {
    String host=transport.readString();
    int port=transport.readUnsignedShort();
    int baseHashCode=transport.read4ByteInt();
    int normalizedHashCode=getNormalizedHash(baseHashCode,ch);
    if (trace)     localLog.tracef("Server(%s:%d) read with base hash code %d, and normalized hash code %d",host,port,baseHashCode,normalizedHashCode);
    cacheHashCode(servers2Hash,host,port,normalizedHashCode);
    if (numVirtualNodes > 1)     calcVirtualHashCodes(baseHashCode,numVirtualNodes,servers2Hash,host,port,ch);
  }
  return servers2Hash;
}
