{
  final StateSequencer sequencer=new StateSequencer();
  sequencer.logicalThread("tx","tx:before_prepare_replay","tx:resume_prepare_replay");
  sequencer.logicalThread("sim","sim:before_extra_commit","sim:during_extra_commit");
  sequencer.order("tx:before_prepare_replay","sim:before_extra_commit","sim:during_extra_commit","tx:resume_prepare_replay");
  final Object key="key";
  assertEquals(Arrays.asList(address(0),address(1),address(2)),advancedCache(0).getDistributionManager().locate(key));
  Cache<Object,Object> primaryOwnerCache=cache(0);
  final Cache<Object,Object> newBackupOwnerCache=cache(3);
  final CountingInterceptor newBackupCounter=CountingInterceptor.inject(newBackupOwnerCache);
  final CountingInterceptor primaryCounter=CountingInterceptor.inject(primaryOwnerCache);
  final CountingInterceptor oldBackup2Counter=CountingInterceptor.inject(cache(2));
  advanceOnInterceptor(sequencer,newBackupOwnerCache,CallInterceptor.class,matchCommand(PrepareCommand.class).matchCount(0).build()).before("tx:before_prepare_replay","tx:resume_prepare_replay");
  advanceOnInterceptor(sequencer,newBackupOwnerCache,TransactionSynchronizerInterceptor.class,matchCommand(CommitCommand.class).matchCount(1).build()).before("sim:during_extra_commit");
  final DummyTransactionManager transactionManager=(DummyTransactionManager)tm(0);
  transactionManager.begin();
  primaryOwnerCache.put(key,VALUE);
  final DummyTransaction transaction=transactionManager.getTransaction();
  TransactionTable transactionTable0=TestingUtil.getTransactionTable(primaryOwnerCache);
  final GlobalTransaction gtx=transactionTable0.getLocalTransaction(transaction).getGlobalTransaction();
  transaction.runPrepare();
  assertEquals("Wrong transaction status before killing backup owner.",Status.STATUS_PREPARED,transaction.getStatus());
  killMember(1);
  final int currentTopologyId=TestingUtil.extractComponentRegistry(primaryOwnerCache).getStateTransferManager().getCacheTopology().getTopologyId();
  Future<Object> secondCommitFuture=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      sequencer.advance("sim:before_extra_commit");
      CommitCommand command=new CommitCommand(newBackupOwnerCache.getName(),gtx);
      command.setTopologyId(currentTopologyId);
      CommandsFactory cf=TestingUtil.extractCommandsFactory(newBackupOwnerCache);
      cf.initializeReplicableCommand(command,true);
      try {
        command.perform(null);
      }
 catch (      Throwable throwable) {
        throw new CacheException(throwable);
      }
      return null;
    }
  }
);
  checkIfTransactionExists(newBackupOwnerCache);
  assertEquals("Wrong transaction status after killing backup owner.",Status.STATUS_PREPARED,transaction.getStatus());
  transaction.runCommitTx();
  secondCommitFuture.get(10,SECONDS);
  assertNoTransactions();
  assertEquals("Wrong number of prepares!",1,newBackupCounter.numberPrepares.get());
  assertEquals("Wrong number of commits!",1,newBackupCounter.numberCommits.get());
  assertEquals("Wrong number of rollbacks!",0,newBackupCounter.numberRollbacks.get());
  assertEquals("Wrong number of prepares!",2,oldBackup2Counter.numberPrepares.get());
  assertEquals("Wrong number of commits!",1,oldBackup2Counter.numberCommits.get());
  assertEquals("Wrong number of rollbacks!",0,oldBackup2Counter.numberRollbacks.get());
  assertEquals("Wrong number of prepares!",0,primaryCounter.numberPrepares.get());
  assertEquals("Wrong number of commits!",0,primaryCounter.numberCommits.get());
  assertEquals("Wrong number of rollbacks!",0,primaryCounter.numberRollbacks.get());
  checkKeyInDataContainer(key);
}
