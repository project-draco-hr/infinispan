{
  MapReduceTask<String,String,String,Integer> task=invokeMapReduce(null,new ExceptionMapper(false),new ExceptionReducer(false));
  MapReduceTask<String,String,String,Integer> task1=invokeMapReduce(null,new ExceptionMapper(false),new ExceptionReducer(false));
  MapReduceTask<String,String,String,Integer> task2=invokeMapReduce(null,new ExceptionMapper(false),new ExceptionReducer(false));
  MapReduceTask<String,String,String,Integer> task3=null;
  MapReduceTask<String,String,String,Integer> task4=task1;
  Object objectForCompare=new Object();
  Map taskMap=new HashMap();
  taskMap.put(task,1);
  taskMap.put(task1,2);
  assertNotNull(taskMap.get(task));
  assertNotNull(taskMap.get(task1));
  assertNull(taskMap.get(task2));
  assertFalse(task1.equals(task2));
  assertFalse(task1.equals(task3));
  assertFalse(task1.equals(objectForCompare));
  assertTrue(task1.equals(task4));
  Pattern p=Pattern.compile("MapReduceTask \\[mapper=\\S+, reducer=\\S+, combiner=\\S*, keys=\\S*, taskId=\\S+\\]");
  Matcher m=p.matcher(task1.toString());
  assertTrue(m.find());
}
