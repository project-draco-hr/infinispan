{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case CLUSTER_NAME:
{
        builder.transport().clusterName(value);
        break;
      }
case DISTRIBUTED_SYNC_TIMEOUT:
{
      builder.transport().distributedSyncTimeout(Long.parseLong(value));
      break;
    }
case MACHINE_ID:
{
    builder.transport().machineId(value);
    break;
  }
case NODE_NAME:
{
  builder.transport().nodeName(value);
  break;
}
case RACK_ID:
{
builder.transport().rackId(value);
break;
}
case SITE_ID:
{
builder.transport().siteId(value);
break;
}
case STRICT_PEER_TO_PEER:
{
builder.transport().strictPeerToPeer(Boolean.valueOf(value));
break;
}
case TRANSPORT_CLASS:
{
builder.transport().transport(Util.<Transport>getInstance(value,cl));
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case PROPERTIES:
{
builder.transport().withProperties(parseProperties(reader));
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
