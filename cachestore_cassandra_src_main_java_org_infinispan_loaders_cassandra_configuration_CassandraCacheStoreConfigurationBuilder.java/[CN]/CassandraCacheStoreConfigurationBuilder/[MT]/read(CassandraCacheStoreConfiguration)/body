{
  autoCreateKeyspace=template.autoCreateKeyspace();
  configurationPropertiesFile=template.configurationPropertiesFile();
  entryColumnFamily=template.entryColumnFamily();
  expirationColumnFamily=template.expirationColumnFamily();
  framed=template.framed();
  for (  CassandraServerConfiguration server : template.servers()) {
    this.addServer().host(server.host()).port(server.port());
  }
  keyMapper=template.keyMapper();
  keySpace=template.keySpace();
  password=template.password();
  readConsistencyLevel=template.readConsistencyLevel();
  sharedKeyspace=template.sharedKeyspace();
  username=template.username();
  writeConsistencyLevel=template.writeConsistencyLevel();
  fetchPersistentState=template.fetchPersistentState();
  ignoreModifications=template.ignoreModifications();
  properties=template.properties();
  purgeOnStartup=template.purgeOnStartup();
  purgeSynchronously=template.purgeSynchronously();
  async.read(template.async());
  singletonStore.read(template.singletonStore());
  return this;
}
