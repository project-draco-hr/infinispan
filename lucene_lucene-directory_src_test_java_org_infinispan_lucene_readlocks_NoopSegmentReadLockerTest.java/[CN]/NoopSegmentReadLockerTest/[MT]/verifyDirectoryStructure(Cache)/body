{
  FileListCacheValue fileList=(FileListCacheValue)cache.get(new FileListCacheKey(INDEX_NAME));
  AssertJUnit.assertNotNull(fileList);
  int fileListCacheKeyInstances=0;
  for (  Object key : cache.keySet()) {
    if (key instanceof ChunkCacheKey) {
      ChunkCacheKey existingChunkKey=(ChunkCacheKey)key;
      AssertJUnit.assertEquals(existingChunkKey.getIndexName(),INDEX_NAME);
      Object value=cache.get(existingChunkKey);
      AssertJUnit.assertNotNull(value);
      AssertJUnit.assertTrue(value instanceof byte[]);
      byte[] buffer=(byte[])cache.get(existingChunkKey);
      AssertJUnit.assertTrue(buffer.length != 0);
    }
 else     if (key instanceof FileCacheKey) {
      FileCacheKey fileCacheKey=(FileCacheKey)key;
      AssertJUnit.assertEquals(fileCacheKey.getIndexName(),INDEX_NAME);
      String filename=fileCacheKey.getFileName();
      Object value=cache.get(fileCacheKey);
      AssertJUnit.assertNotNull(value);
      AssertJUnit.assertTrue(value instanceof FileMetadata);
      FileMetadata metadata=(FileMetadata)value;
      long totalFileSize=metadata.getSize();
      long actualFileSize=DirectoryIntegrityCheck.deepCountFileSize(fileCacheKey,cache);
      AssertJUnit.assertEquals(actualFileSize,totalFileSize);
      if (filename.contains(this.filename)) {
        AssertJUnit.assertFalse(fileCacheKey + " should not have existed",fileList.contains(filename));
      }
 else {
        AssertJUnit.assertTrue(fileCacheKey + " should not have existed",fileList.contains(filename));
      }
    }
 else     if (key instanceof FileListCacheKey) {
      fileListCacheKeyInstances++;
      AssertJUnit.assertEquals(1,fileListCacheKeyInstances);
    }
  }
}
