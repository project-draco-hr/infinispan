{
  int sz=readUnsignedInt(in);
  byte type=in.readByte();
switch (type) {
case MAGICNUMBER_BOOLEAN:
{
      boolean isPrim=in.readBoolean();
      if (isPrim) {
        boolean[] a=new boolean[sz];
        for (int i=0; i < sz; i++)         a[i]=in.readBoolean();
        return a;
      }
 else {
        Boolean[] a=new Boolean[sz];
        for (int i=0; i < sz; i++)         a[i]=in.readBoolean();
        return a;
      }
    }
case MAGICNUMBER_INTEGER:
{
    boolean isPrim=in.readBoolean();
    if (isPrim) {
      int[] a=new int[sz];
      for (int i=0; i < sz; i++)       a[i]=in.readInt();
      return a;
    }
 else {
      Integer[] a=new Integer[sz];
      for (int i=0; i < sz; i++)       a[i]=in.readInt();
      return a;
    }
  }
case MAGICNUMBER_LONG:
{
  boolean isPrim=in.readBoolean();
  if (isPrim) {
    long[] a=new long[sz];
    for (int i=0; i < sz; i++)     a[i]=in.readLong();
    return a;
  }
 else {
    Long[] a=new Long[sz];
    for (int i=0; i < sz; i++)     a[i]=in.readLong();
    return a;
  }
}
case MAGICNUMBER_CHAR:
{
boolean isPrim=in.readBoolean();
if (isPrim) {
  char[] a=new char[sz];
  for (int i=0; i < sz; i++)   a[i]=in.readChar();
  return a;
}
 else {
  Character[] a=new Character[sz];
  for (int i=0; i < sz; i++)   a[i]=in.readChar();
  return a;
}
}
case MAGICNUMBER_BYTE:
{
boolean isPrim=in.readBoolean();
if (isPrim) {
byte[] a=new byte[sz];
int bsize=10240;
int offset=0;
int bytesLeft=sz;
while (bytesLeft > 0) {
  int read=in.read(a,offset,Math.min(bsize,bytesLeft));
  offset+=read;
  bytesLeft-=read;
}
return a;
}
 else {
Byte[] a=new Byte[sz];
for (int i=0; i < sz; i++) a[i]=in.readByte();
return a;
}
}
case MAGICNUMBER_SHORT:
{
boolean isPrim=in.readBoolean();
if (isPrim) {
short[] a=new short[sz];
for (int i=0; i < sz; i++) a[i]=in.readShort();
return a;
}
 else {
Short[] a=new Short[sz];
for (int i=0; i < sz; i++) a[i]=in.readShort();
return a;
}
}
case MAGICNUMBER_FLOAT:
{
boolean isPrim=in.readBoolean();
if (isPrim) {
float[] a=new float[sz];
for (int i=0; i < sz; i++) a[i]=in.readFloat();
return a;
}
 else {
Float[] a=new Float[sz];
for (int i=0; i < sz; i++) a[i]=in.readFloat();
return a;
}
}
case MAGICNUMBER_DOUBLE:
{
boolean isPrim=in.readBoolean();
if (isPrim) {
double[] a=new double[sz];
for (int i=0; i < sz; i++) a[i]=in.readDouble();
return a;
}
 else {
Double[] a=new Double[sz];
for (int i=0; i < sz; i++) a[i]=in.readDouble();
return a;
}
}
case MAGICNUMBER_OBJECT:
{
Object[] a=new Object[sz];
for (int i=0; i < sz; i++) a[i]=unmarshallObject(in,refs);
return a;
}
default :
throw new CacheException("Unknown array type");
}
}
