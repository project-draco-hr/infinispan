{
  if (newMembers.equals(baseCH.getMembers()))   return baseCH;
  int numSegments=baseCH.getNumSegments();
  int[] primaryOwners=new int[numSegments];
  int[] nodeUsage=new int[newMembers.size()];
  boolean foundOrphanSegments=false;
  for (int segmentId=0; segmentId < numSegments; segmentId++) {
    Address primaryOwner=baseCH.locatePrimaryOwnerForSegment(segmentId);
    int primaryOwnerIndex=newMembers.indexOf(primaryOwner);
    primaryOwners[segmentId]=primaryOwnerIndex;
    if (primaryOwnerIndex == -1) {
      foundOrphanSegments=true;
    }
 else {
      nodeUsage[primaryOwnerIndex]++;
    }
  }
  if (foundOrphanSegments) {
    for (int i=0; i < numSegments; i++) {
      if (primaryOwners[i] == -1) {
        int leastUsed=findLeastUsedNode(nodeUsage);
        primaryOwners[i]=leastUsed;
        nodeUsage[leastUsed]++;
      }
    }
  }
  int minSegmentsPerNode=numSegments / newMembers.size();
  Queue<Integer>[] segmentsByNode=new Queue[newMembers.size()];
  for (int segmentId=0; segmentId < primaryOwners.length; ++segmentId) {
    int owner=primaryOwners[segmentId];
    Queue<Integer> segments=segmentsByNode[owner];
    if (segments == null) {
      segmentsByNode[owner]=segments=new ArrayDeque<Integer>(minSegmentsPerNode);
    }
    segments.add(segmentId);
  }
  int mostUsedNode=0;
  for (int node=0; node < nodeUsage.length; node++) {
    while (nodeUsage[node] < minSegmentsPerNode) {
      if (nodeUsage[mostUsedNode] <= minSegmentsPerNode + 1) {
        mostUsedNode=findMostUsedNode(nodeUsage);
      }
      int segmentId=segmentsByNode[mostUsedNode].poll();
      primaryOwners[segmentId]=node;
      nodeUsage[mostUsedNode]--;
      nodeUsage[node]++;
    }
  }
  return new ReplicatedConsistentHash(baseCH.getHashFunction(),newMembers,primaryOwners);
}
