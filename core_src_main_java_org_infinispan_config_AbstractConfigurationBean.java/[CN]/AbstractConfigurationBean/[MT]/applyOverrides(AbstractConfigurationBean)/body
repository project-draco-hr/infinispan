{
  for (  String overridenField : overrides.overriddenConfigurationElements) {
    try {
      ReflectionUtil.setValue(this,overridenField,ReflectionUtil.getValue(overrides,overridenField));
    }
 catch (    Exception e1) {
      throw new CacheException("Could not apply value for field " + overridenField + " from instance "+ overrides+ " on instance "+ this,e1);
    }
  }
  List<Field> fields=ReflectionUtil.getFields(overrides.getClass(),AbstractConfigurationBean.class);
  for (  Field field : fields) {
    if (AbstractConfigurationBean.class.isAssignableFrom(field.getType())) {
      AbstractConfigurationBean fieldValueOverrides=null;
      AbstractConfigurationBean fieldValueThis=null;
      try {
        field.setAccessible(true);
        fieldValueOverrides=(AbstractConfigurationBean)field.get(overrides);
        fieldValueThis=(AbstractConfigurationBean)field.get(this);
        if (fieldValueThis == null && fieldValueOverrides != null) {
          field.set(this,fieldValueOverrides);
        }
 else         if (fieldValueOverrides != null && fieldValueThis != null) {
          fieldValueThis.applyOverrides(fieldValueOverrides);
        }
      }
 catch (      IllegalAccessException e) {
        String s="Could not apply override for field " + field + " in class "+ overrides;
        log.error(s,e);
        throw new CacheException(s,e);
      }
    }
  }
  fields=ReflectionUtil.getFields(overrides.getClass(),Collection.class);
  for (  Field field : fields) {
    Type genericType=field.getGenericType();
    if (genericType instanceof ParameterizedType) {
      ParameterizedType aType=(ParameterizedType)genericType;
      Type[] fieldArgTypes=aType.getActualTypeArguments();
      for (      Type fieldArgType : fieldArgTypes) {
        Class<?> fieldArgClass=(Class<?>)fieldArgType;
        if (!(fieldArgClass.isPrimitive() || fieldArgClass.equals(String.class))) {
          try {
            field.setAccessible(true);
            Collection<Object> c=(Collection<Object>)field.get(this);
            Collection<Object> c2=(Collection<Object>)field.get(overrides);
            if (c.isEmpty() && !c2.isEmpty()) {
              c.addAll(c2);
            }
 else             if (!c.isEmpty() && !c2.isEmpty()) {
              Iterator<?> i=c.iterator();
              Iterator<?> i2=c2.iterator();
              for (; i.hasNext() && i2.hasNext(); ) {
                Object nextThis=i.next();
                Object nextOverrides=i2.next();
                if (AbstractConfigurationBean.class.isAssignableFrom(nextThis.getClass()) && AbstractConfigurationBean.class.isAssignableFrom(nextOverrides.getClass())) {
                  ((AbstractConfigurationBean)nextThis).applyOverrides((AbstractConfigurationBean)nextOverrides);
                }
              }
              while (i2.hasNext()) {
                c.add(i2.next());
              }
            }
          }
 catch (          IllegalAccessException e) {
            String s="Could not apply override for field " + field + " in class "+ overrides.getClass();
            log.error(s,e);
            throw new CacheException(s,e);
          }
        }
      }
    }
  }
}
