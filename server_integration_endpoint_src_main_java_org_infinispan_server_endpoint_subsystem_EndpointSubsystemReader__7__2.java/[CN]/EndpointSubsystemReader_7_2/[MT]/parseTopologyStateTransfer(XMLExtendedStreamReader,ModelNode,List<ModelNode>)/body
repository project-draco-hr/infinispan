{
  PathAddress address=PathAddress.pathAddress(connector.get(OP_ADDR)).append(PathElement.pathElement(ModelKeys.TOPOLOGY_STATE_TRANSFER,ModelKeys.TOPOLOGY_STATE_TRANSFER_NAME));
  ModelNode topologyStateTransfer=Util.createAddOperation(address);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case AWAIT_INITIAL_RETRIEVAL:
{
        TopologyStateTransferResource.AWAIT_INITIAL_RETRIEVAL.parseAndSetParameter(value,topologyStateTransfer,reader);
        break;
      }
case EXTERNAL_HOST:
{
      TopologyStateTransferResource.EXTERNAL_HOST.parseAndSetParameter(value,topologyStateTransfer,reader);
      break;
    }
case EXTERNAL_PORT:
{
    TopologyStateTransferResource.EXTERNAL_PORT.parseAndSetParameter(value,topologyStateTransfer,reader);
    break;
  }
case LAZY_RETRIEVAL:
{
  TopologyStateTransferResource.LAZY_RETRIEVAL.parseAndSetParameter(value,topologyStateTransfer,reader);
  break;
}
case LOCK_TIMEOUT:
{
TopologyStateTransferResource.LOCK_TIMEOUT.parseAndSetParameter(value,topologyStateTransfer,reader);
break;
}
case REPLICATION_TIMEOUT:
{
TopologyStateTransferResource.REPLICATION_TIMEOUT.parseAndSetParameter(value,topologyStateTransfer,reader);
break;
}
case UPDATE_TIMEOUT:
{
ROOT_LOGGER.topologyUpdateTimeoutIgnored();
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
operations.add(topologyStateTransfer);
}
