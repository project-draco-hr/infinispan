{
  String name=reader.getAttributeValue(null,Attribute.NAME.getLocalName());
  ConfigurationBuilder builder=getConfigurationBuilder(holder,name);
  CacheMode baseCacheMode=CacheMode.DIST_SYNC;
  builder.clustering().cacheMode(baseCacheMode);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case OWNERS:
{
        builder.clustering().hash().numOwners(Integer.parseInt(value));
        break;
      }
case SEGMENTS:
{
      builder.clustering().hash().numSegments(Integer.parseInt(value));
      break;
    }
case L1_LIFESPAN:
{
    long lifespan=Long.parseLong(value);
    if (lifespan > 0)     builder.clustering().l1().enable().lifespan(lifespan);
 else     builder.clustering().l1().disable();
    break;
  }
case INVALIDATION_CLEANUP_TASK_FREQUENCY:
{
  builder.clustering().l1().cleanupTaskFrequency(Long.parseLong(value));
  break;
}
case CAPACITY_FACTOR:
{
builder.clustering().hash().capacityFactor(Float.parseFloat(value));
break;
}
case CONSISTENT_HASH_FACTORY:
{
builder.clustering().hash().consistentHashFactory(Util.<ConsistentHashFactory>getInstance(value,holder.getClassLoader()));
break;
}
default :
{
this.parseClusteredCacheAttribute(reader,i,attribute,value,builder,baseCacheMode);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case GROUPS:
{
parseGroups(reader,holder);
break;
}
default :
{
this.parseSharedStateCacheElement(reader,element,holder);
}
}
}
}
