{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    GlobalConfigurationBuilder builder=holder.getGlobalConfigurationBuilder();
switch (attribute) {
case NAME:
{
        builder.globalJmxStatistics().cacheManagerName(value);
        break;
      }
case ALIASES:
{
      log.ignoreXmlAttribute(attribute);
      break;
    }
case DEFAULT_CACHE:
{
    holder.setDefaultCacheName(value);
    break;
  }
case JNDI_NAME:
{
  log.ignoreXmlAttribute(attribute);
  break;
}
case START:
{
log.ignoreXmlAttribute(attribute);
break;
}
case LISTENER_EXECUTOR:
{
builder.listenerThreadPool().read(createThreadPoolConfiguration(value,ASYNC_NOTIFICATION_EXECUTOR));
break;
}
case EVICTION_EXECUTOR:
{
builder.evictionThreadPool().read(createThreadPoolConfiguration(value,EVICTION_SCHEDULED_EXECUTOR));
break;
}
case REPLICATION_QUEUE_EXECUTOR:
{
builder.replicationQueueThreadPool().read(createThreadPoolConfiguration(value,ASYNC_REPLICATION_QUEUE_EXECUTOR));
break;
}
case PERSISTENCE_EXECUTOR:
{
builder.persistenceThreadPool().read(createThreadPoolConfiguration(value,PERSISTENCE_EXECUTOR));
break;
}
case STATE_TRANSFER_EXECUTOR:
{
builder.stateTransferThreadPool().read(createThreadPoolConfiguration(value,STATE_TRANSFER_EXECUTOR));
break;
}
case MODULE:
{
log.ignoreXmlAttribute(attribute);
break;
}
case STATISTICS:
{
builder.globalJmxStatistics().enabled(Boolean.valueOf(value));
break;
}
case SHUTDOWN_HOOK:
{
builder.shutdown().hookBehavior(ShutdownHookBehavior.valueOf(value));
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case TRANSPORT:
{
parseTransport(reader,holder);
break;
}
case LOCAL_CACHE:
{
parseLocalCache(reader,holder);
break;
}
case INVALIDATION_CACHE:
{
parseInvalidationCache(reader,holder);
break;
}
case REPLICATED_CACHE:
{
parseReplicatedCache(reader,holder);
break;
}
case DISTRIBUTED_CACHE:
{
parseDistributedCache(reader,holder);
break;
}
case SERIALIZATION:
{
parseSerialization(reader,holder);
break;
}
case MODULES:
{
parseModules(reader,holder);
break;
}
case JMX:
{
parseJmx(reader,holder);
break;
}
case SECURITY:
{
parseGlobalSecurity(reader,holder);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
