{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case STOP_TIMEOUT:
{
        builder.transaction().cacheStopTimeout(Long.parseLong(value));
        break;
      }
case MODE:
{
      TransactionMode txMode=TransactionMode.valueOf(value);
      builder.transaction().transactionMode(txMode.getMode());
      builder.transaction().useSynchronization(!txMode.isXAEnabled());
      builder.transaction().recovery().enabled(txMode.isRecoveryEnabled());
      builder.invocationBatching().enable(txMode.isBatchingEnabled());
      if (txMode.isRecoveryEnabled()) {
        builder.transaction().syncCommitPhase(true).syncRollbackPhase(true);
      }
      break;
    }
case LOCKING:
{
    builder.transaction().lockingMode(LockingMode.valueOf(value));
    break;
  }
case TRANSACTION_MANAGER_LOOKUP_CLASS:
{
  builder.transaction().transactionManagerLookup(Util.<TransactionManagerLookup>getInstance(value,holder.getClassLoader()));
  break;
}
case REAPER_WAKE_UP_INTERVAL:
{
builder.transaction().reaperWakeUpInterval(Long.parseLong(value));
break;
}
case COMPLETED_TX_TIMEOUT:
{
builder.transaction().completedTxTimeout(Long.parseLong(value));
break;
}
case TRANSACTION_PROTOCOL:
{
builder.transaction().transactionProtocol(TransactionProtocol.valueOf(value));
break;
}
case AUTO_COMMIT:
{
builder.transaction().autoCommit(Boolean.parseBoolean(value));
break;
}
case RECOVERY_INFO_CACHE_NAME:
{
builder.transaction().recovery().recoveryInfoCacheName(value);
break;
}
case NOTIFICATIONS:
{
builder.transaction().notifications(Boolean.parseBoolean(value));
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
ParseUtils.requireNoContent(reader);
}
