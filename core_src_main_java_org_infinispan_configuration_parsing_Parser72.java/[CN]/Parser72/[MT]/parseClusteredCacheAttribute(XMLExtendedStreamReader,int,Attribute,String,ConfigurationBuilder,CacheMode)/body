{
switch (attribute) {
case ASYNC_MARSHALLING:
{
      if (reader.getSchema().since(9,0)) {
        throw ParseUtils.unexpectedAttribute(reader,attribute.getLocalName());
      }
 else {
        log.ignoredReplicationQueueAttribute(attribute.getLocalName(),reader.getLocation().getLineNumber());
      }
      break;
    }
case MODE:
{
    Mode mode=Mode.valueOf(value);
    builder.clustering().cacheMode(mode.apply(baseCacheMode));
    break;
  }
case QUEUE_SIZE:
{
  if (reader.getSchema().since(9,0)) {
    throw ParseUtils.unexpectedAttribute(reader,attribute.getLocalName());
  }
 else {
    log.ignoredReplicationQueueAttribute(attribute.getLocalName(),reader.getLocation().getLineNumber());
  }
  break;
}
case QUEUE_FLUSH_INTERVAL:
{
if (reader.getSchema().since(9,0)) {
  throw ParseUtils.unexpectedAttribute(reader,attribute.getLocalName());
}
 else {
  log.ignoredReplicationQueueAttribute(attribute.getLocalName(),reader.getLocation().getLineNumber());
}
break;
}
case REMOTE_TIMEOUT:
{
builder.clustering().remoteTimeout(Long.parseLong(value));
break;
}
default :
{
this.parseCacheAttribute(reader,index,attribute,value,builder);
}
}
}
