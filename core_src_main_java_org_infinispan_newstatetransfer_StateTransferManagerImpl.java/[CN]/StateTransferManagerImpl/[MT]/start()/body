{
  if (trace) {
    log.tracef("Starting state transfer manager on " + rpcManager.getAddress());
  }
  CacheJoinInfo joinInfo=new CacheJoinInfo(new DefaultConsistentHashFactory(),configuration.clustering().hash().hash(),configuration.clustering().hash().numVirtualNodes(),configuration.clustering().hash().numOwners(),configuration.clustering().stateTransfer().timeout());
  localTopologyManager.join(cacheName,joinInfo,new CacheTopologyHandler(){
    private CacheTopology cacheTopology;
    @Override public CacheTopology getStatus(){
      return cacheTopology;
    }
    @Override public void updateConsistentHash(    int topologyId,    ConsistentHash currentCH,    ConsistentHash pendingCH){
      rebalance(topologyId,currentCH,pendingCH);
    }
    @Override public void rebalance(    int topologyId,    ConsistentHash currentCH,    ConsistentHash pendingCH){
      cacheTopology=new CacheTopology(topologyId,currentCH,pendingCH);
      ConsistentHash ch=pendingCH != null ? pendingCH : currentCH;
      onTopologyUpdate(topologyId,ch);
    }
  }
);
}
