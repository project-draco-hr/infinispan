{
  super();
  if (masterCacheNode == null)   throw new IllegalArgumentException("Can not use null cache for DefaultExecutorService");
 else   if (localExecutorService == null)   throw new IllegalArgumentException("Can not use null instance of ExecutorService");
 else {
    try {
      if (localExecutorService.isShutdown())       throw new IllegalArgumentException("Can not use an instance of ExecutorService which is shutdown");
    }
 catch (    IllegalStateException e) {
      if (takeExecutorOwnership) {
        throw new IllegalArgumentException("Can not take ownership of a ManagedExecutorService");
      }
    }
  }
  this.cache=masterCacheNode.getAdvancedCache();
  ComponentRegistry registry=SecurityActions.getCacheComponentRegistry(cache);
  ensureAccessPermissions(cache);
  ensureProperCacheState(cache);
  ensureFullCache(cache);
  this.rpc=SecurityActions.getCacheRpcManager(cache);
  this.invoker=registry.getComponent(AsyncInterceptorChain.class);
  this.factory=registry.getComponent(CommandsFactory.class);
  this.marshaller=registry.getComponent(StreamingMarshaller.class,CACHE_MARSHALLER);
  this.cancellationService=registry.getComponent(CancellationService.class);
  this.localExecutorService=localExecutorService;
  this.takeExecutorOwnership=takeExecutorOwnership;
  this.timeService=registry.getTimeService();
  this.clusterDependentLogic=registry.getComponent(ClusteringDependentLogic.class);
}
