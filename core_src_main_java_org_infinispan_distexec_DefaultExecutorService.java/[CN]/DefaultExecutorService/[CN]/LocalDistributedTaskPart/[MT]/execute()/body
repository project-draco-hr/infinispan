{
  log.debugf("Sending %s to self",this);
  try {
    Callable<V> call=new Callable<V>(){
      @Override public V call() throws Exception {
        return doLocalInvoke();
      }
      private V doLocalInvoke() throws Exception {
        getCommand().init(cache);
        DistributedTaskLifecycleService lifecycle=DistributedTaskLifecycleService.getInstance();
        try {
          lifecycle.onPreExecute(getCommand().getCallable(),cache);
          cancellationService.register(Thread.currentThread(),getCommand().getUUID());
          V result=getCommand().perform(null);
          future.notifyDone(result);
          return result;
        }
 catch (        Exception e) {
          future.notifyException(e);
          throw e;
        }
 finally {
          lifecycle.onPostExecute(getCommand().getCallable());
          cancellationService.unregister(getCommand().getUUID());
        }
      }
    }
;
    future.setFuture(localExecutorService.submit(call));
  }
 catch (  Throwable e1) {
    log.localExecutionFailed(e1);
  }
}
