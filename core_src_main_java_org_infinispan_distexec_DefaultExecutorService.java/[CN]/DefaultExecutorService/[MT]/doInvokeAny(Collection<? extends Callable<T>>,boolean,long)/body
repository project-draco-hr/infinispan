{
  if (tasks == null)   throw new NullPointerException();
  int ntasks=tasks.size();
  if (ntasks == 0)   throw new IllegalArgumentException();
  List<Future<T>> futures=new ArrayList<Future<T>>(ntasks);
  CompletionService<T> ecs=new DistributedExecutionCompletionService<T>(this);
  try {
    ExecutionException ee=null;
    long lastTime=(timed) ? timeService.time() : 0;
    Iterator<? extends Callable<T>> it=tasks.iterator();
    futures.add(ecs.submit(it.next()));
    --ntasks;
    int active=1;
    for (; ; ) {
      Future<T> f=ecs.poll();
      if (f == null) {
        if (ntasks > 0) {
          --ntasks;
          futures.add(ecs.submit(it.next()));
          ++active;
        }
 else         if (active == 0)         break;
 else         if (timed) {
          f=ecs.poll(nanos,TimeUnit.NANOSECONDS);
          if (f == null)           throw new TimeoutException();
          long now=timeService.time();
          nanos-=timeService.timeDuration(lastTime,now,TimeUnit.NANOSECONDS);
          lastTime=now;
        }
 else         f=ecs.take();
      }
      if (f != null) {
        --active;
        try {
          return f.get();
        }
 catch (        InterruptedException ie) {
          throw ie;
        }
catch (        ExecutionException eex) {
          ee=eex;
        }
catch (        RuntimeException rex) {
          ee=new ExecutionException(rex);
        }
      }
    }
    if (ee == null)     ee=new ExecutionException(){
      private static final long serialVersionUID=200818694545553992L;
    }
;
    throw ee;
  }
  finally {
    for (    Future<T> f : futures)     f.cancel(true);
  }
}
