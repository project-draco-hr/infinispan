{
  if (!ctx.isInTxScope())   throw new IllegalStateException("Locks should only be acquired within the scope of a transaction!");
  try {
    boolean skipLocking=hasSkipLocking(command);
    if (skipLocking) {
      return invokeNextInterceptor(ctx,command);
    }
    if (ctx.isOriginLocal()) {
      final boolean isSingleKeyAndLocal=!command.multipleKeys() && cdl.localNodeIsPrimaryOwner(command.getSingleKey());
      boolean needBackupLocks=!isSingleKeyAndLocal || isStateTransferInProgress();
      if (needBackupLocks && !command.hasFlag(Flag.CACHE_MODE_LOCAL)) {
        LocalTransaction localTx=(LocalTransaction)ctx.getCacheTransaction();
        if (!localTx.getAffectedKeys().containsAll(command.getKeys())) {
          invokeNextInterceptor(ctx,command);
        }
 else {
          log.tracef("Already own locks on keys: %s, skipping remote call",command.getKeys());
        }
      }
      ctx.addAllAffectedKeys(command.getKeys());
    }
    if (command.isUnlock()) {
      if (ctx.isOriginLocal())       throw new AssertionError("There's no advancedCache.unlock so this must have originated remotely.");
      releaseLocksOnFailureBeforePrepare(ctx);
      return Boolean.FALSE;
    }
    long lockTimeout=getLockAcquisitionTimeout(command,false);
    for (    Object key : command.getKeys()) {
      lockAndRegisterBackupLock(ctx,key,lockTimeout,false);
    }
    return Boolean.TRUE;
  }
 catch (  Throwable te) {
    releaseLocksOnFailureBeforePrepare(ctx);
    throw te;
  }
}
