{
  return new ExtendedModuleCommandFactory(){
    @Override public Map<Byte,Class<? extends ReplicableCommand>> getModuleCommands(){
      Map<Byte,Class<? extends ReplicableCommand>> map=new HashMap<Byte,Class<? extends ReplicableCommand>>(2);
      map.put(CustomReplicableCommand.COMMAND_ID,CustomReplicableCommand.class);
      map.put(CustomCacheRpcCommand.COMMAND_ID,CustomCacheRpcCommand.class);
      return map;
    }
    @Override public ReplicableCommand fromStream(    byte commandId,    Object[] args){
      ReplicableCommand c;
switch (commandId) {
case CustomReplicableCommand.COMMAND_ID:
        c=new CustomReplicableCommand();
      break;
default :
    throw new IllegalArgumentException("Not registered to handle command id " + commandId);
}
c.setParameters(commandId,args);
return c;
}
@Override public CacheRpcCommand fromStream(byte commandId,Object[] args,String cacheName){
CacheRpcCommand c;
switch (commandId) {
case CustomCacheRpcCommand.COMMAND_ID:
  c=new CustomCacheRpcCommand(cacheName);
break;
default :
throw new IllegalArgumentException("Not registered to handle command id " + commandId);
}
c.setParameters(commandId,args);
return c;
}
}
;
}
