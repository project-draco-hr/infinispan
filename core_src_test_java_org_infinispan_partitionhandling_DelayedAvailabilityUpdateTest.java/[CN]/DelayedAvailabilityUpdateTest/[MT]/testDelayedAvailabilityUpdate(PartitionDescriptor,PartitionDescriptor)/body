{
  Object k0Existing=new MagicKey("k0Existing",cache(p0.node(0)),cache(p0.node(1)));
  Object k1Existing=new MagicKey("k1Existing",cache(p0.node(1)),cache(p1.node(0)));
  Object k2Existing=new MagicKey("k2Existing",cache(p1.node(0)),cache(p1.node(1)));
  Object k3Existing=new MagicKey("k3Existing",cache(p1.node(1)),cache(p0.node(0)));
  Object k0Missing=new MagicKey("k0Missing",cache(p0.node(0)),cache(p0.node(1)));
  Object k1Missing=new MagicKey("k1Missing",cache(p0.node(1)),cache(p1.node(0)));
  Object k2Missing=new MagicKey("k2Missing",cache(p1.node(0)),cache(p1.node(1)));
  Object k3Missing=new MagicKey("k3Missing",cache(p1.node(1)),cache(p0.node(0)));
  Cache<Object,Object> cacheP0N0=cache(p0.node(0));
  cacheP0N0.put(k0Existing,"v0");
  cacheP0N0.put(k1Existing,"v1");
  cacheP0N0.put(k2Existing,"v2");
  cacheP0N0.put(k3Existing,"v3");
  StateSequencer ss=new StateSequencer();
  ss.logicalThread("main","main:block_availability_update_p0n0","main:after_availability_update_p0n1","main:check_availability","main:resume_availability_update_p0n0");
  log.debugf("Delaying the availability mode update on node %s",address(p0.node(0)));
  cache(p0.node(0)).addListener(new BlockAvailabilityChangeListener(true,ss,"main:block_availability_update_p0n0","main:resume_availability_update_p0n0"));
  cache(p0.node(1)).addListener(new BlockAvailabilityChangeListener(false,ss,"main:after_availability_update_p0n1"));
  splitCluster(p0.getNodes(),p1.getNodes());
  ss.enter("main:check_availability");
  assertEquals(AvailabilityMode.AVAILABLE,partitionHandlingManager(p0.node(0)).getAvailabilityMode());
  partition(0).assertKeyAvailableForRead(k0Existing,"v0");
  partition(0).assertKeysNotAvailableForRead(k1Existing,k2Existing);
  assertPartiallyAvailable(p0,k3Existing,"v3");
  partition(0).assertKeyAvailableForRead(k0Missing,null);
  partition(0).assertKeysNotAvailableForRead(k1Missing,k2Missing);
  assertPartiallyAvailable(p0,k3Missing,null);
  ss.exit("main:check_availability");
  partition(0).assertDegradedMode();
  partition(1).assertDegradedMode();
}
