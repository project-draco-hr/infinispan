def set(self, key, val, time=0, min_compress_len=0):
    'Unconditionally sets a key to a given value in the memcache.\n\n        The C{key} can optionally be an tuple, with the first element\n        being the server hash value and the second being the key.\n        If you want to avoid making this module calculate a hash value.\n        You may prefer, for example, to keep all of a given user\'s objects\n        on the same memcache server, so you could use the user\'s unique\n        id as the hash value.\n\n        @return: Nonzero on success.\n        @rtype: int\n        @param time: Tells memcached the time which this value should expire, either\n        as a delta number of seconds, or an absolute unix time-since-the-epoch\n        value. See the memcached protocol docs section "Storage Commands"\n        for more info on <exptime>. We default to 0 == cache forever.\n        @param min_compress_len: The threshold length to kick in auto-compression\n        of the value using the zlib.compress() routine. If the value being cached is\n        a string, then the length of the string is measured, else if the value is an\n        object, then the length of the pickle result is measured. If the resulting\n        attempt at compression yeilds a larger string than the input, then it is\n        discarded. For backwards compatability, this parameter defaults to 0,\n        indicating don\'t ever try to compress.\n        '
    return self._set('set', key, val, time, min_compress_len)
