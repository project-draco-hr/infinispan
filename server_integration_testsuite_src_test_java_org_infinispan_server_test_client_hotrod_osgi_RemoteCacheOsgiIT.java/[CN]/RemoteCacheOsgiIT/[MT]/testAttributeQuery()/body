{
  builder.marshaller(new ProtoStreamMarshaller());
  manager=new RemoteCacheManager(builder.build());
  RemoteCache<Integer,Object> cache=manager.getCache(INDEXED_CACHE);
  String bankSchemaFile=Util.read(bundleContext.getBundle().getResource("/sample_bank_account/bank.proto").openStream());
  FileDescriptorSource fds=new FileDescriptorSource();
  fds.addProtoFile("sample_bank_account/bank.proto",bankSchemaFile);
  SerializationContext ctx=ProtoStreamMarshaller.getSerializationContext(manager);
  ctx.registerProtoFiles(fds);
  ctx.registerMarshaller(new UserMarshaller());
  ctx.registerMarshaller(new GenderMarshaller());
  ctx.registerMarshaller(new AddressMarshaller());
  ctx.registerMarshaller(new AccountMarshaller());
  ctx.registerMarshaller(new LimitsMarshaller());
  ctx.registerMarshaller(new TransactionMarshaller());
  ProtoSchemaBuilder protoSchemaBuilder=new ProtoSchemaBuilder();
  String testSchemaFile=protoSchemaBuilder.fileName("test.proto").addClass(User.class).build(ctx);
  RemoteCache<String,String> metadataCache=manager.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME);
  metadataCache.put("sample_bank_account/bank.proto",bankSchemaFile);
  metadataCache.put("test.proto",testSchemaFile);
  assertFalse(metadataCache.containsKey(ProtobufMetadataManagerConstants.ERRORS_KEY_SUFFIX));
  cache.put(1,createUser1());
  cache.put(2,createUser2());
  cache.put(3,createNote());
  User userFromCache=(User)cache.get(1);
  assertUser(userFromCache);
  Note noteFromCache=(Note)cache.get(3);
  assertNote(noteFromCache);
  QueryFactory qf=Search.getQueryFactory(cache);
  Query query=qf.from(User.class).having("name").eq("Tom").toBuilder().build();
  List list=query.list();
  assertNotNull(list);
  assertEquals(1,list.size());
  assertEquals(User.class,list.get(0).getClass());
  assertUser((User)list.get(0));
  query=qf.from(Note.class).having("author.name").eq("name").toBuilder().build();
  list=query.list();
  assertNotNull(list);
  assertEquals(1,list.size());
  assertEquals(Note.class,list.get(0).getClass());
  assertNote((Note)list.get(0));
}
