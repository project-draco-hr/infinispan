{
  builder.marshaller(new ProtoStreamMarshaller());
  manager=new RemoteCacheManager(builder.build());
  RemoteCache<Integer,User> cache=manager.getCache(INDEXED_CACHE);
  RemoteCache<String,String> metadataCache=manager.getCache(ProtobufMetadataManager.PROTOBUF_METADATA_CACHE_NAME);
  Bundle sampleDomainDefinitionBundle=getInstalledBundle("org.infinispan.protostream.sample-domain-definition");
  String file=Util.read(bundleContext.getBundle().getResource("/sample_bank_account/bank.proto").openStream());
  metadataCache.put("sample_bank_account/bank.proto",file);
  SerializationContext ctx=ProtoStreamMarshaller.getSerializationContext(manager);
  FileDescriptorSource fds=new FileDescriptorSource();
  fds.addProtoFile("sample_bank_account/bank.proto",file);
  ctx.registerProtoFiles(fds);
  ctx.registerMarshaller(new UserMarshaller());
  ctx.registerMarshaller(new GenderMarshaller());
  ctx.registerMarshaller(new AddressMarshaller());
  ctx.registerMarshaller(new AccountMarshaller());
  ctx.registerMarshaller(new LimitsMarshaller());
  ctx.registerMarshaller(new TransactionMarshaller());
  cache.put(1,createUser1());
  cache.put(2,createUser2());
  User fromCache=cache.get(1);
  assertUser(fromCache);
  QueryFactory qf=Search.getQueryFactory(cache);
  Query query=qf.from(User.class).having("name").eq("Tom").toBuilder().build();
  List<User> list=query.list();
  assertNotNull(list);
  assertEquals(1,list.size());
  assertEquals(User.class,list.get(0).getClass());
  assertUser(list.get(0));
}
