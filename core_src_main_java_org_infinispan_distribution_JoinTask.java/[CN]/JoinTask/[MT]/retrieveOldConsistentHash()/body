{
  ConsistentHash result=null;
  long minSleepTime=500, maxSleepTime=2000;
  int maxWaitTime=(int)configuration.getRehashRpcTimeout() * 10;
  Random rand=new Random();
  long giveupTime=System.currentTimeMillis() + maxWaitTime;
  do {
    if (trace)     log.trace("Requesting old consistent hash from coordinator");
    Map<Address,Response> resp;
    Set<Address> addresses;
    try {
      resp=rpcManager.invokeRemotely(coordinator(),cf.buildRehashControlCommand(JOIN_REQ,self),SYNCHRONOUS,configuration.getRehashRpcTimeout(),true);
      addresses=parseResponses(resp.values());
      if (log.isDebugEnabled())       log.debugf("Retrieved old consistent hash address list %s",addresses);
    }
 catch (    TimeoutException te) {
      resp=null;
      addresses=null;
      if (log.isDebugEnabled())       log.debug("Timed out waiting for responses.");
    }
    if (addresses == null) {
      long time=rand.nextInt((int)(maxSleepTime - minSleepTime) / 10);
      time=(time * 10) + minSleepTime;
      if (trace)       log.tracef("Sleeping for %s",Util.prettyPrintTime(time));
      Thread.sleep(time);
    }
 else {
      result=createConsistentHash(configuration,addresses,distributionManager.getTopologyInfo());
    }
  }
 while (result == null && System.currentTimeMillis() < giveupTime);
  if (result == null)   throw new CacheException("Unable to retrieve old consistent hash from coordinator even after several attempts at sleeping and retrying!");
  return result;
}
