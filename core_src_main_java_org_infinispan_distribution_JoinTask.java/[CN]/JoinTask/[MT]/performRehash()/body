{
  long start=System.currentTimeMillis();
  if (log.isDebugEnabled())   log.debugf("Commencing rehash on node: %s. Before start, distributionManager.joinComplete = %s",getMyAddress(),distributionManager.isJoinComplete());
  boolean cleanup=false;
  boolean aborted=false;
  try {
    getPermissionToJoin();
    cleanup=true;
    distributionManager.setConsistentHash(chNew);
    if (configuration.isRehashEnabled()) {
      broadcastNewConsistentHash();
      Address myAddress=rpcManager.getTransport().getAddress();
      RehashControlCommand cmd=cf.buildRehashControlCommand(PULL_STATE_JOIN,myAddress,null,chOld,chNew,null);
      List<Address> addressesWhoMaySendStuff=getAddressesWhoMaySendStuff(chNew,configuration.getNumOwners());
      Set<Future<Void>> stateRetrievalProcesses=new HashSet<Future<Void>>(addressesWhoMaySendStuff.size());
      for (      Address stateProvider : addressesWhoMaySendStuff) {
        stateRetrievalProcesses.add(statePullExecutor.submit(new JoinStateGrabber(stateProvider,cmd,chNew)));
      }
      for (      Future<Void> f : stateRetrievalProcesses)       f.get();
    }
 else {
      broadcastNewConsistentHash();
      if (trace)       log.trace("Rehash not enabled, so not pulling state.");
    }
  }
 catch (  Exception e) {
    log.abortingJoin(e);
    broadcastAbort(cleanup);
    aborted=true;
    throw new CacheException("Unexpected exception",e);
  }
 finally {
    distributionManager.setJoinComplete(true);
    distributionManager.setRehashInProgress(false);
    inboundInvocationHandler.blockTillNoLongerRetrying(cf.getCacheName());
    if (!aborted) {
      signalJoinRehashEnd();
      if (configuration.isRehashEnabled())       invalidateInvalidHolders(chOld,chNew);
      log.joinRehashCompleted(self,Util.prettyPrintTime(System.currentTimeMillis() - start));
    }
 else {
      log.joinRehashAborted(self,Util.prettyPrintTime(System.currentTimeMillis() - start));
    }
  }
}
