{
  long start=System.currentTimeMillis();
  if (log.isDebugEnabled())   log.debug("Commencing rehash on node: %s. Before start, distributionManager.joinComplete = %s",getMyAddress(),distributionManager.isJoinComplete());
  ConsistentHash chOld, chNew;
  boolean cleanup=false;
  try {
    if (distributionManager.isJoinComplete()) {
      throw new IllegalStateException("Join on " + getMyAddress() + " cannot be complete without rehash to finishing");
    }
    chOld=retrieveOldConsistentHash();
    cleanup=true;
    if (chOld.getCaches().contains(self))     chNew=chOld;
 else     chNew=createConsistentHash(configuration,chOld.getCaches(),distributionManager.getTopologyInfo(),self);
    distributionManager.setConsistentHash(chNew);
    try {
      if (configuration.isRehashEnabled()) {
        broadcastNewCh();
        Address myAddress=rpcManager.getTransport().getAddress();
        RehashControlCommand cmd=cf.buildRehashControlCommand(PULL_STATE_JOIN,myAddress,null,chOld,chNew,null);
        List<Address> addressesWhoMaySendStuff=getAddressesWhoMaySendStuff(chNew,configuration.getNumOwners());
        Set<Future<Void>> stateRetrievalProcesses=new HashSet<Future<Void>>(addressesWhoMaySendStuff.size());
        for (        Address stateProvider : addressesWhoMaySendStuff) {
          stateRetrievalProcesses.add(statePullExecutor.submit(new JoinStateGrabber(stateProvider,cmd,chNew)));
        }
        for (        Future<Void> f : stateRetrievalProcesses)         f.get();
      }
 else {
        broadcastNewCh();
        if (trace)         log.trace("Rehash not enabled, so not pulling state.");
      }
    }
  finally {
      distributionManager.setJoinComplete(true);
      distributionManager.setRehashInProgress(false);
      inboundInvocationHandler.blockTillNoLongerRetrying(cf.getCacheName());
      rpcManager.broadcastRpcCommandInFuture(cf.buildRehashControlCommand(JOIN_REHASH_END,self),true,new NotifyingFutureImpl(null));
      if (configuration.isRehashEnabled())       invalidateInvalidHolders(chOld,chNew);
    }
  }
 catch (  Exception e) {
    log.error("Caught exception!  Aborting join.",e);
    broadcastAbort(cleanup);
    throw new CacheException("Unexpected exception",e);
  }
 finally {
    log.info("%s completed join rehash in %s!",self,Util.prettyPrintTime(System.currentTimeMillis() - start));
  }
}
