{
  long start=System.currentTimeMillis();
  boolean trace=log.isTraceEnabled();
  if (log.isDebugEnabled())   log.debug("Commencing");
  TransactionLogger transactionLogger=dmi.getTransactionLogger();
  boolean unlocked=false;
  ConsistentHash chOld;
  ConsistentHash chNew;
  try {
    dmi.joinComplete=false;
    chOld=retrieveOldCH(trace);
    if (chOld.getCaches().contains(self))     chNew=chOld;
 else     chNew=createConsistentHash(configuration,chOld.getCaches(),self);
    dmi.setConsistentHash(chNew);
    if (configuration.isRehashEnabled()) {
      transactionLogger.enable();
      rpcManager.broadcastRpcCommand(cf.buildRehashControlCommand(JOIN_REHASH_START,self),true,true);
      Address myAddress=rpcManager.getTransport().getAddress();
      RehashControlCommand cmd=cf.buildRehashControlCommand(PULL_STATE_JOIN,myAddress,null,chOld,chNew,null);
      List<Address> addressesWhoMaySendStuff=getAddressesWhoMaySendStuff(chNew,configuration.getNumOwners());
      List<Response> resps=rpcManager.invokeRemotely(addressesWhoMaySendStuff,cmd,SYNCHRONOUS,configuration.getRehashRpcTimeout(),true);
      for (      Response r : resps) {
        if (r instanceof SuccessfulResponse) {
          Map<Object,InternalCacheValue> state=getStateFromResponse((SuccessfulResponse)r);
          dmi.applyState(chNew,state);
        }
      }
      dmi.drainLocalTransactionLog();
    }
 else {
      if (trace)       log.trace("Rehash not enabled, so not pulling state.");
    }
    unlocked=true;
    if (!configuration.isRehashEnabled()) {
      rpcManager.broadcastRpcCommand(cf.buildRehashControlCommand(JOIN_REHASH_START,self),true,true);
    }
    rpcManager.broadcastRpcCommand(cf.buildRehashControlCommand(JOIN_REHASH_END,self),true,true);
    rpcManager.invokeRemotely(coordinator(),cf.buildRehashControlCommand(JOIN_COMPLETE,self),SYNCHRONOUS,configuration.getRehashRpcTimeout(),true);
    if (configuration.isRehashEnabled()) {
      invalidateInvalidHolders(chOld,chNew);
    }
    if (trace)     log.info("{0} completed join in {1}!",self,Util.prettyPrintTime(System.currentTimeMillis() - start));
  }
 catch (  Exception e) {
    log.error("Caught exception!",e);
    throw new CacheException("Unexpected exception",e);
  }
 finally {
    if (!unlocked)     transactionLogger.unlockAndDisable();
    dmi.joinComplete=true;
  }
}
