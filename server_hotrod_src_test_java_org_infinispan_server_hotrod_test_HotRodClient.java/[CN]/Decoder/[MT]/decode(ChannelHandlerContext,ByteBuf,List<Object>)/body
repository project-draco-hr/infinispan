{
  log.trace("Decode response from server");
  buf.readUnsignedByte();
  long id=ExtendedByteBuf.readUnsignedLong(buf);
  OperationResponse opCode=OperationResponse.fromCode((byte)buf.readUnsignedByte());
  OperationStatus status=OperationStatus.fromCode((byte)buf.readUnsignedByte());
  short topologyChangeMarker=buf.readUnsignedByte();
  Op op=client.idToOp.get(id);
  AbstractTestTopologyAwareResponse topologyChangeResponse;
  if (topologyChangeMarker == 1) {
    int topologyId=readUnsignedInt(buf);
    if (op.clientIntel == Constants.INTELLIGENCE_TOPOLOGY_AWARE) {
      int numberClusterMembers=readUnsignedInt(buf);
      ServerAddress[] viewArray=new ServerAddress[numberClusterMembers];
      for (int i=0; i < numberClusterMembers; i++) {
        String host=readString(buf);
        int port=readUnsignedShort(buf);
        viewArray[i]=new ServerAddress(host,port);
      }
      topologyChangeResponse=new TestTopologyAwareResponse(topologyId,Arrays.asList(viewArray));
    }
 else     if (op.clientIntel == Constants.INTELLIGENCE_HASH_DISTRIBUTION_AWARE) {
      if (op.version < 20)       topologyChangeResponse=read1xHashDistAwareHeader(buf,topologyId,op);
 else       topologyChangeResponse=read2xHashDistAwareHeader(buf,topologyId,op);
    }
 else {
      throw new UnsupportedOperationException("Client intelligence " + op.clientIntel + " not supported");
    }
  }
 else {
    topologyChangeResponse=null;
  }
  Response resp;
switch (opCode) {
case StatsResponse:
    int size=readUnsignedInt(buf);
  Map<String,String> stats=new HashMap<>();
for (int i=0; i < size; ++i) {
  stats.put(readString(buf),readString(buf));
}
resp=new TestStatsResponse(op.version,id,op.cacheName,op.clientIntel,op.topologyId,topologyChangeResponse,stats);
break;
case PutResponse:
case PutIfAbsentResponse:
case ReplaceResponse:
case ReplaceIfUnmodifiedResponse:
case RemoveResponse:
case RemoveIfUnmodifiedResponse:
boolean checkPrevious;
if (op.version >= 10 && op.version <= 13) {
checkPrevious=(op.flags & ProtocolFlag.ForceReturnPreviousValue.getValue()) == 1;
}
 else {
checkPrevious=status == SuccessWithPrevious || status == NotExecutedWithPrevious;
}
if (checkPrevious) {
int length=readUnsignedInt(buf);
if (length == 0) {
resp=new TestResponseWithPrevious(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,Optional.empty());
}
 else {
byte[] previous=new byte[length];
buf.readBytes(previous);
resp=new TestResponseWithPrevious(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,Optional.of(previous));
}
}
 else {
resp=new TestResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse);
}
break;
case ContainsKeyResponse:
case ClearResponse:
case PingResponse:
case AddClientListenerResponse:
case RemoveClientListenerResponse:
resp=new TestResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse);
break;
case GetWithVersionResponse:
if (status == Success) {
long version=buf.readLong();
Optional<byte[]> data=Optional.of(ExtendedByteBuf.readRangedBytes(buf));
resp=new TestGetWithVersionResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,data,version);
}
 else {
resp=new TestGetWithVersionResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,Optional.empty(),0);
}
break;
case GetWithMetadataResponse:
if (status == Success) {
long created=-1;
int lifespan=-1;
long lastUsed=-1;
int maxIdle=-1;
byte flags=buf.readByte();
if ((flags & 0x01) != 0x01) {
created=buf.readLong();
lifespan=readUnsignedInt(buf);
}
if ((flags & 0x02) != 0x02) {
lastUsed=buf.readLong();
maxIdle=readUnsignedInt(buf);
}
long version=buf.readLong();
Optional<byte[]> data=Optional.of(ExtendedByteBuf.readRangedBytes(buf));
resp=new TestGetWithMetadataResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,data,version,created,lifespan,lastUsed,maxIdle);
}
 else {
resp=new TestGetWithMetadataResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,Optional.empty(),0,-1,-1,-1,-1);
}
break;
case GetResponse:
if (status == Success) {
Optional<byte[]> data=Optional.of(ExtendedByteBuf.readRangedBytes(buf));
resp=new TestGetResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,data);
}
 else {
resp=new TestGetResponse(op.version,id,op.cacheName,op.clientIntel,opCode,status,op.topologyId,topologyChangeResponse,Optional.empty());
}
break;
case BulkGetResponse:
byte done=buf.readByte();
Map<byte[],byte[]> bulkBuffer=new HashMap<>();
while (done == 1) {
bulkBuffer.put(ExtendedByteBuf.readRangedBytes(buf),ExtendedByteBuf.readRangedBytes(buf));
done=buf.readByte();
}
resp=new TestBulkGetResponse(op.version,id,op.cacheName,op.clientIntel,op.topologyId,topologyChangeResponse,bulkBuffer);
break;
case BulkGetKeysResponse:
done=buf.readByte();
Set<byte[]> bulkKeys=new HashSet<>();
while (done == 1) {
bulkKeys.add(ExtendedByteBuf.readRangedBytes(buf));
done=buf.readByte();
}
resp=new TestBulkGetKeysResponse(op.version,id,op.cacheName,op.clientIntel,op.topologyId,topologyChangeResponse,bulkKeys);
break;
case QueryResponse:
byte[] result=ExtendedByteBuf.readRangedBytes(buf);
resp=new TestQueryResponse(op.version,id,op.cacheName,op.clientIntel,op.topologyId,topologyChangeResponse,result);
break;
case AuthMechListResponse:
size=readUnsignedInt(buf);
Set<String> mechs=new HashSet<>();
for (int i=0; i < size; ++i) {
mechs.add(readString(buf));
}
resp=new TestAuthMechListResponse(op.version,id,op.cacheName,op.clientIntel,op.topologyId,topologyChangeResponse,mechs);
break;
case AuthResponse:
{
boolean complete=buf.readBoolean();
byte[] challenge=ExtendedByteBuf.readRangedBytes(buf);
resp=new TestAuthResponse(op.version,id,op.cacheName,op.clientIntel,op.topologyId,topologyChangeResponse,complete,challenge);
break;
}
case CacheEntryCreatedEventResponse:
case CacheEntryModifiedEventResponse:
case CacheEntryRemovedEventResponse:
byte[] listenerId=ExtendedByteBuf.readRangedBytes(buf);
byte isCustom=buf.readByte();
boolean isRetried=buf.readByte() == 1;
if (isCustom == 1 || isCustom == 2) {
byte[] eventData=ExtendedByteBuf.readRangedBytes(buf);
resp=new TestCustomEvent(client.protocolVersion,id,client.defaultCacheName,opCode,listenerId,isRetried,eventData);
}
 else {
byte[] key=ExtendedByteBuf.readRangedBytes(buf);
if (opCode == OperationResponse.CacheEntryRemovedEventResponse) {
resp=new TestKeyEvent(client.protocolVersion,id,client.defaultCacheName,listenerId,isRetried,key);
}
 else {
long dataVersion=buf.readLong();
resp=new TestKeyWithVersionEvent(client.protocolVersion,id,client.defaultCacheName,opCode,listenerId,isRetried,key,dataVersion);
}
}
break;
case SizeResponse:
long lsize=ExtendedByteBuf.readUnsignedLong(buf);
resp=new TestSizeResponse(op.version,id,op.cacheName,op.clientIntel,op.topologyId,topologyChangeResponse,lsize);
break;
case ErrorResponse:
if (op == null) resp=new TestErrorResponse((byte)10,id,"",(short)0,status,0,topologyChangeResponse,readString(buf));
 else resp=new TestErrorResponse(op.version,id,op.cacheName,op.clientIntel,status,op.topologyId,topologyChangeResponse,readString(buf));
break;
default :
resp=null;
break;
}
if (resp != null) {
log.tracef("Got response from server: %s",resp);
out.add(resp);
}
}
