{
  Cache<String,String> cache=startCache();
  try {
    if (isMaster) {
      int numServers=cache.getCacheManager().getMembers().size();
      int numberPerWorker=numPoints / numServers;
      DistributedExecutorService des=new DefaultExecutorService(cache);
      long start=System.currentTimeMillis();
      List<Future<Integer>> results=des.submitEverywhere(new CircleTest(numberPerWorker));
      int insideCircleCount=0;
      for (      Future<Integer> f : results)       insideCircleCount+=f.get();
      double appxPi=4.0 * insideCircleCount / numPoints;
      System.out.printf("Pi approximation is %s, computed in %s using %s nodes.%n",appxPi,Util.prettyPrintTime(System.currentTimeMillis() - start),numServers);
    }
 else {
      System.out.println("Slave node waiting for Map/Reduce tasks.  Ctrl-C to exit.");
      LockSupport.park();
    }
  }
  finally {
    cache.getCacheManager().stop();
  }
}
