{
  ExecutorService executorService=Executors.newFixedThreadPool(NUM_NODES * WORKERS_PER_NODE,new ThreadFactory(){
    int i=0;
    @Override public synchronized Thread newThread(    Runnable r){
      return new Thread(r,"Worker-" + i++);
    }
  }
);
  Set<Future<Void>> futures=new HashSet<Future<Void>>(NUM_NODES * WORKERS_PER_NODE);
  Set<String> keysToIgnore=new HashSet<String>();
  for (int i=0; i < NUM_NODES; i++) {
    Cache<String,String> c=cache(i);
    for (int j=0; j < WORKERS_PER_NODE; j++) {
      Future<Void> f=executorService.submit(new Stressor(c,i,j,keysToIgnore));
      futures.add(f);
      sleepRandom(500);
    }
  }
  log.info("Waiting for stressors to finish");
  for (  Future<Void> f : futures)   f.get();
  TestingUtil.killCacheManagers(cacheManagers.get(0));
  Map<Address,Cache<Object,Object>> cacheMap=new HashMap<Address,Cache<Object,Object>>();
  for (int i=1; i < NUM_NODES; i++) {
    Cache<Object,Object> c=cache(i);
    cacheMap.put(address(c),c);
  }
  Thread.sleep(25000);
  TestingUtil.blockUntilViewsReceived(60000,false,cacheMap.values());
  TestingUtil.waitForRehashToComplete(cacheMap.values());
  AbstractWheelConsistentHash hash=(AbstractWheelConsistentHash)cache(1).getAdvancedCache().getDistributionManager().getConsistentHash();
  for (int i=0; i < NUM_NODES; i++) {
    for (int j=0; j < WORKERS_PER_NODE; j++) {
      for (int k=0; k < NUM_ITERATIONS; k++) {
        String key=keyFor(i,j,k);
        if (keysToIgnore.contains(key)) {
          log.infof("Skipping test on failing key %s",key);
        }
 else {
          List<Address> owners=hash.locate(key,2);
          for (          Map.Entry<Address,Cache<Object,Object>> e : cacheMap.entrySet()) {
            try {
              if (owners.contains(e.getKey()))               DistributionTestHelper.assertIsInContainerImmortal(e.getValue(),key);
            }
 catch (            Throwable th) {
              log.fatalf("Key %s (hash %s) should be on owners %s according to %s",key,hash.getNormalizedHash(key),owners,hash);
              throw th;
            }
          }
        }
      }
    }
  }
  executorService.shutdownNow();
}
