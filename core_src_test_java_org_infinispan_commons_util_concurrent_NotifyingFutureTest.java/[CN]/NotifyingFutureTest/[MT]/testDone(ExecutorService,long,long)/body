{
  final NotifyingFutureImpl<Integer> nf=new NotifyingFutureImpl<Integer>();
  Future<Integer> f=service.submit(new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      Thread.sleep(beforeExecuteDelay);
      int retval=42;
      nf.notifyDone(retval);
      return retval;
    }
  }
);
  try {
    assertEquals(Integer.valueOf(42),f.get(0,TimeUnit.NANOSECONDS));
  }
 catch (  TimeoutException e) {
  }
  Thread.sleep(beforeSetDelay);
  nf.setFuture(f);
  try {
    assertEquals(Integer.valueOf(42),f.get(0,TimeUnit.NANOSECONDS));
  }
 catch (  TimeoutException e) {
  }
  final AtomicInteger retval=new AtomicInteger(-1);
  final CountDownLatch latch=new CountDownLatch(1);
  nf.attachListener(new FutureListener<Integer>(){
    @Override public void futureDone(    Future<Integer> future){
      try {
        retval.set(future.get());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
 finally {
        latch.countDown();
      }
    }
  }
);
  latch.await();
  assertTrue(nf.isDone());
  assertFalse(nf.isCancelled());
  assertTrue(f.isDone());
  assertFalse(f.isCancelled());
  assertEquals(42,retval.get());
  assertEquals(Integer.valueOf(42),nf.get());
  assertEquals(Integer.valueOf(42),f.get());
}
