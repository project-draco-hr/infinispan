{
class TestingException extends Exception {
    TestingException(    String message){
      super(message);
    }
  }
  final NotifyingFutureImpl<Integer> nf=createNotifyingFuture();
  final AtomicReference<Exception> exceptionInListener=new AtomicReference<>();
  nf.attachListener(new FutureListener<Integer>(){
    @Override public void futureDone(    Future<Integer> future){
      exceptionInListener.set(callGetAndExtractException(future));
    }
  }
);
  Future<Integer> future=fork(new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      TestingException testingException=new TestingException("Ignore me");
      nf.notifyException(testingException);
      throw testingException;
    }
  }
);
  nf.setFuture(future);
  callGetAndExtractException(future);
  ExceptionAssertion.assertThat(exceptionInListener.get()).IsNotNull().isTypeOf(ExecutionException.class).hasCauseTypeOf(TestingException.class);
  FutureAssertion.assertThat(nf,FUTURE_GET_TIMEOUT_MS).isDone().isNotCanceled();
  FutureAssertion.assertThat(future,FUTURE_GET_TIMEOUT_MS).isDone().isNotCanceled();
}
