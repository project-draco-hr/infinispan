{
  final NotifyingFutureImpl<Integer> nf=new NotifyingFutureImpl<Integer>();
  Future<Integer> f=service.submit(new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      Thread.sleep(beforeExecuteDelay);
      Exception e=new IllegalStateException();
      nf.notifyException(e);
      throw e;
    }
  }
);
  Thread.sleep(beforeSetDelay);
  nf.setFuture(f);
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<Throwable> ex=new AtomicReference<Throwable>(null);
  nf.attachListener(new FutureListener<Integer>(){
    @Override public void futureDone(    Future<Integer> future){
      try {
        future.get();
      }
 catch (      Throwable t) {
        ex.set(t);
      }
 finally {
        latch.countDown();
      }
    }
  }
);
  if (!latch.await(5,TimeUnit.SECONDS)) {
    fail("Not finished withing time limit (5 seconds)");
  }
  assertTrue(nf.isDone());
  assertFalse(nf.isCancelled());
  assertTrue(f.isDone());
  assertFalse(f.isCancelled());
  assertTrue(ex.get() instanceof ExecutionException);
  assertTrue(ex.get().getCause() instanceof IllegalStateException);
  boolean thrown=false;
  try {
    nf.get();
  }
 catch (  ExecutionException e) {
    assertTrue(e instanceof ExecutionException);
    assertTrue(e.getCause() instanceof IllegalStateException);
    thrown=true;
  }
  assertTrue(thrown);
}
