{
  for (int i=0; i < numEntries; ++i)   advancedCache(i % numNodes).put("key" + i,"value" + i);
  for (int i=0; i < numEntries; ++i)   for (  Cache<Object,Object> cache : caches())   assertEquals(cache.get("key" + i),"value" + i);
  for (int j=0; j < 10; ++j) {
    Set<Object> mutableKeys=new HashSet<>();
    Map<Object,Object> expected=new HashMap<>();
    for (int i=j; i < numEntries; i+=10) {
      mutableKeys.add("key" + i);
      expected.put("key" + i,"value" + i);
    }
    Set<Object> immutableKeys=Collections.unmodifiableSet(mutableKeys);
    for (    Cache<Object,Object> cache : caches()) {
      Map<Object,Object> result=cache.getAdvancedCache().getAll(immutableKeys);
      assertEquals(result,expected);
    }
  }
}
