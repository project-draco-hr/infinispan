{
  float initialCapacityFactor=primaryOwner != null ? builder.getCapacityFactor(primaryOwner) : 0;
  Address best=null;
  float bestSegmentsPerCapacity=initialCapacityFactor != 0 ? (builder.getPrimaryOwned(primaryOwner) - 1) / initialCapacityFactor : Float.MAX_VALUE;
  for (  Address candidate : candidates) {
    int primaryOwned=builder.getPrimaryOwned(candidate);
    float capacityFactor=builder.getCapacityFactor(candidate);
    if ((primaryOwned + 1) <= capacityFactor * bestSegmentsPerCapacity) {
      best=candidate;
      bestSegmentsPerCapacity=(primaryOwned + 1) / capacityFactor;
    }
  }
  return best;
}
