{
  lock();
  try {
    int c=count - 1;
    HashEntry<K,V>[] tab=table;
    int index=hash & tab.length - 1;
    HashEntry<K,V> first=tab[index];
    HashEntry<K,V> e=first;
    while (e != null && (e.hash != hash || !key.equals(e.key))) {
      e=e.next;
    }
    V oldValue=null;
    if (e != null) {
      V v=e.value;
      if (isEvictionRemoval(isEvict,oldValue)) {
        evictionListener.onEntryChosenForEviction(v);
      }
      if (value == null || value.equals(v)) {
        oldValue=v;
        ++modCount;
        eviction.onEntryRemove(e);
        HashEntry<K,V> newFirst=e.next;
        for (HashEntry<K,V> p=first; p != e; p=p.next) {
          eviction.onEntryRemove(p);
          newFirst=eviction.createNewEntry(p.key,p.hash,newFirst,p.value);
          eviction.onEntryMiss(newFirst);
        }
        tab[index]=newFirst;
        count=c;
      }
    }
    if (!isEvictionRemoval(isEvict,oldValue)) {
      if (trace)       log.tracef("Entry removed (not evicting), so remove from cache store too");
      evictionListener.onEntryRemoved(key);
    }
    return oldValue;
  }
  finally {
    unlock();
  }
}
