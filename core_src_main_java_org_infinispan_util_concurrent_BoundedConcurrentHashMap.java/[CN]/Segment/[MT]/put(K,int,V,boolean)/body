{
  lock();
  Set<HashEntry<K,V>> evicted=null;
  try {
    int c=count;
    if (c++ > threshold && eviction.strategy() == Eviction.NONE) {
      rehash();
    }
    HashEntry<K,V>[] tab=table;
    int index=hash & tab.length - 1;
    HashEntry<K,V> first=tab[index];
    HashEntry<K,V> e=first;
    while (e != null && (e.hash != hash || !map.keyEquivalence.equals(key,e.key))) {
      e=e.next;
    }
    V oldValue;
    if (e != null) {
      oldValue=e.value;
      if (!onlyIfAbsent) {
        e.value=value;
        eviction.onEntryHit(e);
      }
    }
 else {
      oldValue=null;
      ++modCount;
      count=c;
      if (eviction.strategy() != Eviction.NONE) {
        eviction.execute();
        tab[index]=eviction.createNewEntry(key,hash,first,value);
        evicted=eviction.onEntryMiss(tab[index]);
      }
 else {
        tab[index]=eviction.createNewEntry(key,hash,first,value);
      }
      map.evictionListener.onEntryActivated(key);
    }
    return oldValue;
  }
  finally {
    unlock();
    notifyEvictionListener(evicted);
  }
}
