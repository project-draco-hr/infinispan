{
  super(capacity,lf,IterationOrder.ACCESS_ORDER,new Equivalence<HashEntry<K,V>>(){
    @Override public int hashCode(    Object obj){
      if (obj instanceof HashEntry<?,?>) {
        return s.map.keyEquivalence.hashCode(((HashEntry<?,?>)obj).key);
      }
      return 0;
    }
    @Override public boolean equals(    HashEntry<K,V> obj,    Object otherObj){
      if (otherObj instanceof HashEntry<?,?>) {
        return s.map.keyEquivalence.equals(obj.key,((HashEntry<?,?>)otherObj).key);
      }
      return false;
    }
    @Override public String toString(    Object obj){
      HashEntry<K,V> entry=(HashEntry<K,V>)obj;
      return "HashEntry [Key=" + entry.key + ", Value="+ entry.value+ ", Hash="+ entry.hash+ "]";
    }
    @Override public boolean isComparable(    Object obj){
      return false;
    }
    @Override public int compare(    HashEntry<K,V> obj,    HashEntry<K,V> otherObj){
      return 0;
    }
  }
,s.map.valueEquivalence);
  this.segment=s;
  this.trimDownSize=capacity;
  this.evicted=new HashSet<HashEntry<K,V>>();
}
