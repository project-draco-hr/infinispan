{
  final RemoteCache<String,String> remoteCache=remoteCacheManager.getCache(cacheName.name());
  CheckPoint checkPoint=injectBlockingCommandInterceptor(cacheName.name());
  Future<Void> op=fork(new Callable<Void>(){
    @Override public Void call() throws Exception {
      remoteCache.put("key","value1");
      return null;
    }
  }
);
  checkPoint.awaitStrict("before-block",30,TimeUnit.SECONDS);
  try {
    for (int i=0; i < 50; ++i) {
      try {
        remoteCache.put("key","value" + i);
        AssertJUnit.fail("It should have fail with lock timeout!");
      }
 catch (      Exception e) {
        log.trace("Exception caught",e);
        if (!e.getLocalizedMessage().contains("Unable to acquire lock after")) {
          throw e;
        }
      }
    }
  }
  finally {
    checkPoint.trigger("block");
  }
  op.get();
  AssertJUnit.assertEquals("value1",remoteCache.get("key"));
}
