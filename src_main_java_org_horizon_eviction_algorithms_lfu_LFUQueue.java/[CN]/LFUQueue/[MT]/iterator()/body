{
  return new Iterator<Object>(){
    Iterator<Set<Object>> setIterator=iterationMap.values().iterator();
    Set<Object> currentKeySet;
    Iterator<Object> keyIterator;
    Object currentKey;
    public boolean hasNext(){
      while (keyIterator == null || !keyIterator.hasNext()) {
        if (setIterator.hasNext()) {
          currentKeySet=setIterator.next();
          keyIterator=currentKeySet.iterator();
        }
 else         return false;
      }
      return true;
    }
    public Object next(){
      if (keyIterator == null && !hasNext())       throw new IllegalStateException("Out of bounds");
      return (currentKey=keyIterator.next());
    }
    public void remove(){
      if (currentKey == null)       throw new IllegalStateException("Call next() before remove()!");
      keyIterator.remove();
      if (currentKeySet.isEmpty())       setIterator.remove();
      visitLog.remove(currentKey);
    }
  }
;
}
