{
switch (element) {
case BACKUPS:
{
      this.parseBackups(reader,cache,operations);
      break;
    }
case BACKUP_FOR:
{
    this.parseBackupFor(reader,cache);
    break;
  }
case CLUSTER_LOADER:
{
  this.parseClusterLoader(reader,cache,operations);
  break;
}
case COMPATIBILITY:
{
this.parseCompatibility(reader,cache,operations);
break;
}
case LOCKING:
{
this.parseLocking(reader,cache,operations);
break;
}
case TRANSACTION:
{
this.parseTransaction(reader,cache,operations);
break;
}
case EVICTION:
{
this.parseEviction(reader,cache,operations);
break;
}
case EXPIRATION:
{
this.parseExpiration(reader,cache,operations);
break;
}
case LOADER:
{
this.parseCustomLoader(reader,cache,operations);
break;
}
case STORE:
{
this.parseCustomStore(reader,cache,operations);
break;
}
case FILE_STORE:
{
this.parseFileStore(reader,cache,operations);
break;
}
case STRING_KEYED_JDBC_STORE:
{
this.parseStringKeyedJDBCStore(reader,cache,operations);
break;
}
case BINARY_KEYED_JDBC_STORE:
{
this.parseBinaryKeyedJDBCStore(reader,cache,operations);
break;
}
case MIXED_KEYED_JDBC_STORE:
{
this.parseMixedKeyedJDBCStore(reader,cache,operations);
break;
}
case REMOTE_STORE:
{
this.parseRemoteStore(reader,cache,operations);
break;
}
case LEVELDB_STORE:
{
this.parseLevelDBStore(reader,cache,operations);
break;
}
case REST_STORE:
{
this.parseRestStore(reader,cache,operations);
break;
}
case INDEXING:
{
this.parseIndexing(reader,cache);
break;
}
case SECURITY:
{
this.parseCacheSecurity(reader,cache,operations);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
