{
  final int REHASH_TIMEOUT_SECONDS=60;
  final long giveup=System.nanoTime() + TimeUnit.SECONDS.toNanos(REHASH_TIMEOUT_SECONDS);
  for (  Cache c : caches) {
    if (c instanceof SecureCacheImpl) {
      c=(Cache)extractField(SecureCacheImpl.class,c,"delegate");
    }
    StateTransferManager stateTransferManager=extractComponent(c,StateTransferManager.class);
    Address cacheAddress=c.getAdvancedCache().getRpcManager().getAddress();
    while (true) {
      CacheTopology cacheTopology=stateTransferManager.getCacheTopology();
      ConsistentHash currentCH=cacheTopology.getCurrentCH();
      boolean rebalanceInProgress=cacheTopology.getPendingCH() != null;
      boolean chContainsAllMembers=currentCH.getMembers().size() == caches.length;
      boolean currentChIsBalanced=true;
      int actualNumOwners=Math.min(currentCH.getNumOwners(),currentCH.getMembers().size());
      for (int i=0; i < currentCH.getNumSegments(); i++) {
        if (currentCH.locateOwnersForSegment(i).size() < actualNumOwners) {
          currentChIsBalanced=false;
          break;
        }
      }
      if (chContainsAllMembers && !rebalanceInProgress && currentChIsBalanced)       break;
      if (System.nanoTime() > giveup) {
        String message;
        if (!chContainsAllMembers) {
          Address[] addresses=new Address[caches.length];
          for (int i=0; i < caches.length; i++) {
            addresses[i]=caches[i].getCacheManager().getAddress();
          }
          message=String.format("Timed out waiting for rebalancing to complete on node %s, " + "expected member list is %s, current member list is %s!",cacheAddress,Arrays.toString(addresses),cacheTopology.getCurrentCH().getMembers());
        }
 else {
          message=String.format("Timed out waiting for rebalancing to complete on node %s, " + "current topology is %s. rebalanceInProgress=%s, currentChIsBalanced=%s",c.getCacheManager().getAddress(),cacheTopology,rebalanceInProgress,currentChIsBalanced);
        }
        log.error(message);
        throw new RuntimeException(message);
      }
      LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(100));
    }
    log.trace("Node " + cacheAddress + " finished state transfer.");
  }
}
