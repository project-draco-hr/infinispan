{
  final Object key1=new SameHashCodeKey("key1");
  initializeKeyAndCheckData(key1,"v1");
  final Object key2=new SameHashCodeKey("key2");
  final Latch readLatch=new Latch();
  final Latch writeLatch=new Latch();
  final AtomicBoolean firstGet=new AtomicBoolean(false);
  final AfterEntryWrappingInterceptor afterEntryWrappingInterceptor=new AfterEntryWrappingInterceptor().injectThis(cache);
  afterEntryWrappingInterceptor.beforeGet=new Runnable(){
    @Override public void run(){
      if (firstGet.compareAndSet(false,true)) {
        readLatch.blockIfNeeded();
      }
    }
  }
;
  final SyncEvictionListener evictionListener=new SyncEvictionListener(){
    @CacheEntriesEvicted @Override public void evicted(    CacheEntriesEvictedEvent event){
      if (event.getEntries().containsKey(key1)) {
        writeLatch.blockIfNeeded();
      }
    }
  }
;
  cache.addListener(evictionListener);
  readLatch.enable();
  Future<Object> put=cache.putAsync(key2,"v2");
  writeLatch.waitToBlock(30,TimeUnit.SECONDS);
  Future<Object> get=cache.getAsync(key1);
  readLatch.waitToBlock(30,TimeUnit.SECONDS);
  assertEquals("Wrong value for key " + key1 + " in get operation.","v1",cache.get(key1));
  writeLatch.disable();
  put.get();
  readLatch.disable();
  assertEquals("Wrong value for key " + key1 + " in get operation.","v1",get.get());
  assertInMemory(key1,"v1");
  assertNotInMemory(key2,"v2");
}
