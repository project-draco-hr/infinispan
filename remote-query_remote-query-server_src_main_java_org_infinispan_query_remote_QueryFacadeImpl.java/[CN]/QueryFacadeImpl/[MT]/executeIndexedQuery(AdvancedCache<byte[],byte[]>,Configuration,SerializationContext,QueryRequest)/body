{
  final SearchManager searchManager=Search.getSearchManager(cache);
  final SearchIntegrator searchFactory=searchManager.unwrap(SearchIntegrator.class);
  final QueryCache queryCache=ComponentRegistryUtils.getQueryCache(cache);
  LuceneQueryParsingResult parsingResult;
  Query luceneQuery;
  if (queryCache != null) {
    KeyValuePair<String,Class> queryCacheKey=new KeyValuePair<String,Class>(request.getJpqlString(),LuceneQueryParsingResult.class);
    parsingResult=queryCache.get(queryCacheKey);
    if (parsingResult == null) {
      parsingResult=parseQuery(cacheConfiguration,serCtx,request.getJpqlString(),searchFactory);
      queryCache.put(queryCacheKey,parsingResult);
    }
  }
 else {
    parsingResult=parseQuery(cacheConfiguration,serCtx,request.getJpqlString(),searchFactory);
  }
  luceneQuery=parsingResult.getQuery();
  boolean isCompatMode=cacheConfiguration.compatibility().enabled();
  if (!isCompatMode) {
    BooleanQuery booleanQuery=new BooleanQuery();
    booleanQuery.add(new BooleanClause(new TermQuery(new Term(TYPE_FIELD_NAME,parsingResult.getTargetEntityName())),BooleanClause.Occur.MUST));
    booleanQuery.add(new BooleanClause(luceneQuery,BooleanClause.Occur.MUST));
    luceneQuery=booleanQuery;
  }
  CacheQuery cacheQuery=searchManager.getQuery(luceneQuery,parsingResult.getTargetEntity());
  if (parsingResult.getSort() != null) {
    cacheQuery=cacheQuery.sort(parsingResult.getSort());
  }
  int projSize=0;
  if (parsingResult.getProjections() != null && !parsingResult.getProjections().isEmpty()) {
    projSize=parsingResult.getProjections().size();
    cacheQuery=cacheQuery.projection(parsingResult.getProjections().toArray(new String[projSize]));
  }
  if (request.getStartOffset() > 0) {
    cacheQuery=cacheQuery.firstResult((int)request.getStartOffset());
  }
  if (request.getMaxResults() > 0) {
    cacheQuery=cacheQuery.maxResults(request.getMaxResults());
  }
  List<?> list=cacheQuery.list();
  return makeResponse(false,serCtx,list,projSize,cacheQuery.getResultSize(),list.size());
}
