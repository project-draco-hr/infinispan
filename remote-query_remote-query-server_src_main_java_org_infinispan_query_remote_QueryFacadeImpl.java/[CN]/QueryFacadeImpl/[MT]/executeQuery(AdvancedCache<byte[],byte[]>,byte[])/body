{
  final SerializationContext serCtx=ProtobufMetadataManager.getSerializationContext(cache.getCacheManager());
  QueryRequest request=ProtobufUtil.fromByteArray(serCtx,query,0,query.length,QueryRequest.class);
  SearchManager searchManager=Search.getSearchManager(cache);
  Query luceneQuery;
  List<String> projections;
  Class targetEntity;
  Descriptors.Descriptor messageDescriptor;
  QueryParser queryParser=new QueryParser();
  if (cache.getCacheConfiguration().compatibility().enabled()) {
    final QueryInterceptor queryInterceptor=ComponentRegistryUtils.getQueryInterceptor(cache);
    EntityNamesResolver entityNamesResolver=new EntityNamesResolver(){
      @Override public Class<?> getClassFromName(      String entityName){
        MessageMarshaller messageMarshaller=(MessageMarshaller)serCtx.getMarshaller(entityName);
        Class clazz=messageMarshaller.getJavaClass();
        Boolean isIndexed=queryInterceptor.getKnownClasses().get(clazz);
        return isIndexed != null && isIndexed ? clazz : null;
      }
    }
;
    LuceneProcessingChain processingChain=new LuceneProcessingChain((SearchFactoryIntegrator)searchManager.getSearchFactory(),entityNamesResolver,null);
    LuceneQueryParsingResult parsingResult=queryParser.parseQuery(request.getJpqlString(),processingChain);
    MessageMarshaller messageMarshaller=(MessageMarshaller)serCtx.getMarshaller(parsingResult.getTargetEntity());
    messageDescriptor=serCtx.getMessageDescriptor(messageMarshaller.getTypeName());
    targetEntity=parsingResult.getTargetEntity();
    projections=parsingResult.getProjections();
    luceneQuery=parsingResult.getQuery();
  }
 else {
    EntityNamesResolver entityNamesResolver=new EntityNamesResolver(){
      @Override public Class<?> getClassFromName(      String entityName){
        try {
          serCtx.getMessageDescriptor(entityName);
        }
 catch (        Exception e) {
          return null;
        }
        return ProtobufValueWrapper.class;
      }
    }
;
    IspnLuceneProcessingChain processingChain=new IspnLuceneProcessingChain(serCtx,(SearchFactoryIntegrator)searchManager.getSearchFactory(),entityNamesResolver,null);
    IspnLuceneQueryParsingResult parsingResult=queryParser.parseQuery(request.getJpqlString(),processingChain);
    messageDescriptor=parsingResult.getTargetType();
    targetEntity=parsingResult.getTargetEntity();
    projections=parsingResult.getProjections();
    QueryBuilder qb=searchManager.getSearchFactory().buildQueryBuilder().forEntity(targetEntity).get();
    luceneQuery=qb.bool().must(qb.keyword().onField(TYPE_FIELD_NAME).ignoreFieldBridge().matching(messageDescriptor.getFullName()).createQuery()).must(parsingResult.getQuery()).createQuery();
  }
  CacheQuery cacheQuery=searchManager.getQuery(luceneQuery,targetEntity);
  if (request.getSortCriteria() != null && !request.getSortCriteria().isEmpty()) {
    SortField[] sortField=new SortField[request.getSortCriteria().size()];
    int i=0;
    for (    QueryRequest.SortCriteria sc : request.getSortCriteria()) {
      Descriptors.FieldDescriptor field=getFieldDescriptor(messageDescriptor,sc.getAttributePath());
      int sortType=SortField.STRING;
      if (field != null) {
switch (field.getJavaType()) {
case INT:
case BOOLEAN:
case ENUM:
          sortType=SortField.INT;
        break;
case LONG:
      sortType=SortField.LONG;
    break;
case FLOAT:
  sortType=SortField.FLOAT;
break;
case DOUBLE:
sortType=SortField.DOUBLE;
break;
}
}
sortField[i++]=new SortField(sc.getAttributePath(),sortType,!sc.isAscending());
}
cacheQuery=cacheQuery.sort(new Sort(sortField));
}
int projSize=0;
if (projections != null && !projections.isEmpty()) {
projSize=projections.size();
cacheQuery=cacheQuery.projection(projections.toArray(new String[projSize]));
}
if (request.getStartOffset() > 0) {
cacheQuery=cacheQuery.firstResult((int)request.getStartOffset());
}
if (request.getMaxResults() > 0) {
cacheQuery=cacheQuery.maxResults(request.getMaxResults());
}
List list=cacheQuery.list();
List<WrappedMessage> results=new ArrayList<WrappedMessage>(projSize == 0 ? list.size() : list.size() * projSize);
for (Object o : list) {
if (projSize == 0) {
results.add(new WrappedMessage(o));
}
 else {
Object[] row=(Object[])o;
for (int j=0; j < projSize; j++) {
results.add(new WrappedMessage(row[j]));
}
}
}
QueryResponse response=new QueryResponse();
response.setNumResults(list.size());
response.setProjectionSize(projSize);
response.setResults(results);
return ProtobufUtil.toByteArray(serCtx,response);
}
