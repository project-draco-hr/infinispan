{
  final SearchManager searchManager=Search.getSearchManager(cache);
  final SearchIntegrator searchFactory=searchManager.getSearchFactory();
  final QueryCache queryCache=ComponentRegistryUtils.getQueryCache(cache);
  LuceneQueryParsingResult parsingResult;
  Query luceneQuery;
  if (queryCache != null) {
    KeyValuePair<String,Class> queryCacheKey=new KeyValuePair<String,Class>(request.getJpqlString(),LuceneQueryParsingResult.class);
    parsingResult=queryCache.get(queryCacheKey);
    if (parsingResult == null) {
      parsingResult=parseQuery(cache,serCtx,request.getJpqlString(),searchFactory);
      queryCache.put(queryCacheKey,parsingResult);
    }
  }
 else {
    parsingResult=parseQuery(cache,serCtx,request.getJpqlString(),searchFactory);
  }
  luceneQuery=parsingResult.getQuery();
  if (!cache.getCacheConfiguration().compatibility().enabled()) {
    QueryBuilder qb=searchFactory.buildQueryBuilder().forEntity(parsingResult.getTargetEntity()).get();
    luceneQuery=qb.bool().must(qb.keyword().onField(TYPE_FIELD_NAME).ignoreFieldBridge().ignoreAnalyzer().matching(parsingResult.getTargetEntityName()).createQuery()).must(luceneQuery).createQuery();
  }
  CacheQuery cacheQuery=searchManager.getQuery(luceneQuery,parsingResult.getTargetEntity());
  if (parsingResult.getSort() != null) {
    cacheQuery=cacheQuery.sort(parsingResult.getSort());
  }
  int projSize=0;
  if (parsingResult.getProjections() != null && !parsingResult.getProjections().isEmpty()) {
    projSize=parsingResult.getProjections().size();
    cacheQuery=cacheQuery.projection(parsingResult.getProjections().toArray(new String[projSize]));
  }
  if (request.getStartOffset() > 0) {
    cacheQuery=cacheQuery.firstResult((int)request.getStartOffset());
  }
  if (request.getMaxResults() > 0) {
    cacheQuery=cacheQuery.maxResults(request.getMaxResults());
  }
  List<?> list=cacheQuery.list();
  List<WrappedMessage> results=new ArrayList<WrappedMessage>(projSize == 0 ? list.size() : list.size() * projSize);
  for (  Object o : list) {
    if (projSize == 0) {
      results.add(new WrappedMessage(o));
    }
 else {
      Object[] row=(Object[])o;
      for (int j=0; j < projSize; j++) {
        results.add(new WrappedMessage(row[j]));
      }
    }
  }
  QueryResponse response=new QueryResponse();
  response.setTotalResults(cacheQuery.getResultSize());
  response.setNumResults(list.size());
  response.setProjectionSize(projSize);
  response.setResults(results);
  return response;
}
