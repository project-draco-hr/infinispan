{
  Map<Address,BlockingQueue<Object>> blockingQueueMap=keyAffinityService.getAddress2KeysMapping();
  for (  Address addr : addresses) {
    final BlockingQueue<Object> queue=blockingQueueMap.get(addr);
    eventually(new Condition(){
      @Override public boolean isSatisfied(){
        return queue.size() == 100;
      }
    }
,60 * 1000);
  }
  eventually(new Condition(){
    @Override public boolean isSatisfied(){
      return keyAffinityService.getMaxNumberOfKeys() == keyAffinityService.existingKeyCount.get();
    }
  }
);
  assertEquals(addresses.size() * 100,keyAffinityService.existingKeyCount.get());
  Thread.sleep(200);
  assertEquals(false,keyAffinityService.isKeyGeneratorThreadActive());
}
