{
  PathAddress address=PathAddress.pathAddress(connector.get(OP_ADDR)).append(PathElement.pathElement(ModelKeys.ENCRYPTION,ModelKeys.ENCRYPTION_NAME));
  ModelNode security=Util.createAddOperation(address);
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=reader.getAttributeValue(i);
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case REQUIRE_SSL_CLIENT_AUTH:
{
        EncryptionResource.REQUIRE_SSL_CLIENT_AUTH.parseAndSetParameter(value,security,reader);
        break;
      }
case SECURITY_REALM:
{
      EncryptionResource.SECURITY_REALM.parseAndSetParameter(value,security,reader);
      break;
    }
default :
{
    throw ParseUtils.unexpectedAttribute(reader,i);
  }
}
}
operations.add(security);
boolean skipTagCheckAtTheEnd=reader.hasNext();
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case SNI:
{
  parseSni(reader,security,operations);
  break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
if (!skipTagCheckAtTheEnd) ParseUtils.requireNoContent(reader);
}
