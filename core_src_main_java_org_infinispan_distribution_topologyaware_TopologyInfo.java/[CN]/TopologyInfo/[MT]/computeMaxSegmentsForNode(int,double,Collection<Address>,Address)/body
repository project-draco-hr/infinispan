{
  if (capacityFactors == null) {
    if (nodes.size() < numCopies) {
      return numSegments;
    }
 else {
      return numCopies * numSegments / nodes.size();
    }
  }
  float nodeCapacityFactor=capacityFactors.get(node);
  if (nodeCapacityFactor == 0.0)   return 0;
  float totalCapacity=computeTotalCapacity(nodes,capacityFactors);
  List<Address> sortedNodes=new ArrayList<Address>(nodes);
  Collections.sort(sortedNodes,new Comparator<Address>(){
    @Override public int compare(    Address o1,    Address o2){
      return (int)Math.signum(capacityFactors.get(o2) - capacityFactors.get(o1));
    }
  }
);
  double remainingCopies=numCopies * numSegments;
  for (  Address a : sortedNodes) {
    float nodeLoad=capacityFactors.get(a);
    double nodeSegments;
    if (remainingCopies * nodeLoad / totalCapacity > numSegments) {
      nodeSegments=numSegments;
      totalCapacity-=nodeLoad;
      remainingCopies-=nodeSegments;
    }
 else {
      nodeSegments=nodeLoad != 0 ? remainingCopies * nodeLoad / totalCapacity : 0;
    }
    if (node.equals(a))     return nodeSegments;
  }
  throw new IllegalStateException("The nodes collection does not include " + node);
}
