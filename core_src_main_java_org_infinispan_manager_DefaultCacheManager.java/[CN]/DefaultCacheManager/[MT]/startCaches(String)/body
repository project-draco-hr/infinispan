{
  authzHelper.checkPermission(AuthorizationPermission.LIFECYCLE);
  Map<String,Thread> threads=new HashMap<>(cacheNames.length);
  final AtomicReference<RuntimeException> exception=new AtomicReference<RuntimeException>(null);
  for (  final String cacheName : cacheNames) {
    if (!threads.containsKey(cacheName)) {
      String threadName="CacheStartThread," + configurationManager.getGlobalConfiguration().transport().nodeName() + ","+ cacheName;
      Thread thread=new Thread(threadName){
        @Override public void run(){
          try {
            createCache(cacheName,cacheName);
          }
 catch (          RuntimeException e) {
            exception.set(e);
          }
catch (          Throwable t) {
            exception.set(new RuntimeException(t));
          }
        }
      }
;
      thread.start();
      threads.put(cacheName,thread);
    }
  }
  try {
    for (    Thread thread : threads.values()) {
      thread.join();
    }
  }
 catch (  InterruptedException e) {
    throw new CacheException("Interrupted while waiting for the caches to start");
  }
  RuntimeException runtimeException=exception.get();
  if (runtimeException != null) {
    throw runtimeException;
  }
  return this;
}
