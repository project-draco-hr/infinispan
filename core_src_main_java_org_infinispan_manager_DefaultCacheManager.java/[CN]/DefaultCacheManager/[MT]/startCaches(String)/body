{
  List<Thread> threads=new ArrayList<Thread>(cacheNames.length);
  boolean haveStoppedCaches=false;
  boolean haveRunningCaches=false;
  for (  final String cacheName : cacheNames) {
    if (isRunning(cacheName)) {
      haveRunningCaches=true;
      continue;
    }
    haveStoppedCaches=true;
    String threadName="CacheStartThread," + globalConfiguration.getClusterName() + ","+ cacheName;
    Thread thread=new Thread(threadName){
      @Override public void run(){
        createCache(cacheName);
      }
    }
;
    thread.start();
    threads.add(thread);
  }
  if (haveStoppedCaches && haveRunningCaches) {
    log.asymmetricClusterWarning();
  }
  try {
    for (    Thread thread : threads) {
      thread.join(defaultConfiguration.getLockAcquisitionTimeout());
    }
  }
 catch (  InterruptedException e) {
    throw new CacheException("Interrupted while waiting for the caches to start");
  }
  return this;
}
