{
  addNode(testAddresses[0],"m2","r0","s1");
  addNode(testAddresses[1],"m1","r0","s0");
  addNode(testAddresses[2],"m1","r0","s1");
  addNode(testAddresses[3],"m1","r1","s0");
  addNode(testAddresses[4],"m0","r0","s1");
  addNode(testAddresses[5],"m0","r1","s1");
  addNode(testAddresses[6],"m0","r1","s0");
  addNode(testAddresses[7],"m0","r0","s3");
  addNode(testAddresses[8],"m0","r0","s2");
  addNode(testAddresses[9],"m0","r0","s0");
  updateConsistentHash();
  List<Address> testAddresses0List=ch.locateOwners(testAddresses[0]);
  List<Address> testAddresses1List=ch.locateOwners(testAddresses[1]);
  List<Address> testAddresses2List=ch.locateOwners(testAddresses[2]);
  List<Address> testAddresses3List=ch.locateOwners(testAddresses[3]);
  List<Address> testAddresses4List=ch.locateOwners(testAddresses[4]);
  List<Address> testAddresses5List=ch.locateOwners(testAddresses[5]);
  List<Address> testAddresses6List=ch.locateOwners(testAddresses[6]);
  List<Address> testAddresses7List=ch.locateOwners(testAddresses[7]);
  List<Address> testAddresses8List=ch.locateOwners(testAddresses[8]);
  List<Address> testAddresses9List=ch.locateOwners(testAddresses[9]);
  for (  Address addr : chMembers) {
    System.out.println("addr = " + addr);
    List<Address> addressCopy=new ArrayList<Address>(chMembers);
    addressCopy.remove(addr);
    updateConsistentHash(addressCopy);
    checkConsistency(testAddresses0List,testAddresses[0],addr,3);
    checkConsistency(testAddresses1List,testAddresses[1],addr,3);
    checkConsistency(testAddresses2List,testAddresses[2],addr,3);
    checkConsistency(testAddresses3List,testAddresses[3],addr,3);
    checkConsistency(testAddresses4List,testAddresses[4],addr,3);
    checkConsistency(testAddresses5List,testAddresses[5],addr,3);
    checkConsistency(testAddresses6List,testAddresses[6],addr,3);
    checkConsistency(testAddresses7List,testAddresses[7],addr,3);
    checkConsistency(testAddresses8List,testAddresses[8],addr,3);
    checkConsistency(testAddresses9List,testAddresses[9],addr,3);
  }
}
