{
  log.tracef("Write hash distribution change response header %s",h);
  if (h.hashFunction == 0) {
    writeLimitedHashTopologyUpdate(h,buf);
    return;
  }
  AdvancedCache<byte[],byte[]> cache=server.getCacheInstance(r.cacheName,server.getCacheManager(),false,true);
  DistributionManager distManager=cache.getDistributionManager();
  ConsistentHash ch=distManager.getReadConsistentHash();
  int numSegments=ch.getNumSegments();
  List<KeyValuePair<ServerAddress,Integer>> hashIds=new ArrayList<>(numSegments);
  List<Integer>[] allDenormalizedHashIds=denormalizeSegmentHashIds(ch);
  for (int segmentIdx=0; segmentIdx < numSegments; ++segmentIdx) {
    List<Integer> denormalizedSegmentHashIds=allDenormalizedHashIds[segmentIdx];
    List<Address> segmentOwners=ch.locateOwnersForSegment(segmentIdx);
    for (int ownerIdx=0; ownerIdx < segmentOwners.size(); ++ownerIdx) {
      Address address=segmentOwners.get(ownerIdx % segmentOwners.size());
      ServerAddress serverAddress=h.serverEndpointsMap.get(address);
      if (serverAddress != null) {
        Integer hashId=denormalizedSegmentHashIds.get(ownerIdx);
        hashIds.add(new KeyValuePair<>(serverAddress,hashId));
      }
 else {
        log.tracef("Could not find member %s in the address cache",address);
      }
    }
  }
  writeCommonHashTopologyHeader(buf,h.topologyId,h.numOwners,h.hashFunction,h.hashSpace,hashIds.size());
  ExtendedByteBuf.writeUnsignedInt(1,buf);
  for (  KeyValuePair<ServerAddress,Integer> serverHash : hashIds) {
    log.tracef("Writing hash id %d for %s:%s",(Object)serverHash.getValue(),serverHash.getKey().getHost(),serverHash.getKey().getPort());
    ExtendedByteBuf.writeString(serverHash.getKey().getHost(),buf);
    ExtendedByteBuf.writeUnsignedShort(serverHash.getKey().getPort(),buf);
    buf.writeInt(serverHash.getValue());
  }
}
