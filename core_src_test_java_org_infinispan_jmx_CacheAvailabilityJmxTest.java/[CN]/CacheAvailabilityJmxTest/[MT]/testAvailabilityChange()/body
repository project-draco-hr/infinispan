{
  final MBeanServer mBeanServer=PerThreadMBeanServerLookup.getThreadMBeanServer();
  String domain0=manager(1).getCacheManagerConfiguration().globalJmxStatistics().domain();
  final ObjectName cacheName0=TestingUtil.getCacheObjectName(domain0,CacheContainer.DEFAULT_CACHE_NAME + "(dist_sync)");
  String domain1=manager(1).getCacheManagerConfiguration().globalJmxStatistics().domain();
  final ObjectName cacheName1=TestingUtil.getCacheObjectName(domain1,CacheContainer.DEFAULT_CACHE_NAME + "(dist_sync)");
  StateTransferManager stm0=TestingUtil.extractComponent(cache(0),StateTransferManager.class);
  assertEquals(Arrays.asList(address(0),address(1)),stm0.getCacheTopology().getCurrentCH().getMembers());
  assertNull(stm0.getCacheTopology().getPendingCH());
  assertTrue(mBeanServer.isRegistered(cacheName0));
  assertEquals("AVAILABLE",mBeanServer.getAttribute(cacheName0,"CacheAvailability"));
  assertEquals("AVAILABLE",mBeanServer.getAttribute(cacheName1,"CacheAvailability"));
  log.debugf("Entering degraded mode");
  mBeanServer.setAttribute(cacheName0,new Attribute("CacheAvailability","DEGRADED_MODE"));
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      Object availability0=mBeanServer.getAttribute(cacheName0,"CacheAvailability");
      Object availability1=mBeanServer.getAttribute(cacheName1,"CacheAvailability");
      return "DEGRADED_MODE".equals(availability0) && "DEGRADED_MODE".equals(availability1);
    }
  }
);
  log.debugf("Starting 2 new nodes");
  addClusterEnabledCacheManager(getGlobalConfigurationBuilder("r2"),getConfigurationBuilder());
  addClusterEnabledCacheManager(getGlobalConfigurationBuilder("r2"),getConfigurationBuilder());
  cache(2);
  cache(3);
  Thread.sleep(1000);
  assertEquals(Arrays.asList(address(0),address(1)),stm0.getCacheTopology().getCurrentCH().getMembers());
  assertNull(stm0.getCacheTopology().getPendingCH());
  assertEquals("DEGRADED_MODE",mBeanServer.getAttribute(cacheName0,"CacheAvailability"));
  assertEquals("DEGRADED_MODE",mBeanServer.getAttribute(cacheName1,"CacheAvailability"));
  log.debugf("Back to available mode");
  mBeanServer.setAttribute(cacheName0,new Attribute("CacheAvailability","AVAILABLE"));
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      Object availability0=mBeanServer.getAttribute(cacheName0,"CacheAvailability");
      Object availability1=mBeanServer.getAttribute(cacheName1,"CacheAvailability");
      return "AVAILABLE".equals(availability0) && "AVAILABLE".equals(availability1);
    }
  }
);
  TestingUtil.waitForRehashToComplete(cache(0),cache(1),cache(2),cache(3));
}
