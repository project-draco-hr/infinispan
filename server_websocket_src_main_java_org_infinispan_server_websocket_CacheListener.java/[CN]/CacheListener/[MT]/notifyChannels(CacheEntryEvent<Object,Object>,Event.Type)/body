{
  if (event.isPre()) {
    return;
  }
  JSONObject jsonObject;
  try {
    Cache<Object,Object> cache=event.getCache();
    Object key=event.getKey();
    Object value;
switch (eventType) {
case CACHE_ENTRY_CREATED:
      value=cache.get(key);
    jsonObject=ChannelUtils.toJSON(key.toString(),value,cache.getName());
  break;
case CACHE_ENTRY_MODIFIED:
value=((CacheEntryModifiedEvent<Object,Object>)event).getValue();
jsonObject=ChannelUtils.toJSON(key.toString(),value,cache.getName());
break;
case CACHE_ENTRY_REMOVED:
jsonObject=ChannelUtils.toJSON(key.toString(),null,cache.getName());
break;
default :
return;
}
jsonObject.put("eventType",eventType.toString());
}
 catch (JSONException e) {
return;
}
String jsonString=jsonObject.toString();
for (ChannelNotifyParams channel : channels) {
if (channel.channel.isOpen() && channel.onEvents.contains(eventType)) {
if (channel.key != null) {
if (event.getKey().equals(channel.key) || channel.key.equals("*")) {
channel.channel.write(new TextWebSocketFrame(jsonString));
}
}
 else {
channel.channel.write(new TextWebSocketFrame(jsonString));
}
}
}
}
