{
  short magic=transport.readByte();
  if (magic != RESPONSE_MAGIC) {
    String message="Invalid magic number. Expected " + Integer.toHexString(RESPONSE_MAGIC) + " and received "+ Integer.toHexString(magic);
    log.error(message);
    throw new InvalidResponseException(message);
  }
  long receivedMessageId=transport.readVLong();
  if (receivedMessageId != messageId) {
    String message="Invalid message id. Expected " + Long.toHexString(messageId) + " and received "+ Long.toHexString(receivedMessageId);
    log.error(message);
    throw new InvalidResponseException(message);
  }
  if (log.isTraceEnabled()) {
    log.trace("Received response for message id: " + receivedMessageId);
  }
  short receivedOpCode=transport.readByte();
  if (receivedOpCode != opRespCode) {
    if (receivedOpCode == ERROR_RESPONSE) {
      checkForErrorsInResponseStatus(transport.readByte(),messageId,transport);
      throw new IllegalStateException("Error expected! (i.e. exception in the prev statement)");
    }
    throw new InvalidResponseException("Invalid response operation. Expected " + Integer.toHexString(opRespCode) + " and received "+ Integer.toHexString(receivedOpCode));
  }
  if (log.isTraceEnabled()) {
    log.trace("Received operation code is: " + receivedOpCode);
  }
  short status=transport.readByte();
  checkForErrorsInResponseStatus(status,messageId,transport);
  short topologyChangeByte=transport.readByte();
  if (topologyChangeByte == 1) {
    int newTopology=transport.readVInt();
    TOPOLOGY_ID.set(newTopology);
    int clusterSize=transport.readVInt();
    List<InetSocketAddress> hotRodServers=new ArrayList<InetSocketAddress>(clusterSize);
    for (int i=0; i < clusterSize; i++) {
      String host=transport.readString();
      int port=transport.readUnsignedShort();
      hotRodServers.add(new InetSocketAddress(host,port));
    }
    if (log.isInfoEnabled()) {
      log.info("Received topology change response. New cluster size = " + clusterSize + ", new topology id = "+ newTopology+ ", new topology "+ hotRodServers);
    }
    transportFactory.updateServers(hotRodServers);
  }
  return status;
}
