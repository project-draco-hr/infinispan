{
  programName=System.getProperty("program.name","startServer");
  String sopts="-:hD:Vp:l:m:t:c:r:";
  LongOpt[] lopts={new LongOpt("help",LongOpt.NO_ARGUMENT,null,'h'),new LongOpt("version",LongOpt.NO_ARGUMENT,null,'V'),new LongOpt("port",LongOpt.REQUIRED_ARGUMENT,null,'p'),new LongOpt("host",LongOpt.REQUIRED_ARGUMENT,null,'l'),new LongOpt("master_threads",LongOpt.REQUIRED_ARGUMENT,null,'m'),new LongOpt("worker_threads",LongOpt.REQUIRED_ARGUMENT,null,'t'),new LongOpt("cache_config",LongOpt.REQUIRED_ARGUMENT,null,'c'),new LongOpt("protocol",LongOpt.REQUIRED_ARGUMENT,null,'r')};
  Getopt getopt=new Getopt(programName,args,sopts,lopts);
  int code;
  while ((code=getopt.getopt()) != -1) {
switch (code) {
case ':':
case '?':
      System.exit(1);
    break;
case 1:
  System.err.println(programName + ": unused non-option argument: " + getopt.getOptarg());
break;
case 'h':
showAndExit();
break;
case 'V':
Version.printFullVersionInformation();
System.exit(0);
break;
case 'p':
props.put(PROP_KEY_PORT,getopt.getOptarg());
break;
case 'l':
props.put(PROP_KEY_HOST,getopt.getOptarg());
break;
case 'm':
props.put(PROP_KEY_MASTER_THREADS,getopt.getOptarg());
break;
case 't':
props.put(PROP_KEY_WORKER_THREADS,getopt.getOptarg());
break;
case 'c':
props.put(PROP_KEY_CACHE_CONFIG,getopt.getOptarg());
break;
case 'r':
props.put(PROP_KEY_PROTOCOL,getopt.getOptarg());
break;
case 'D':
String arg=getopt.getOptarg();
String name, value;
int i=arg.indexOf("=");
if (i == -1) {
name=arg;
value="true";
}
 else {
name=arg.substring(0,i);
value=arg.substring(i + 1,arg.length());
}
System.setProperty(name,value);
break;
default :
throw new Error("unhandled option code: " + code);
}
}
}
