{
  if (!configuration.clustering().cacheMode().isClustered())   throw new IllegalStateException("Trying to invoke a remote command but the cache is not clustered");
  List<Address> clusterMembers=t.getMembers();
  if (clusterMembers.size() < 2) {
    log.tracef("We're the only member in the cluster; Don't invoke remotely.");
    return Collections.emptyMap();
  }
 else {
    long startTimeNanos=0;
    if (statisticsEnabled)     startTimeNanos=System.nanoTime();
    try {
      if (recipients == null && mode.isSynchronous() && !globalCfg.transport().strictPeerToPeer()) {
        Collection<Address> cacheMembers=localTopologyManager.getCacheTopology(cacheName).getMembers();
        if (cacheMembers.size() < 2) {
          log.tracef("We're the only member of cache %s; Don't invoke remotely.",cacheName);
          return Collections.emptyMap();
        }
        if (responseFilter == null) {
          responseFilter=new IgnoreExtraResponsesValidityFilter(cacheMembers,getAddress());
        }
      }
      if (rpcCommand instanceof TopologyAffectedCommand) {
        ((TopologyAffectedCommand)rpcCommand).setTopologyId(stateTransferManager.getCacheTopology().getTopologyId());
      }
      Map<Address,Response> result=t.invokeRemotely(recipients,rpcCommand,mode,timeout,usePriorityQueue,responseFilter);
      if (statisticsEnabled)       replicationCount.incrementAndGet();
      return result;
    }
 catch (    CacheException e) {
      log.trace("replication exception: ",e);
      if (statisticsEnabled)       replicationFailures.incrementAndGet();
      throw e;
    }
catch (    Throwable th) {
      log.unexpectedErrorReplicating(th);
      if (statisticsEnabled)       replicationFailures.incrementAndGet();
      throw new CacheException(th);
    }
 finally {
      if (statisticsEnabled) {
        long timeTaken=TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTimeNanos,TimeUnit.NANOSECONDS);
        totalReplicationTime.getAndAdd(timeTaken);
      }
    }
  }
}
