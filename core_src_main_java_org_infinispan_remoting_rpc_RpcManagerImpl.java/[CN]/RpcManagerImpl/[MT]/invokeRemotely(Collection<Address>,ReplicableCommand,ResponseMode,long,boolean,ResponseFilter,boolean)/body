{
  if (!configuration.clustering().cacheMode().isClustered())   throw new IllegalStateException("Trying to invoke a remote command but the cache is not clustered");
  long startTimeNanos=0;
  if (statisticsEnabled)   startTimeNanos=System.nanoTime();
  try {
    if (rpcCommand instanceof TopologyAffectedCommand) {
      TopologyAffectedCommand topologyAffectedCommand=(TopologyAffectedCommand)rpcCommand;
      if (topologyAffectedCommand.getTopologyId() == -1) {
        topologyAffectedCommand.setTopologyId(stateTransferManager.getCacheTopology().getTopologyId());
      }
    }
    Map<Address,Response> result=t.invokeRemotely(recipients,rpcCommand,mode,timeout,usePriorityQueue,responseFilter,totalOrder,configuration.clustering().cacheMode().isDistributed());
    if (statisticsEnabled)     replicationCount.incrementAndGet();
    return result;
  }
 catch (  CacheException e) {
    log.trace("replication exception: ",e);
    if (statisticsEnabled)     replicationFailures.incrementAndGet();
    throw e;
  }
catch (  Throwable th) {
    log.unexpectedErrorReplicating(th);
    if (statisticsEnabled)     replicationFailures.incrementAndGet();
    throw new CacheException(th);
  }
 finally {
    if (statisticsEnabled) {
      long timeTaken=TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTimeNanos,TimeUnit.NANOSECONDS);
      totalReplicationTime.getAndAdd(timeTaken);
    }
  }
}
