{
  if (trace)   log.tracef("%s invoking %s with options %s",t.getAddress(),rpcs,options);
  if (!configuration.clustering().cacheMode().isClustered())   throw new IllegalStateException("Trying to invoke a remote command but the cache is not clustered");
  Map<Address,ReplicableCommand> replacedCommands=null;
  for (  Map.Entry<Address,ReplicableCommand> entry : rpcs.entrySet()) {
    ReplicableCommand rpc=entry.getValue();
    if (rpc instanceof TopologyAffectedCommand) {
      TopologyAffectedCommand topologyAffectedCommand=(TopologyAffectedCommand)rpc;
      if (topologyAffectedCommand.getTopologyId() == -1) {
        int currentTopologyId=stateTransferManager.getCacheTopology().getTopologyId();
        if (trace)         log.tracef("Topology id missing on command %s, setting it to %d",rpc,currentTopologyId);
        topologyAffectedCommand.setTopologyId(currentTopologyId);
      }
    }
    if (!(rpc instanceof CacheRpcCommand)) {
      rpc=cf.buildSingleRpcCommand(rpc);
      if (replacedCommands == null) {
        replacedCommands=new HashMap<>();
      }
      replacedCommands.put(entry.getKey(),rpc);
    }
  }
  if (replacedCommands != null) {
    rpcs.putAll(replacedCommands);
  }
  long startTimeNanos=0;
  if (statisticsEnabled)   startTimeNanos=timeService.time();
  try {
    Map<Address,Response> result=t.invokeRemotely(rpcs,options.responseMode(),options.timeUnit().toMillis(options.timeout()),options.responseFilter(),options.deliverOrder(),configuration.clustering().cacheMode().isDistributed());
    if (statisticsEnabled)     replicationCount.incrementAndGet();
    if (trace)     log.tracef("Response(s) to %s is %s",rpcs,result);
    return result;
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new CacheException("Thread interrupted while invoking RPC",e);
  }
catch (  CacheException e) {
    log.trace("replication exception: ",e);
    if (statisticsEnabled)     replicationFailures.incrementAndGet();
    throw e;
  }
catch (  Throwable th) {
    log.unexpectedErrorReplicating(th);
    if (statisticsEnabled)     replicationFailures.incrementAndGet();
    throw new CacheException(th);
  }
 finally {
    if (statisticsEnabled) {
      long timeTaken=timeService.timeDuration(startTimeNanos,TimeUnit.MILLISECONDS);
      totalReplicationTime.getAndAdd(timeTaken);
    }
  }
}
