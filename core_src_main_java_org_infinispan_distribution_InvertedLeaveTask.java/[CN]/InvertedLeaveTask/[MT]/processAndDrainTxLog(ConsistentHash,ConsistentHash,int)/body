{
  if (trace)   log.trace("Processing transaction log iteratively");
  List<WriteCommand> c;
  int i=0;
  TransactionLogger transactionLogger=dmi.getTransactionLogger();
  while (transactionLogger.shouldDrainWithoutLock()) {
    if (trace)     log.trace("Processing transaction log, iteration {0}",i++);
    c=transactionLogger.drain();
    if (trace)     log.trace("Found {0} modifications",c.size());
    apply(oldCH,newCH,replCount,c);
  }
  if (trace)   log.trace("Processing transaction log: final drain and lock");
  c=transactionLogger.drainAndLock();
  if (trace)   log.trace("Found {0} modifications",c.size());
  apply(oldCH,newCH,replCount,c);
  if (trace)   log.trace("Handling pending prepares");
  PendingPreparesMap state=new PendingPreparesMap(leavers,oldCH,newCH,replCount);
  Collection<PrepareCommand> pendingPrepares=transactionLogger.getPendingPrepares();
  if (trace)   log.trace("Found {0} pending prepares",pendingPrepares.size());
  for (  PrepareCommand pc : pendingPrepares)   state.addState(pc);
  if (trace)   log.trace("State map for pending prepares is {0}",state.getState());
  Set<Future<Object>> pushFutures=new HashSet<Future<Object>>();
  for (  Map.Entry<Address,List<PrepareCommand>> e : state.getState().entrySet()) {
    if (log.isDebugEnabled())     log.debug("Pushing {0} uncommitted prepares to {1}",e.getValue().size(),e.getKey());
    RehashControlCommand push=cf.buildRehashControlCommandTxLogPendingPrepares(self,e.getValue());
    NotifyingNotifiableFuture<Object> f=new NotifyingFutureImpl(null);
    pushFutures.add(f);
    rpcManager.invokeRemotelyInFuture(Collections.singleton(e.getKey()),push,true,f,configuration.getRehashRpcTimeout());
  }
  for (  Future f : pushFutures) {
    try {
      f.get();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
catch (    ExecutionException e) {
      log.error("Error pushing tx log",e);
    }
  }
  if (trace)   log.trace("Finished pushing pending prepares; unlocking and disabling transaction logging");
  transactionLogger.unlockAndDisable();
}
