{
  Map<Object,String> values=putValuesInCache();
  Cache<Object,String> cache=cache(0,CACHE_NAME);
  TransactionManager tm=TestingUtil.extractComponent(cache,TransactionManager.class);
  tm.begin();
  try {
    Iterator<Map.Entry<Object,String>> iter=values.entrySet().iterator();
    Map.Entry<Object,String> extraEntry=iter.next();
    while (iter.hasNext()) {
      iter.next();
      iter.remove();
    }
    Object key="converted-key";
    String value="converted-value";
    values.put(key,value);
    cache.put(key,"converted-value");
    Collection<Object> acceptedKeys=new ArrayList<>();
    acceptedKeys.add(key);
    acceptedKeys.add(extraEntry.getKey());
    KeyValueFilterConverter<Object,String,String> filterConverter=new CompositeKeyValueFilterConverter<>(new KeyFilterAsKeyValueFilter<>(new CollectionKeyFilter<>(acceptedKeys,true)),new StringTruncator(2,5));
    try (Stream<CacheEntry<Object,String>> stream=CacheFilters.filterAndConvert(cache.getAdvancedCache().cacheEntrySet().stream(),filterConverter)){
      Map<Object,String> results=mapFromStream(stream);
      assertEquals(values.size(),results.size());
      for (      Map.Entry<Object,String> entry : values.entrySet()) {
        assertEquals(entry.getValue().substring(2,7),results.get(entry.getKey()));
      }
    }
   }
  finally {
    tm.rollback();
  }
}
