{
  if (instance == null && !Dependent.class.equals(bean.getScope())) {
    throw new IllegalStateException("Cannot return null from a non-dependent producer method: " + bean);
  }
 else   if (instance != null) {
    boolean passivating=beanManager.isPassivatingScope(bean.getScope());
    boolean instanceSerializable=Reflections.isSerializable(instance.getClass());
    if (passivating && !instanceSerializable) {
      throw new IllegalStateException("Producers cannot declare passivating scope and return a non-serializable class: " + bean);
    }
    if (injectionPoint != null && injectionPoint.getBean() != null) {
      if (!instanceSerializable && beanManager.isPassivatingScope(injectionPoint.getBean().getScope())) {
        if (injectionPoint.getMember() instanceof Field) {
          if (!injectionPoint.isTransient() && instance != null && !instanceSerializable) {
            throw new IllegalStateException("Producers cannot produce non-serializable instances for injection into non-transient fields of passivating beans. Producer " + bean + "at injection point "+ injectionPoint);
          }
        }
 else         if (injectionPoint.getMember() instanceof Method) {
          Method method=(Method)injectionPoint.getMember();
          if (method.isAnnotationPresent(Inject.class)) {
            throw new IllegalStateException("Producers cannot produce non-serializable instances for injection into parameters of initializers of beans declaring passivating scope. Producer " + bean + "at injection point "+ injectionPoint);
          }
          if (method.isAnnotationPresent(Produces.class)) {
            throw new IllegalStateException("Producers cannot produce non-serializable instances for injection into parameters of producer methods declaring passivating scope. Producer " + bean + "at injection point "+ injectionPoint);
          }
        }
 else         if (injectionPoint.getMember() instanceof Constructor<?>) {
          throw new IllegalStateException("Producers cannot produce non-serializable instances for injection into parameters of constructors of beans declaring passivating scope. Producer " + bean + "at injection point "+ injectionPoint);
        }
      }
    }
  }
}
