{
  AtomicMap<Integer,String> atomicMap=AtomicMapLookup.getAtomicMap(cache,KEY);
  tm().begin();
  atomicMap.put(1,"");
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      tm().begin();
      try {
        AtomicMap<Integer,String> otMap=AtomicMapLookup.getAtomicMap(cache,KEY);
        otMap.put(1,"val");
      }
  finally {
        tm().rollback();
      }
      return null;
    }
  }
);
  try {
    future.get(10,TimeUnit.SECONDS);
    fail("Should have failed with a TimeoutException");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof TimeoutException);
  }
}
