{
  final CountDownLatch readLatch=new CountDownLatch(1);
  final CountDownLatch commitLatch=new CountDownLatch(1);
  AtomicMap<Integer,String> atomicMap=AtomicMapLookup.getAtomicMap(cache,KEY);
  tm().begin();
  atomicMap.put(1,"value1");
  atomicMap.put(2,"value2");
  atomicMap.put(3,"value3");
  tm().commit();
  tm().begin();
  atomicMap.remove(1);
  Future<Object> future=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        tm().begin();
        AtomicMap<Integer,String> otMap=AtomicMapLookup.getAtomicMap(cache,KEY);
        assertEquals(otMap.size(),3);
        readLatch.countDown();
        otMap.remove(2);
        commitLatch.await(10,TimeUnit.SECONDS);
        tm().commit();
      }
 catch (      Exception e) {
        tm().rollback();
        throw e;
      }
      return null;
    }
  }
);
  readLatch.await(10,TimeUnit.SECONDS);
  tm().commit();
  commitLatch.countDown();
  future.get(10,TimeUnit.SECONDS);
  assertEquals(atomicMap.keySet(),new HashSet<Integer>(Arrays.asList(3)));
}
