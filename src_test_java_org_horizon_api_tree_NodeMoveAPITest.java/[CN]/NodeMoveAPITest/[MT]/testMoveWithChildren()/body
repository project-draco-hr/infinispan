{
  Node<Object,Object> rootNode=treeCache.getRoot();
  Node<Object,Object> nodeA=rootNode.addChild(A);
  nodeA.put(k,vA);
  Node<Object,Object> nodeB=rootNode.addChild(B);
  nodeB.put(k,vB);
  Node<Object,Object> nodeC=nodeA.addChild(C);
  nodeC.put(k,vC);
  Node<Object,Object> nodeD=nodeC.addChild(D);
  nodeD.put(k,vD);
  Node<Object,Object> nodeE=nodeD.addChild(E);
  nodeE.put(k,vE);
  assertTrue(rootNode.hasChild(A));
  assertTrue(rootNode.hasChild(B));
  assertFalse(rootNode.hasChild(C));
  assertTrue(nodeA.hasChild(C));
  assertTrue(nodeC.hasChild(D));
  assertTrue(nodeD.hasChild(E));
  assertEquals(vA,nodeA.get(k));
  assertEquals(vB,nodeB.get(k));
  assertEquals(vC,nodeC.get(k));
  assertEquals(vD,nodeD.get(k));
  assertEquals(vE,nodeE.get(k));
  assertEquals(rootNode,nodeA.getParent());
  assertEquals(rootNode,nodeB.getParent());
  assertEquals(nodeA,nodeC.getParent());
  assertEquals(nodeC,nodeD.getParent());
  assertEquals(nodeD,nodeE.getParent());
  log.info("move " + nodeC + " to "+ nodeB);
  treeCache.move(nodeC.getFqn(),nodeB.getFqn());
  nodeC=nodeB.getChild(C);
  nodeD=nodeC.getChild(D);
  nodeE=nodeD.getChild(E);
  assertTrue(rootNode.hasChild(A));
  assertTrue(rootNode.hasChild(B));
  assertFalse(rootNode.hasChild(C));
  assertFalse(nodeA.hasChild(C));
  assertTrue(nodeB.hasChild(C));
  assertTrue(nodeC.hasChild(D));
  assertTrue(nodeD.hasChild(E));
  assertEquals(vA,nodeA.get(k));
  assertEquals(vB,nodeB.get(k));
  assertEquals(vC,nodeC.get(k));
  assertEquals(vD,nodeD.get(k));
  assertEquals(vE,nodeE.get(k));
  assertEquals(rootNode,nodeA.getParent());
  assertEquals(rootNode,nodeB.getParent());
  assertEquals(nodeB,nodeC.getParent());
  assertEquals(nodeC,nodeD.getParent());
  assertEquals(nodeD,nodeE.getParent());
}
