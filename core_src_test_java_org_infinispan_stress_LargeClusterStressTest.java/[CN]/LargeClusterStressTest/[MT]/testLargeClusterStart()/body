{
  final Configuration distConfig=new ConfigurationBuilder().clustering().cacheMode(CacheMode.DIST_SYNC).clustering().stateTransfer().awaitInitialTransfer(false).hash().consistentHashFactory(new SyncConsistentHashFactory()).numSegments(NUM_SEGMENTS).build();
  final Configuration replConfig=new ConfigurationBuilder().clustering().cacheMode(CacheMode.REPL_SYNC).clustering().hash().numSegments(NUM_SEGMENTS).clustering().stateTransfer().awaitInitialTransfer(false).build();
  ExecutorService executor=Executors.newFixedThreadPool(NUM_THREADS);
  ExecutorCompletionService<Object> completionService=new ExecutorCompletionService<Object>(executor);
  Future<Object>[] futures=new Future[NUM_NODES];
  try {
    for (int i=0; i < NUM_NODES; i++) {
      final String nodeName=TestResourceTracker.getNameForIndex(i);
      final String machineId="m" + (i / 2);
      futures[i]=completionService.submit(new Callable<Object>(){
        @Override public Object call() throws Exception {
          GlobalConfigurationBuilder gcb=new GlobalConfigurationBuilder();
          gcb.globalJmxStatistics().allowDuplicateDomains(true);
          gcb.transport().defaultTransport().nodeName(nodeName);
          BlockingThreadPoolExecutorFactory remoteExecutorFactory=new BlockingThreadPoolExecutorFactory(10,1,0,60000);
          gcb.transport().remoteCommandThreadPool().threadPoolFactory(remoteExecutorFactory);
          BlockingThreadPoolExecutorFactory stateTransferExecutorFactory=new BlockingThreadPoolExecutorFactory(4,1,0,60000);
          gcb.transport().stateTransferThreadPool().threadPoolFactory(stateTransferExecutorFactory);
          EmbeddedCacheManager cm=new DefaultCacheManager(gcb.build());
          try {
            for (int j=0; j < NUM_CACHES / 2; j++) {
              cm.defineConfiguration("repl-cache-" + j,replConfig);
              cm.defineConfiguration("dist-cache-" + j,distConfig);
            }
            for (int j=0; j < NUM_CACHES / 2; j++) {
              Cache<Object,Object> replCache=cm.getCache("repl-cache-" + j);
              replCache.put(cm.getAddress(),"bla");
              Cache<Object,Object> distCache=cm.getCache("dist-cache-" + j);
              distCache.put(cm.getAddress(),"bla");
            }
          }
  finally {
            registerCacheManager(cm);
          }
          log.infof("Started cache manager %s",cm.getAddress());
          return null;
        }
      }
);
    }
    for (int i=0; i < NUM_NODES; i++) {
      completionService.take();
    }
  }
  finally {
    executor.shutdownNow();
  }
  log.infof("All %d cache managers started, waiting for state transfer to finish for each cache",NUM_NODES);
  for (int j=0; j < NUM_CACHES / 2; j++) {
    waitForClusterToForm("repl-cache-" + j);
    waitForClusterToForm("dist-cache-" + j);
  }
}
