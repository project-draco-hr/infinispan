{
  Thread.currentThread().setName("Client-Listener-" + Util.toHexString(op.listenerId,8));
  while (!Thread.currentThread().isInterrupted()) {
    ClientEvent clientEvent=null;
    try {
      clientEvent=codec.readEvent(transport,op.listenerId,marshaller);
      invokeClientEvent(clientEvent);
      clientEvent=null;
    }
 catch (    TransportException e) {
      Throwable cause=e.getCause();
      if (cause instanceof ClosedChannelException) {
        log.debug("Channel closed, exiting event reader thread");
        stopped=true;
        return;
      }
 else       if (cause instanceof SocketTimeoutException) {
        log.debug("Timed out reading event, retry");
      }
 else       if (clientEvent != null) {
        log.unexpectedErrorConsumingEvent(clientEvent,e);
      }
 else {
        log.unrecoverableErrorReadingEvent(e,transport.getRemoteSocketAddress());
        stopped=true;
        return;
      }
    }
catch (    CancelledKeyException e) {
      log.debug("Key cancelled, most likely channel closed, exiting event reader thread");
      stopped=true;
      return;
    }
catch (    Throwable t) {
      if (clientEvent != null)       log.unexpectedErrorConsumingEvent(clientEvent,t);
 else       log.unableToReadEventFromServer(t,transport.getRemoteSocketAddress());
    }
  }
}
