{
  sharedAttributeResolver=new HashMap<>();
  sharedAttributeResolver.put(ModelKeys.BATCHING,"cache");
  sharedAttributeResolver.put(ModelKeys.CONFIGURATION,"cache");
  sharedAttributeResolver.put(ModelKeys.MODULE,"cache");
  sharedAttributeResolver.put(ModelKeys.INDEXING,"cache");
  sharedAttributeResolver.put(ModelKeys.AUTO_CONFIG,"cache");
  sharedAttributeResolver.put(ModelKeys.INDEXING_PROPERTIES,"cache");
  sharedAttributeResolver.put(ModelKeys.JNDI_NAME,"cache");
  sharedAttributeResolver.put(ModelKeys.NAME,"cache");
  sharedAttributeResolver.put(ModelKeys.REMOTE_CACHE,"cache");
  sharedAttributeResolver.put(ModelKeys.REMOTE_SITE,"cache");
  sharedAttributeResolver.put(ModelKeys.SIMPLE_CACHE,"cache");
  sharedAttributeResolver.put(ModelKeys.START,"cache");
  sharedAttributeResolver.put(ModelKeys.STATISTICS,"cache");
  sharedAttributeResolver.put(ModelKeys.STATISTICS_AVAILABLE,"cache");
  sharedAttributeResolver.put(ModelKeys.ASYNC_MARSHALLING,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.CACHE_AVAILABILITY,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.CACHE_REBALANCE,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.CACHE_REBALANCING_STATUS,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.MODE,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.QUEUE_FLUSH_INTERVAL,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.QUEUE_SIZE,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.REMOTE_TIMEOUT,"clustered-cache");
  sharedAttributeResolver.put(ModelKeys.PROPERTIES,"loader");
  sharedAttributeResolver.put(ModelKeys.FETCH_STATE,"store");
  sharedAttributeResolver.put(ModelKeys.PASSIVATION,"store");
  sharedAttributeResolver.put(ModelKeys.PRELOAD,"store");
  sharedAttributeResolver.put(ModelKeys.PURGE,"store");
  sharedAttributeResolver.put(ModelKeys.READ_ONLY,"store");
  sharedAttributeResolver.put(ModelKeys.SHARED,"store");
  sharedAttributeResolver.put(ModelKeys.SINGLETON,"store");
  sharedAttributeResolver.put(ModelKeys.PROPERTY,"store");
  sharedAttributeResolver.put(ModelKeys.PROPERTIES,"store");
  sharedAttributeResolver.put(ModelKeys.DATASOURCE,"jdbc-store");
  sharedAttributeResolver.put(ModelKeys.DIALECT,"jdbc-store");
  sharedAttributeResolver.put(ModelKeys.BATCH_SIZE,"jdbc-store");
  sharedAttributeResolver.put(ModelKeys.FETCH_SIZE,"jdbc-store");
  sharedAttributeResolver.put(ModelKeys.PREFIX,"jdbc-store");
  sharedAttributeResolver.put(ModelKeys.ID_COLUMN + ".column","jdbc-store");
  sharedAttributeResolver.put(ModelKeys.DATA_COLUMN + ".column","jdbc-store");
  sharedAttributeResolver.put(ModelKeys.TIMESTAMP_COLUMN + ".column","jdbc-store");
  sharedAttributeResolver.put(ModelKeys.ENTRY_TABLE + "table","jdbc-store");
  sharedAttributeResolver.put(ModelKeys.BUCKET_TABLE + "table","jdbc-store");
  sharedAttributeResolver.put(MetricKeys.AVERAGE_READ_TIME,"cache");
  sharedAttributeResolver.put(MetricKeys.AVERAGE_REMOVE_TIME,"cache");
  sharedAttributeResolver.put(MetricKeys.AVERAGE_WRITE_TIME,"cache");
  sharedAttributeResolver.put(MetricKeys.CACHE_NAME,"cache");
  sharedAttributeResolver.put(MetricKeys.CACHE_STATUS,"cache");
  sharedAttributeResolver.put(MetricKeys.COMMITS,"cache");
  sharedAttributeResolver.put(MetricKeys.CONCURRENCY_LEVEL,"cache");
  sharedAttributeResolver.put(MetricKeys.EVICTIONS,"cache");
  sharedAttributeResolver.put(MetricKeys.TIME_SINCE_START,"cache");
  sharedAttributeResolver.put(MetricKeys.HIT_RATIO,"cache");
  sharedAttributeResolver.put(MetricKeys.HITS,"cache");
  sharedAttributeResolver.put(MetricKeys.INVALIDATIONS,"cache");
  sharedAttributeResolver.put(MetricKeys.MISSES,"cache");
  sharedAttributeResolver.put(MetricKeys.SITES_MIXED,"cache");
  sharedAttributeResolver.put(MetricKeys.NUMBER_OF_ENTRIES,"cache");
  sharedAttributeResolver.put(MetricKeys.NUMBER_OF_LOCKS_AVAILABLE,"cache");
  sharedAttributeResolver.put(MetricKeys.NUMBER_OF_LOCKS_HELD,"cache");
  sharedAttributeResolver.put(MetricKeys.SITES_OFFLINE,"cache");
  sharedAttributeResolver.put(MetricKeys.SITES_ONLINE,"cache");
  sharedAttributeResolver.put(MetricKeys.PREPARES,"cache");
  sharedAttributeResolver.put(MetricKeys.READ_WRITE_RATIO,"cache");
  sharedAttributeResolver.put(MetricKeys.REMOVE_HITS,"cache");
  sharedAttributeResolver.put(MetricKeys.REMOVE_MISSES,"cache");
  sharedAttributeResolver.put(MetricKeys.ROLLBACKS,"cache");
  sharedAttributeResolver.put(MetricKeys.STORES,"cache");
  sharedAttributeResolver.put(MetricKeys.TIME_SINCE_RESET,"cache");
  sharedAttributeResolver.put(MetricKeys.VERSION,"cache");
  sharedAttributeResolver.put(MetricKeys.AVERAGE_REPLICATION_TIME,"clustered-cache");
  sharedAttributeResolver.put(MetricKeys.REPLICATION_COUNT,"clustered-cache");
  sharedAttributeResolver.put(MetricKeys.REPLICATION_FAILURES,"clustered-cache");
  sharedAttributeResolver.put(MetricKeys.SUCCESS_RATIO,"clustered-cache");
  sharedAttributeResolver.put(MetricKeys.ACTIVATIONS,"loader");
  sharedAttributeResolver.put(MetricKeys.CACHE_LOADER_LOADS,"loader");
  sharedAttributeResolver.put(MetricKeys.CACHE_LOADER_MISSES,"loader");
  sharedAttributeResolver.put(MetricKeys.CACHE_LOADER_STORES,"loader");
  sharedAttributeResolver.put(MetricKeys.PASSIVATIONS,"loader");
  sharedAttributeResolver.put(ModelKeys.TRANSPORT,null);
  sharedAttributeResolver.put(ModelKeys.SECURITY,"cache");
  sharedAttributeResolver.put(ModelKeys.LOCKING,null);
  sharedAttributeResolver.put(ModelKeys.TRANSACTION,null);
  sharedAttributeResolver.put(ModelKeys.EVICTION,null);
  sharedAttributeResolver.put(ModelKeys.EXPIRATION,null);
  sharedAttributeResolver.put(ModelKeys.STATE_TRANSFER,null);
  sharedAttributeResolver.put(ModelKeys.PARTITION_HANDLING,null);
  sharedAttributeResolver.put(ModelKeys.BACKUP,null);
  sharedAttributeResolver.put(ModelKeys.LOADER,null);
  sharedAttributeResolver.put(ModelKeys.COMPATIBILITY,null);
  sharedAttributeResolver.put(ModelKeys.CLUSTER_LOADER,null);
  sharedAttributeResolver.put(ModelKeys.STORE,null);
  sharedAttributeResolver.put(ModelKeys.FILE_STORE,null);
  sharedAttributeResolver.put(ModelKeys.REMOTE_STORE,null);
  sharedAttributeResolver.put(ModelKeys.REST_STORE,null);
  sharedAttributeResolver.put(ModelKeys.STRING_KEYED_JDBC_STORE,null);
  sharedAttributeResolver.put(ModelKeys.BINARY_KEYED_JDBC_STORE,null);
  sharedAttributeResolver.put(ModelKeys.MIXED_KEYED_JDBC_STORE,null);
  sharedAttributeResolver.put(ModelKeys.WRITE_BEHIND,null);
  sharedAttributeResolver.put(ModelKeys.PROPERTY,null);
  sharedAttributeResolver.put(ModelKeys.IMPLEMENTATION,null);
  sharedAttributeResolver.put(ModelKeys.COMPRESSION,null);
  sharedAttributeResolver.put(ModelKeys.LEVELDB_STORE,null);
  sharedAttributeResolver.put("thread-pool",null);
  for (  ClusteredCacheMetrics key : ClusteredCacheMetricsHandler.ClusteredCacheMetrics.values()) {
    sharedAttributeResolver.put(key.definition.getName(),"clustered-cache");
  }
}
