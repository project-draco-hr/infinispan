{
  final LocalTopologyManager localTopologyManager2=TestingUtil.extractGlobalComponent(manager(1),LocalTopologyManager.class);
  final CheckPoint checkpoint=new CheckPoint();
  LocalTopologyManager spyLocalTopologyManager2=spy(localTopologyManager2);
  final CacheTopology initialTopology=localTopologyManager2.getCacheTopology(CACHE_NAME);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      int viewId=(Integer)invocation.getArguments()[0];
      checkpoint.trigger("GET_STATUS_" + viewId);
      log.debugf("Blocking the GET_STATUS command on the new coordinator");
      checkpoint.awaitStrict("3 left",10,TimeUnit.SECONDS);
      return invocation.callRealMethod();
    }
  }
).when(spyLocalTopologyManager2).handleStatusRequest(anyInt());
  TestingUtil.replaceComponent(manager(1),LocalTopologyManager.class,spyLocalTopologyManager2,true);
  log.debugf("Killing coordinator");
  manager(0).stop();
  TestingUtil.blockUntilViewsReceived(30000,false,manager(1),manager(2));
  int viewId=manager(1).getTransport().getViewId();
  checkpoint.awaitStrict("GET_STATUS_" + viewId,10,TimeUnit.SECONDS);
  d3.setDiscardAll(true);
  manager(2).stop();
  TestingUtil.blockUntilViewsReceived(30000,false,manager(1));
  checkpoint.triggerForever("3 left");
  TestingUtil.waitForRehashToComplete(c2);
}
