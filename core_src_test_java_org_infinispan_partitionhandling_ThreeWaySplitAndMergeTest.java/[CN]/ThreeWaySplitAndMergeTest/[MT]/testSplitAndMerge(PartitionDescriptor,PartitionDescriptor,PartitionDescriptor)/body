{
  Object k0=new MagicKey(cache(p0.node(0)),cache(p0.node(1)));
  cache(0).put(k0,0);
  Object k1=new MagicKey(cache(p0.node(1)),cache(p1.node(0)));
  cache(1).put(k1,1);
  Object k2=new MagicKey(cache(p1.node(0)),cache(p2.node(0)));
  cache(2).put(k2,2);
  Object k3=new MagicKey(cache(p2.node(0)),cache(p0.node(0)));
  cache(3).put(k3,3);
  log.trace("Before split.");
  splitCluster(p0.getNodes(),p1.getNodes(),p2.getNodes());
  partition(0).assertDegradedMode();
  partition(1).assertDegradedMode();
  partition(2).assertDegradedMode();
  partition(0).assertKeyAvailableForRead(k0,0);
  partition(0).assertKeysNotAvailableForRead(k1,k2,k3);
  partition(1).assertKeysNotAvailableForRead(k0,k1,k2,k3);
  partition(2).assertKeysNotAvailableForRead(k0,k1,k2,k3);
  assertTrue(dataContainer(p0.node(0)).containsKey(k0));
  assertFalse(dataContainer(p0.node(0)).containsKey(k1));
  assertFalse(dataContainer(p0.node(0)).containsKey(k2));
  assertTrue(dataContainer(p0.node(0)).containsKey(k3));
  assertTrue(dataContainer(p0.node(1)).containsKey(k0));
  assertTrue(dataContainer(p0.node(1)).containsKey(k1));
  assertFalse(dataContainer(p0.node(1)).containsKey(k2));
  assertFalse(dataContainer(p0.node(1)).containsKey(k3));
  assertFalse(dataContainer(p1.node(0)).containsKey(k0));
  assertTrue(dataContainer(p1.node(0)).containsKey(k1));
  assertTrue(dataContainer(p1.node(0)).containsKey(k2));
  assertFalse(dataContainer(p1.node(0)).containsKey(k3));
  assertFalse(dataContainer(p2.node(0)).containsKey(k0));
  assertFalse(dataContainer(p2.node(0)).containsKey(k1));
  assertTrue(dataContainer(p2.node(0)).containsKey(k2));
  assertTrue(dataContainer(p2.node(0)).containsKey(k3));
  partition(0).assertKeyAvailableForWrite(k0,-1);
  partition(1).assertKeysNotAvailableForWrite(k0,k1,k2);
  partition(2).assertKeysNotAvailableForWrite(k0,k1,k2);
  log.tracef("Before the 1st merge P0 = %s, P1 = %s, P2 = %s",partition(0),partition(1),partition(2));
  assertEquals(partitions.length,3);
  partition(0).merge(partition(1));
  assertEquals(partitions.length,2);
  log.tracef("After the 1st merge P0 = %s, P1 = %s",partition(0),partition(1));
  partition(0).assertAvailabilityMode(AvailabilityMode.AVAILABLE);
  partition(1).assertAvailabilityMode(AvailabilityMode.DEGRADED_MODE);
  partition(0).assertKeyAvailableForRead(k0,-1);
  partition(0).assertKeyAvailableForRead(k1,1);
  partition(0).assertKeyAvailableForRead(k2,2);
  partition(0).assertKeyAvailableForRead(k3,3);
  partition(0).assertKeyAvailableForWrite(k0,10);
  partition(0).assertKeyAvailableForWrite(k1,11);
  partition(0).assertKeyAvailableForWrite(k2,12);
  partition(0).assertKeyAvailableForWrite(k3,13);
  Set<Address> members=new HashSet<>(Arrays.asList(new Address[]{address(p0.node(0)),address(p0.node(1)),address(p1.node(0))}));
  assertEquals(new HashSet<>(advancedCache(p0.node(0)).getDistributionManager().getConsistentHash().getMembers()),members);
  assertEquals(new HashSet<>(advancedCache(p0.node(1)).getDistributionManager().getConsistentHash().getMembers()),members);
  assertEquals(new HashSet<>(advancedCache(p1.node(0)).getDistributionManager().getConsistentHash().getMembers()),members);
  partition(1).assertKeysNotAvailableForRead(k0,k1,k2,k3);
  members=new HashSet<>(Arrays.asList(new Address[]{address(0),address(1),address(2),address(3)}));
  assertEquals(new HashSet<>(advancedCache(p2.node(0)).getDistributionManager().getConsistentHash().getMembers()),members);
  for (int i=0; i < 100; i++)   dataContainer(p2.node(0)).put(i,i,null);
  log.tracef("Before the 2nd merge P0 = %s, P1 = %s",partition(0),partition(1));
  partition(0).merge(partition(1));
  log.tracef("After 2nd merge P0=%s",partition(0));
  assertEquals(partitions.length,1);
  partition(0).assertAvailabilityMode(AvailabilityMode.AVAILABLE);
  partition(0).assertKeyAvailableForRead(k0,10);
  partition(0).assertKeyAvailableForRead(k1,11);
  partition(0).assertKeyAvailableForRead(k2,12);
  partition(0).assertKeyAvailableForRead(k3,13);
  for (int i=0; i < 100; i++) {
    partition(0).assertKeyAvailableForRead(i,null);
  }
  cache(0).put(k0,10);
  cache(1).put(k1,100);
  cache(2).put(k2,1000);
  cache(3).put(k3,10000);
  assertExpectedValue(10,k0);
  assertExpectedValue(100,k1);
  assertExpectedValue(1000,k2);
  assertExpectedValue(10000,k3);
}
