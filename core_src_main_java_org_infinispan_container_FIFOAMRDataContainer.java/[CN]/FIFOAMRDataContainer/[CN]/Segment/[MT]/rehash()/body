{
  HashEntry[] oldTable=table;
  int oldCapacity=oldTable.length;
  if (oldCapacity >= MAXIMUM_CAPACITY)   return;
  HashEntry[] newTable=new HashEntry[oldCapacity << 1];
  threshold=(int)(newTable.length * loadFactor);
  int sizeMask=newTable.length - 1;
  for (int i=0; i < oldCapacity; i++) {
    HashEntry e=oldTable[i];
    if (e != null) {
      HashEntry next=e.next;
      int idx=e.hash & sizeMask;
      if (next == null)       newTable[idx]=e;
 else {
        HashEntry lastRun=e;
        int lastIdx=idx;
        for (HashEntry last=next; last != null; last=last.next) {
          int k=last.hash & sizeMask;
          if (k != lastIdx) {
            lastIdx=k;
            lastRun=last;
          }
        }
        newTable[lastIdx]=lastRun;
        for (HashEntry p=e; p != lastRun; p=p.next) {
          int k=p.hash & sizeMask;
          HashEntry n=newTable[k];
          newTable[k]=new HashEntry(p.key,p.hash,n,p.value);
        }
      }
    }
  }
  table=newTable;
}
