{
  LinkedEntry next=tail;
  LinkedEntry prev=next.p.getReference();
  long backoffTime=-1;
  while (true) {
    node.p.set(prev,false);
    node.n.set(next,false);
    if (prev.n.compareAndSet(next,node,false,false))     break;
    prev=correctPrev(prev,next);
    backoffTime=backoff(backoffTime);
  }
  backoffTime=-1;
  while (true) {
    AtomicMarkableReference<LinkedEntry> l1=next.p;
    if (l1.isMarked() || (node.n.isMarked() || node.n.getReference() != next))     break;
    if (next.p.compareAndSet(l1.getReference(),node,false,false)) {
      if (node.p.isMarked())       correctPrev(node,next);
      break;
    }
    backoffTime=backoff(backoffTime);
  }
}
