{
  LinkedEntry lastLink=null;
  AtomicMarkableReference<LinkedEntry> link1, prev2;
  long backoffTime=-1;
  boolean[] markHolder=new boolean[1];
  LinkedEntry referenceHolder;
  while (true) {
    link1=node.p;
    if (link1.isMarked())     break;
    prev2=prev.n;
    if (prev2.isMarked()) {
      if (lastLink != null) {
        AtomicMarkableReference<LinkedEntry> prevP=prev.p;
        while (!prevP.attemptMark(prevP.getReference(),true)) {
        }
        lastLink.n.compareAndSet(prev,prev2.getReference(),lastLink.n.isMarked(),false);
        prev=lastLink;
        lastLink=null;
        continue;
      }
      prev2=prev.p;
      prev=prev2.getReference();
      continue;
    }
    if (prev2.getReference() != node) {
      lastLink=prev;
      prev=prev2.getReference();
      continue;
    }
    referenceHolder=link1.get(markHolder);
    if (node.p.compareAndSet(referenceHolder,prev,markHolder[0],false)) {
      if (prev.p.isMarked())       continue;
      break;
    }
    backoffTime=backoff(backoffTime);
  }
  return prev;
}
