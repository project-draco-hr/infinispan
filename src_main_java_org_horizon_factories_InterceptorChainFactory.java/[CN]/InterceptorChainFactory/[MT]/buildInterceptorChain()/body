{
  boolean invocationBatching=configuration.isInvocationBatchingEnabled();
  CommandInterceptor first=invocationBatching ? createInterceptor(BatchingInterceptor.class) : createInterceptor(InvocationContextInterceptor.class);
  InterceptorChain interceptorChain=new InterceptorChain(first);
  componentRegistry.registerComponent(interceptorChain,InterceptorChain.class);
  if (invocationBatching)   interceptorChain.appendIntereceptor(createInterceptor(InvocationContextInterceptor.class));
  if (configuration.isExposeManagementStatistics())   interceptorChain.appendIntereceptor(createInterceptor(CacheMgmtInterceptor.class));
  interceptorChain.appendIntereceptor(createInterceptor(TxInterceptor.class));
  if (configuration.isUseLazyDeserialization())   interceptorChain.appendIntereceptor(createInterceptor(MarshalledValueInterceptor.class));
  interceptorChain.appendIntereceptor(createInterceptor(NotificationInterceptor.class));
switch (configuration.getCacheMode()) {
case REPL_SYNC:
case REPL_ASYNC:
    interceptorChain.appendIntereceptor(createInterceptor(ReplicationInterceptor.class));
  break;
case INVALIDATION_SYNC:
case INVALIDATION_ASYNC:
interceptorChain.appendIntereceptor(createInterceptor(InvalidationInterceptor.class));
break;
case LOCAL:
}
if (configuration.isUsingCacheLoaders()) {
if (configuration.getCacheLoaderManagerConfig().isPassivation()) {
interceptorChain.appendIntereceptor(createInterceptor(ActivationInterceptor.class));
}
 else {
interceptorChain.appendIntereceptor(createInterceptor(CacheLoaderInterceptor.class));
}
}
interceptorChain.appendIntereceptor(createInterceptor(LockingInterceptor.class));
if (configuration.isUsingCacheLoaders()) {
if (configuration.getCacheLoaderManagerConfig().isPassivation()) {
interceptorChain.appendIntereceptor(createInterceptor(PassivationInterceptor.class));
}
 else {
interceptorChain.appendIntereceptor(createInterceptor(CacheStoreInterceptor.class));
}
}
if (configuration.isUsingEviction()) {
EvictionInterceptor evictionInterceptor=(EvictionInterceptor)createInterceptor(EvictionInterceptor.class);
interceptorChain.appendIntereceptor(evictionInterceptor);
}
CommandInterceptor callInterceptor=createInterceptor(CallInterceptor.class);
interceptorChain.appendIntereceptor(callInterceptor);
if (log.isTraceEnabled()) log.trace("Finished building default interceptor chain.");
buildCustomInterceptors(interceptorChain,configuration.getCustomInterceptors());
return interceptorChain;
}
