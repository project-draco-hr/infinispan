{
  for (  MeasurementScheduleRequest req : metrics) {
    if (req.getName().startsWith(INTERNAL))     processPluginStats(req,report);
 else {
      String reqName=plugin2server.get(req.getName());
      if (reqName == null) {
        reqName=req.getName();
      }
      ComplexRequest request=null;
      Operation op;
      if (reqName.contains(":")) {
        request=ComplexRequest.create(reqName);
        op=new ReadAttribute(getAddress(),request.getProp());
      }
 else {
        op=new ReadAttribute(getAddress(),reqName);
      }
      Result res=getASConnection().execute(op);
      if (!res.isSuccess()) {
        log.warn("Getting metric [" + req.getName() + "] at [ "+ getAddress()+ "] failed: "+ res.getFailureDescription());
        continue;
      }
      Object val=res.getResult();
      if (val == null)       continue;
      if (req.getDataType() == DataType.MEASUREMENT) {
        if (!val.equals("no metrics available")) {
          try {
            if (request != null) {
              HashMap<String,Number> myValues=(HashMap<String,Number>)val;
              for (              String key : myValues.keySet()) {
                String sub=request.getSub();
                if (key.equals(sub)) {
                  addMetric2Report(report,req,myValues.get(key));
                }
              }
            }
 else {
              addMetric2Report(report,req,val);
            }
          }
 catch (          NumberFormatException e) {
            log.warn("Non numeric input for [" + req.getName() + "] : ["+ val+ "]");
          }
        }
      }
 else       if (req.getDataType() == DataType.TRAIT) {
        String realVal=getStringValue(val);
        MeasurementDataTrait data=new MeasurementDataTrait(req,realVal);
        report.addData(data);
      }
    }
  }
}
