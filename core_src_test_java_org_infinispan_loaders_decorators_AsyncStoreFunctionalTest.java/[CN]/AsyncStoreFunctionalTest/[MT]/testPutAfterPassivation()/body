{
  ConfigurationBuilder builder=asyncStoreWithEvictionBuilder();
  builder.loaders().passivation(true);
  withCacheManager(new CacheManagerCallable(TestCacheManagerFactory.createCacheManager(builder)){
    @Override public void call(){
      GlobalComponentRegistry gcr=TestingUtil.extractGlobalComponentRegistry(cm);
      gcr.getComponentMetadataRepo().injectFactoryForComponent(CacheLoaderManager.class,CustomCacheLoaderManagerFactory.class);
      Cache<Integer,String> cache=cm.getCache();
      MockAsyncStore cacheStore=getMockAsyncStore(cache);
      CountDownLatch modApplyLatch=cacheStore.modApplyLatch;
      CountDownLatch lockedWaitLatch=cacheStore.lockedWaitLatch;
      cache.put(1,"v1");
      cache.put(2,"v2");
      try {
        log.trace("Wait for async store to lock keys");
        lockedWaitLatch.await(60,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
      try {
        assertEquals("v1",cache.get(1));
      }
  finally {
        modApplyLatch.countDown();
      }
    }
  }
);
}
