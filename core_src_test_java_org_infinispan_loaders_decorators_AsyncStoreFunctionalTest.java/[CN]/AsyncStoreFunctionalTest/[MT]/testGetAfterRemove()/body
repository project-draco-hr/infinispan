{
  ConfigurationBuilder builder=new ConfigurationBuilder();
  builder.loaders().addStore(DummyInMemoryCacheStoreConfigurationBuilder.class).async().enabled(true);
  withCacheManager(new CacheManagerCallable(TestCacheManagerFactory.createCacheManager(builder)){
    @Override public void call(){
      GlobalComponentRegistry gcr=TestingUtil.extractGlobalComponentRegistry(cm);
      gcr.getComponentMetadataRepo().injectFactoryForComponent(CacheLoaderManager.class,CustomCacheLoaderManagerFactory.class);
      Cache<Integer,String> cache=cm.getCache();
      MockAsyncStore cacheStore=getMockAsyncStore(cache);
      CountDownLatch modApplyLatch=cacheStore.modApplyLatch;
      CountDownLatch lockedWaitLatch=cacheStore.lockedWaitLatch;
      cache.put(1,"skip");
      ((DummyInMemoryCacheStore)cacheStore.getDelegate()).blockUntilCacheStoreContains(1,"skip",60000);
      cache.remove(1);
      try {
        lockedWaitLatch.await(60,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
      try {
        assertEquals(null,cache.get(1));
      }
  finally {
        modApplyLatch.countDown();
      }
      DataContainer dataContainer=TestingUtil.extractComponent(cache,DataContainer.class);
      dataContainer.purgeExpired();
      Set<Integer> keys=cache.keySet();
      assertTrue("Keys not empty: " + keys,keys.isEmpty());
      Set<Map.Entry<Integer,String>> entries=cache.entrySet();
      assertTrue("Entry set not empty: " + entries,entries.isEmpty());
      Collection<String> values=cache.values();
      assertTrue("Values not empty: " + values,values.isEmpty());
    }
  }
);
}
