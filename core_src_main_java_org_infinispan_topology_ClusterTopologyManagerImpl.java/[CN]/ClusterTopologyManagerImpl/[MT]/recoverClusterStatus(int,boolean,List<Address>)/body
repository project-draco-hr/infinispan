{
  ReplicableCommand command=new CacheTopologyControlCommand(null,CacheTopologyControlCommand.Type.GET_STATUS,transport.getAddress(),newViewId);
  Map<Address,Object> statusResponses=executeOnClusterSync(command,getGlobalTimeout(),false,false,new CacheTopologyFilterReuser());
  log.debugf("Got %d status responses. members are %s",statusResponses.size(),clusterMembers);
  Map<String,Map<Address,CacheStatusResponse>> responsesByCache=new HashMap<>();
  boolean recoveredRebalancingStatus=true;
  for (  Map.Entry<Address,Object> responseEntry : statusResponses.entrySet()) {
    Address sender=responseEntry.getKey();
    ManagerStatusResponse nodeStatus=(ManagerStatusResponse)responseEntry.getValue();
    recoveredRebalancingStatus&=nodeStatus.isRebalancingEnabled();
    for (    Map.Entry<String,CacheStatusResponse> statusEntry : nodeStatus.getCaches().entrySet()) {
      String cacheName=statusEntry.getKey();
      Map<Address,CacheStatusResponse> cacheResponses=responsesByCache.get(cacheName);
      if (cacheResponses == null) {
        cacheResponses=new HashMap<>();
        responsesByCache.put(cacheName,cacheResponses);
      }
      cacheResponses.put(sender,statusEntry.getValue());
    }
  }
  isRebalancingEnabled=recoveredRebalancingStatus;
  for (  Map.Entry<String,Map<Address,CacheStatusResponse>> e : responsesByCache.entrySet()) {
    ClusterCacheStatus cacheStatus=initCacheStatusIfAbsent(e.getKey());
    cacheStatus.doMergePartitions(e.getValue(),clusterMembers,isMergeView);
  }
}
