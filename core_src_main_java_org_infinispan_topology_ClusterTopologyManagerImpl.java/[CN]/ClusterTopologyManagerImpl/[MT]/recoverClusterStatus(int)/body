{
  ReplicableCommand command=new CacheTopologyControlCommand(null,CacheTopologyControlCommand.Type.GET_STATUS,transport.getAddress(),newViewId);
  Map<Address,Object> statusResponses=executeOnClusterSync(command,getGlobalTimeout(),false,false);
  log.debugf("Got statusResponses %s. members are %s",statusResponses,transport.getMembers());
  HashMap<String,List<CacheTopology>> clusterCacheMap=new HashMap<String,List<CacheTopology>>();
  for (  Map.Entry<Address,Object> responseEntry : statusResponses.entrySet()) {
    Address sender=responseEntry.getKey();
    Map<String,LocalTopologyManager.StatusResponse> nodeStatus=(Map<String,LocalTopologyManager.StatusResponse>)responseEntry.getValue();
    for (    Map.Entry<String,LocalTopologyManager.StatusResponse> statusEntry : nodeStatus.entrySet()) {
      String cacheName=statusEntry.getKey();
      CacheJoinInfo joinInfo=statusEntry.getValue().getCacheJoinInfo();
      CacheTopology cacheTopology=statusEntry.getValue().getCacheTopology();
      List<CacheTopology> topologyList=clusterCacheMap.get(cacheName);
      if (topologyList == null) {
        initCacheStatusIfAbsent(cacheName,joinInfo);
        topologyList=new ArrayList<CacheTopology>();
        clusterCacheMap.put(cacheName,topologyList);
      }
      if (cacheTopology != null) {
        topologyList.add(cacheTopology);
        for (        Address member : cacheTopology.getMembers()) {
          if (statusResponses.containsKey(member)) {
            Map<String,LocalTopologyManager.StatusResponse> memberStatus=(Map<String,LocalTopologyManager.StatusResponse>)statusResponses.get(member);
            LocalTopologyManager.StatusResponse cacheStatus=memberStatus.get(cacheName);
            if (cacheStatus != null) {
              CacheJoinInfo memberJoinInfo=cacheStatus.getCacheJoinInfo();
              float capacityFactor=memberJoinInfo.getCapacityFactor();
              cacheStatusMap.get(cacheName).addMember(member,capacityFactor);
            }
          }
        }
      }
      cacheStatusMap.get(cacheName).addMember(sender,joinInfo.getCapacityFactor());
    }
  }
  log.debugf("Recovering running caches in the cluster: %s",clusterCacheMap);
  return clusterCacheMap;
}
