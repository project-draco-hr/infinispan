{
  final List<NotifyingFuture<Integer>> futures=new ArrayList<>();
  futures.add(createDelayedFuture(2,50));
  futures.add(createDelayedFuture(4,50));
  futures.add(createDelayedFuture(6,50));
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicBoolean wasCalled=new AtomicBoolean(false);
  NotifyingFuture<Void> chained=Futures.andThen(Futures.combine(futures),new Runnable(){
    @Override public void run(){
      wasCalled.set(true);
    }
  }
);
  chained.attachListener(new FutureListener<Void>(){
    @Override public void futureDone(    Future<Void> future){
      latch.countDown();
    }
  }
);
  latch.await();
  assertTrue(chained.isDone());
  assertTrue(wasCalled.get());
  assertFalse(chained.isCancelled());
}
