{
  List<NotifyingFuture<Integer>> futures=new ArrayList<>();
  Random random=new Random();
  for (int i=0; i < 100; i++) {
    futures.add(createDelayedFuture(i,random.nextInt(25)));
  }
  final NotifyingFuture<List<Integer>> compositeFuture=Futures.combine(futures);
  final CountDownLatch endLatch=new CountDownLatch(1);
  compositeFuture.attachListener(new FutureListener<List<Integer>>(){
    @Override public void futureDone(    Future<List<Integer>> future){
      assertTrue(future.isDone());
      assertFalse(future.isCancelled());
      endLatch.countDown();
    }
  }
);
  endLatch.await();
  assertTrue(compositeFuture.isDone());
  assertAllDone(futures);
}
