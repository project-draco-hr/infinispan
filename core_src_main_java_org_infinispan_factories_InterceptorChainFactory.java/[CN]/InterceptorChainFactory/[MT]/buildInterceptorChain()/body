{
  boolean needsVersionAwareComponents=configuration.isTransactionalCache() && configuration.isWriteSkewCheck() && configuration.getTransactionLockingMode() == LockingMode.OPTIMISTIC && configuration.isEnableVersioning();
  boolean invocationBatching=configuration.isInvocationBatchingEnabled();
  CommandInterceptor first;
  if (invocationBatching) {
    first=createInterceptor(new BatchingInterceptor(),BatchingInterceptor.class);
  }
 else {
    first=createInterceptor(new InvocationContextInterceptor(),InvocationContextInterceptor.class);
  }
  InterceptorChain interceptorChain=new InterceptorChain(first);
  componentRegistry.registerComponent(interceptorChain,InterceptorChain.class);
  if (isUsingMarshalledValues(configuration) || configuration.isUseAsyncMarshalling() || configuration.isUseReplQueue()|| hasAsyncStore())   interceptorChain.appendInterceptor(createInterceptor(new IsMarshallableInterceptor(),IsMarshallableInterceptor.class),false);
  if (invocationBatching) {
    interceptorChain.appendInterceptor(createInterceptor(new InvocationContextInterceptor(),InvocationContextInterceptor.class),false);
  }
  if (configuration.isExposeJmxStatistics())   interceptorChain.appendInterceptor(createInterceptor(new CacheMgmtInterceptor(),CacheMgmtInterceptor.class),false);
  if (configuration.getCacheMode().isDistributed() || configuration.getCacheMode().isReplicated())   interceptorChain.appendInterceptor(createInterceptor(new StateTransferLockInterceptor(),StateTransferLockInterceptor.class),false);
  if (configuration.isTransactionalCache())   interceptorChain.appendInterceptor(createInterceptor(new TxInterceptor(),TxInterceptor.class),false);
  if (isUsingMarshalledValues(configuration))   interceptorChain.appendInterceptor(createInterceptor(new MarshalledValueInterceptor(),MarshalledValueInterceptor.class),false);
  interceptorChain.appendInterceptor(createInterceptor(new NotificationInterceptor(),NotificationInterceptor.class),false);
  if (configuration.isUseEagerLocking()) {
    configuration.fluent().transaction().lockingMode(LockingMode.PESSIMISTIC);
  }
  if (configuration.isTransactionalCache()) {
    if (configuration.getTransactionLockingMode() == LockingMode.PESSIMISTIC) {
      interceptorChain.appendInterceptor(createInterceptor(new PessimisticLockingInterceptor(),PessimisticLockingInterceptor.class),false);
    }
 else {
      interceptorChain.appendInterceptor(createInterceptor(new OptimisticLockingInterceptor(),OptimisticLockingInterceptor.class),false);
    }
  }
 else {
    interceptorChain.appendInterceptor(createInterceptor(new NonTransactionalLockingInterceptor(),NonTransactionalLockingInterceptor.class),false);
  }
  if (needsVersionAwareComponents && configuration.getCacheMode().isClustered())   interceptorChain.appendInterceptor(createInterceptor(new VersionedEntryWrappingInterceptor(),VersionedEntryWrappingInterceptor.class),false);
 else   interceptorChain.appendInterceptor(createInterceptor(new EntryWrappingInterceptor(),EntryWrappingInterceptor.class),false);
  if (configuration.isUsingCacheLoaders()) {
    if (configuration.getCacheLoaderManagerConfig().isPassivation()) {
      if (configuration.getCacheMode().isClustered())       interceptorChain.appendInterceptor(createInterceptor(new ClusteredActivationInterceptor(),ClusteredActivationInterceptor.class),false);
 else       interceptorChain.appendInterceptor(createInterceptor(new ActivationInterceptor(),ActivationInterceptor.class),false);
      interceptorChain.appendInterceptor(createInterceptor(new PassivationInterceptor(),PassivationInterceptor.class),false);
    }
 else {
      if (configuration.getCacheMode().isClustered())       interceptorChain.appendInterceptor(createInterceptor(new ClusteredCacheLoaderInterceptor(),ClusteredCacheLoaderInterceptor.class),false);
 else       interceptorChain.appendInterceptor(createInterceptor(new CacheLoaderInterceptor(),CacheLoaderInterceptor.class),false);
switch (configuration.getCacheMode()) {
case DIST_SYNC:
case DIST_ASYNC:
        interceptorChain.appendInterceptor(createInterceptor(new DistCacheStoreInterceptor(),DistCacheStoreInterceptor.class),false);
      break;
default :
    interceptorChain.appendInterceptor(createInterceptor(new CacheStoreInterceptor(),CacheStoreInterceptor.class),false);
  break;
}
}
}
if (configuration.isEnableDeadlockDetection()) {
interceptorChain.appendInterceptor(createInterceptor(new DeadlockDetectingInterceptor(),DeadlockDetectingInterceptor.class),false);
}
switch (configuration.getCacheMode()) {
case REPL_SYNC:
if (needsVersionAwareComponents) {
interceptorChain.appendInterceptor(createInterceptor(new VersionedReplicationInterceptor(),VersionedReplicationInterceptor.class),false);
break;
}
case REPL_ASYNC:
interceptorChain.appendInterceptor(createInterceptor(new ReplicationInterceptor(),ReplicationInterceptor.class),false);
break;
case INVALIDATION_SYNC:
case INVALIDATION_ASYNC:
interceptorChain.appendInterceptor(createInterceptor(new InvalidationInterceptor(),InvalidationInterceptor.class),false);
break;
case DIST_SYNC:
if (needsVersionAwareComponents) {
interceptorChain.appendInterceptor(createInterceptor(new VersionedDistributionInterceptor(),VersionedDistributionInterceptor.class),false);
break;
}
case DIST_ASYNC:
interceptorChain.appendInterceptor(createInterceptor(new DistributionInterceptor(),DistributionInterceptor.class),false);
break;
case LOCAL:
}
CommandInterceptor callInterceptor=createInterceptor(new CallInterceptor(),CallInterceptor.class);
interceptorChain.appendInterceptor(callInterceptor,false);
log.trace("Finished building default interceptor chain.");
buildCustomInterceptors(interceptorChain,configuration.getCustomInterceptors());
return interceptorChain;
}
