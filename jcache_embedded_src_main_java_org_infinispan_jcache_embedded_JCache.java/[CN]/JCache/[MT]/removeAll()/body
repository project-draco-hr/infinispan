{
  List<Future<V>> futures=new ArrayList<Future<V>>();
  for (  final K key : cache.keySet()) {
    if (lockRequired(key)) {
      new WithProcessorLock<Void>().call(key,new Callable<Void>(){
        @Override public Void call(){
          cache.remove(key);
          return null;
        }
      }
);
    }
 else {
      futures.add(cache.removeAsync(key));
    }
  }
  for (  Future<V> future : futures) {
    try {
      future.get(10,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new CacheException("Interrupted while waiting for remove to complete");
    }
catch (    Exception e) {
      throw Exceptions.launderCacheWriterException(e);
    }
  }
}
