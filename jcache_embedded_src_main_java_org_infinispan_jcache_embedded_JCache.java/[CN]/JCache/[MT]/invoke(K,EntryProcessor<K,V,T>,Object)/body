{
  checkNotClosed().checkNotNull(key,"key").checkNotNull(entryProcessor,"entryProcessor");
  if (trace)   log.tracef("Invoke entry processor %s for key=%s",entryProcessor,key);
  try {
    return new WithProcessorLock<T>().call(key,new Callable<T>(){
      @Override public T call() throws Exception {
        V oldValue=skipCacheLoadCache.get(key);
        V safeOldValue=oldValue;
        if (configuration.isStoreByValue()) {
          safeOldValue=safeCopy(oldValue);
        }
        MutableJCacheEntry<K,V> mutable=createMutableCacheEntry(safeOldValue,key);
        T ret=processEntryProcessor(mutable,entryProcessor,arguments);
switch (mutable.getOperation()) {
case NONE:
          break;
case ACCESS:
        updateTTLForAccessed(cache,key,oldValue);
      break;
case UPDATE:
    V newValue=mutable.getNewValue();
  if (oldValue != null) {
    replace(cache,skipCacheLoadAndStatsCache,key,oldValue,newValue,true);
  }
 else {
    put(cache,skipCacheLoadCache,key,newValue,true);
  }
break;
case REMOVE:
cache.remove(key);
break;
default :
break;
}
return ret;
}
}
);
}
 catch (org.infinispan.commons.CacheException e) {
throw Exceptions.launderException(e);
}
}
