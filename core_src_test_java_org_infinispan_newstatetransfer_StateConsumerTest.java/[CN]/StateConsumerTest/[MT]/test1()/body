{
  ConfigurationBuilder cb=new ConfigurationBuilder();
  cb.clustering().invocationBatching().enable().clustering().cacheMode(CacheMode.DIST_SYNC).clustering().stateTransfer().timeout(10000).versioning().enable().scheme(VersioningScheme.SIMPLE).locking().lockAcquisitionTimeout(200).writeSkewCheck(true).isolationLevel(IsolationLevel.REPEATABLE_READ);
  ThreadFactory threadFactory=new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      return new Thread(r);
    }
  }
;
  Configuration configuration=cb.build();
  List<Address> members1=new ArrayList<Address>();
  for (int i=0; i < 6; i++) {
    members1.add(new TestAddress(i));
  }
  List<Address> members2=new ArrayList<Address>(members1);
  members2.remove(new TestAddress(5));
  members2.add(new TestAddress(6));
  DefaultConsistentHashFactory chf=new DefaultConsistentHashFactory();
  DefaultConsistentHash ch1=chf.create(new MurmurHash3(),2,4,members1);
  DefaultConsistentHash ch2=chf.updateMembers(ch1,members2);
  System.out.println(ch1.dump());
  System.out.println(ch2.dump());
  ExecutorService executorService2=mock(ExecutorService.class);
  RpcManager rpcManager=mock(RpcManager.class);
  CommandsFactory commandsFactory=mock(CommandsFactory.class);
  CacheLoaderManager cacheLoaderManager=mock(CacheLoaderManager.class);
  DataContainer dataContainer=mock(DataContainer.class);
  TransactionTable transactionTable=mock(TransactionTable.class);
  StateTransferLock stateTransferLock=mock(StateTransferLock.class);
  InterceptorChain interceptorChain=mock(InterceptorChain.class);
  InvocationContextContainer icc=mock(InvocationContextContainer.class);
  when(executorService2.submit(any(Runnable.class))).thenAnswer(new Answer<Future<?>>(){
    @Override public Future<?> answer(    InvocationOnMock invocation) throws Throwable {
      return null;
    }
  }
);
  when(rpcManager.getAddress()).thenReturn(new TestAddress(0));
  StateConsumerImpl stateConsumer=new StateConsumerImpl(interceptorChain,icc,configuration,rpcManager,commandsFactory,cacheLoaderManager,dataContainer,transactionTable);
  final List<InternalCacheEntry> cacheEntries=new ArrayList<InternalCacheEntry>();
  cacheEntries.add(new ImmortalCacheEntry("key1","value1"));
  cacheEntries.add(new ImmortalCacheEntry("key2","value2"));
  when(dataContainer.iterator()).thenAnswer(new Answer<Iterator<InternalCacheEntry>>(){
    @Override public Iterator<InternalCacheEntry> answer(    InvocationOnMock invocation) throws Throwable {
      return cacheEntries.iterator();
    }
  }
);
  when(transactionTable.getLocalTransactions()).thenReturn(Collections.<LocalTransaction>emptyList());
  when(transactionTable.getRemoteTransactions()).thenReturn(Collections.<RemoteTransaction>emptyList());
  Set<Integer> segments=new HashSet<Integer>();
  for (int i=0; i < 5; i++) {
    segments.add(i);
  }
  Set<Integer> seg=new HashSet<Integer>();
  seg.add(0);
  assertFalse(stateConsumer.isStateTransferInProgress());
  stateConsumer.onTopologyUpdate(1,ch1);
  assertTrue(stateConsumer.isStateTransferInProgress());
  stateConsumer.onTopologyUpdate(3,ch2);
  stateConsumer.shutdown();
  assertFalse(stateConsumer.isStateTransferInProgress());
}
