{
  Configuration configuration=cr.getComponent(Configuration.class);
  IndexingConfiguration indexingConfiguration=configuration.indexing();
  if (!indexingConfiguration.index().isEnabled()) {
    if (verifyChainContainsQueryInterceptor(cr)) {
      throw new IllegalStateException("It was NOT expected to find the Query interceptor registered in the InterceptorChain as indexing was disabled, but it was found");
    }
    return;
  }
  if (!verifyChainContainsQueryInterceptor(cr)) {
    throw new IllegalStateException("It was expected to find the Query interceptor registered in the InterceptorChain but it wasn't found");
  }
  SearchIntegrator searchFactory=cr.getComponent(SearchIntegrator.class);
  if (!indexingConfiguration.indexedEntities().isEmpty()) {
    Properties indexingProperties=indexingConfiguration.properties();
    if (hasInfinispanDirectory(indexingProperties)) {
      String metadataCacheName=getMetadataCacheName(indexingProperties);
      String lockingCacheName=getLockingCacheName(indexingProperties);
      String dataCacheName=getDataCacheName(indexingProperties);
      if (cacheName.equals(dataCacheName) && (cacheName.equals(metadataCacheName) || cacheName.equals(lockingCacheName))) {
        Class<?>[] indexedEntities=indexingConfiguration.indexedEntities().toArray(new Class<?>[indexingConfiguration.indexedEntities().size()]);
        searchFactory.addClasses(indexedEntities);
        checkIndexableClasses(searchFactory,indexingConfiguration.indexedEntities());
      }
    }
 else {
      checkIndexableClasses(searchFactory,indexingConfiguration.indexedEntities());
    }
  }
  registerQueryMBeans(cr,configuration,searchFactory);
}
