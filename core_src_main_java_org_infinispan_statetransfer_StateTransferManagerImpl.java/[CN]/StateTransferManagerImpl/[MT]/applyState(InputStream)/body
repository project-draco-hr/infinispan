{
  if (log.isDebugEnabled())   log.debug("Applying state");
  ObjectInput oi=null;
  try {
    oi=marshaller.startObjectInput(in,false);
    boolean canProvideState=(Boolean)marshaller.objectFromObjectStream(oi);
    if (canProvideState) {
      assertDelimited(oi);
      if (transientState)       applyInMemoryState(oi);
      assertDelimited(oi);
      if (persistentState)       applyPersistentState(oi);
      assertDelimited(oi);
      applyTransactionLog(oi);
      if (log.isDebugEnabled())       log.debug("State applied, closing object stream");
    }
 else {
      String msg="Provider cannot provide state!";
      if (log.isDebugEnabled())       log.debug(msg);
      throw new StateTransferException(msg);
    }
  }
 catch (  StateTransferException ste) {
    throw ste;
  }
catch (  Exception e) {
    throw new StateTransferException(e);
  }
 finally {
    marshaller.finishObjectInput(oi);
  }
}
