{
  if (trace) {
    log.tracef("Starting state transfer manager on " + rpcManager.getAddress());
  }
  CacheJoinInfo joinInfo=new CacheJoinInfo(pickConsistentHashFactory(),configuration.clustering().hash().hash(),configuration.clustering().hash().numSegments(),configuration.clustering().hash().numOwners(),configuration.clustering().stateTransfer().timeout());
  CacheTopologyHandler handler=new CacheTopologyHandler(){
    @Override public void updateConsistentHash(    CacheTopology cacheTopology){
      doTopologyUpdate(cacheTopology,false);
    }
    @Override public void rebalance(    CacheTopology cacheTopology){
      doTopologyUpdate(cacheTopology,true);
    }
    private void doTopologyUpdate(    CacheTopology newCacheTopology,    boolean isRebalance){
      if (trace)       log.tracef("Installing new cache topology %s",newCacheTopology);
      newCacheTopology=addGrouping(newCacheTopology);
      ConsistentHash oldCH=cacheTopology != null ? cacheTopology.getWriteConsistentHash() : null;
      ConsistentHash newCH=newCacheTopology.getWriteConsistentHash();
      rebalanceInProgress|=isRebalance;
      cacheNotifier.notifyTopologyChanged(oldCH,newCH,true);
      cacheTopology=newCacheTopology;
      cacheNotifier.notifyTopologyChanged(oldCH,newCH,false);
      onTopologyUpdate(newCacheTopology.getTopologyId(),newCacheTopology.getReadConsistentHash(),newCacheTopology.getWriteConsistentHash());
    }
  }
;
  localTopologyManager.join(cacheName,joinInfo,handler);
}
