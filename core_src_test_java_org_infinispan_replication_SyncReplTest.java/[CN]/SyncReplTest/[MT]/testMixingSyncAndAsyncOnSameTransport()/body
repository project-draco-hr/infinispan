{
  Cache<String,String> cache1=cache(0,"replSync");
  cache(1,"replSync");
  waitForClusterToForm("replSync");
  Transport originalTransport=null;
  RpcManagerImpl rpcManager=null;
  RpcManagerImpl asyncRpcManager=null;
  try {
    ConfigurationBuilder asyncCache=getDefaultClusteredCacheConfig(CacheMode.REPL_ASYNC,false);
    asyncCache.clustering().async().asyncMarshalling(true);
    asyncCache.clustering().hash().numSegments(1).consistentHashFactory(new ReplicatedControlledConsistentHashFactory(0));
    defineConfigurationOnAllManagers("asyncCache",asyncCache);
    Cache<String,String> asyncCache1=manager(0).getCache("asyncCache");
    manager(1).getCache("asyncCache");
    waitForClusterToForm("asyncCache");
    originalTransport=TestingUtil.extractGlobalComponent(cache1.getCacheManager(),Transport.class);
    Transport mockTransport=spy(originalTransport);
    rpcManager=(RpcManagerImpl)TestingUtil.extractComponent(cache1,RpcManager.class);
    rpcManager.setTransport(mockTransport);
    cache1.put("k","v");
    verify(mockTransport).invokeRemotelyAsync(anyCollectionOf(Address.class),any(ReplicableCommand.class),eq(ResponseMode.SYNCHRONOUS_IGNORE_LEAVERS),anyLong(),any(ResponseFilter.class),any(DeliverOrder.class),anyBoolean());
    asyncRpcManager=(RpcManagerImpl)TestingUtil.extractComponent(asyncCache1,RpcManager.class);
    asyncRpcManager.setTransport(mockTransport);
    reset(mockTransport);
    asyncCache1.put("k","v");
    verify(mockTransport).invokeRemotelyAsync(anyCollectionOf(Address.class),any(ReplicableCommand.class),eq(ResponseMode.ASYNCHRONOUS),anyLong(),any(ResponseFilter.class),any(DeliverOrder.class),anyBoolean());
  }
  finally {
    if (rpcManager != null)     rpcManager.setTransport(originalTransport);
    if (asyncRpcManager != null)     asyncRpcManager.setTransport(originalTransport);
  }
}
