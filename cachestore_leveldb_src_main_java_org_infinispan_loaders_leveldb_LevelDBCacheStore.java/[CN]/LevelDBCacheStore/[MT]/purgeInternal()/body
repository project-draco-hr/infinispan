{
  try {
    List<ExpiryEntry> entries=new ArrayList<ExpiryEntry>();
    expiryEntryQueue.drainTo(entries);
    for (    ExpiryEntry entry : entries) {
      final byte[] expiryBytes=marshall(entry.expiry);
      final byte[] keyBytes=marshall(entry.key);
      final byte[] existingBytes=expiredDb.get(expiryBytes);
      if (existingBytes != null) {
        final Object existing=unmarshall(existingBytes);
        if (existing instanceof List) {
          ((List<Object>)existing).add(entry.key);
          expiredDb.put(expiryBytes,marshall(existing));
        }
 else {
          List<Object> al=new ArrayList<Object>(2);
          al.add(existing);
          al.add(entry.key);
          expiredDb.put(expiryBytes,marshall(al));
        }
      }
 else {
        expiredDb.put(marshall(expiryBytes),keyBytes);
      }
    }
    List<Long> times=new ArrayList<Long>();
    List<Object> keys=new ArrayList<Object>();
    DBIterator it=expiredDb.iterator(new ReadOptions().fillCache(false));
    try {
      for (it.seekToFirst(); it.hasNext(); ) {
        Map.Entry<byte[],byte[]> entry=it.next();
        Long time=(Long)unmarshall(entry.getKey());
        if (time > System.currentTimeMillis())         break;
        times.add(time);
        Object key=unmarshall(entry.getValue());
        if (key instanceof List)         keys.addAll((List<?>)key);
 else         keys.add(key);
      }
      for (      Long time : times) {
        expiredDb.delete(marshall(time));
      }
      if (!keys.isEmpty())       log.debugf("purge (up to) %d entries",keys.size());
      int count=0;
      long currentTimeMillis=System.currentTimeMillis();
      for (      Object key : keys) {
        byte[] keyBytes=marshall(key);
        byte[] b=db.get(keyBytes);
        if (b == null)         continue;
        InternalCacheValue ice=(InternalCacheValue)getMarshaller().objectFromByteBuffer(b);
        if (ice.isExpired(currentTimeMillis)) {
          db.delete(keyBytes);
          count++;
        }
      }
      if (count != 0)       log.debugf("purged %d entries",count);
    }
 catch (    Exception e) {
      throw new CacheLoaderException(e);
    }
 finally {
      try {
        it.close();
      }
 catch (      IOException e) {
        log.warnUnableToCloseDbIterator(e);
      }
    }
  }
 catch (  Exception e) {
    throw new CacheLoaderException(e);
  }
}
