{
synchronized (this) {
    if (currentTopology == null) {
      createInitialCacheTopology();
    }
    ConsistentHashFactory<ConsistentHash> consistentHashFactory=getJoinInfo().getConsistentHashFactory();
    int topologyId=currentTopology.getTopologyId();
    int rebalanceId=currentTopology.getRebalanceId();
    ConsistentHash currentCH=currentTopology.getCurrentCH();
    ConsistentHash pendingCH=currentTopology.getPendingCH();
    if (!needConsistentHashUpdate()) {
      log.tracef("Cache %s members list was updated, but the cache topology doesn't need to change: %s",cacheName,currentTopology);
      return;
    }
    if (newMembers.isEmpty()) {
      log.tracef("Cache %s no longer has any members, removing topology",cacheName);
      setCurrentTopology(null);
      setStableTopology(null);
      if (isRebalanceInProgress()) {
        removeRebalanceConfirmationCollector();
      }
      return;
    }
    List<Address> newCurrentMembers=pruneInvalidMembers(currentCH.getMembers());
    ConsistentHash newCurrentCH;
    List<Address> actualMembers;
    ConsistentHash newPendingCH=null;
    if (newCurrentMembers.isEmpty()) {
      log.tracef("All current members left, re-initializing status for cache %s",cacheName);
      if (isRebalanceInProgress()) {
        removeRebalanceConfirmationCollector();
      }
      newCurrentMembers=getExpectedMembers();
      actualMembers=newCurrentMembers;
      newCurrentCH=joinInfo.getConsistentHashFactory().create(joinInfo.getHashFunction(),joinInfo.getNumOwners(),joinInfo.getNumSegments(),newCurrentMembers,getCapacityFactors());
    }
 else {
      newCurrentCH=consistentHashFactory.updateMembers(currentCH,newCurrentMembers,getCapacityFactors());
      actualMembers=newCurrentMembers;
      if (pendingCH != null) {
        List<Address> newPendingMembers=pruneInvalidMembers(pendingCH.getMembers());
        newPendingCH=consistentHashFactory.updateMembers(pendingCH,newPendingMembers,getCapacityFactors());
        actualMembers=newPendingMembers;
      }
    }
    CacheTopology newTopology=new CacheTopology(topologyId + 1,rebalanceId,newCurrentCH,newPendingCH,actualMembers);
    setCurrentTopology(newTopology);
    clusterTopologyManager.broadcastTopologyUpdate(cacheName,newTopology,availabilityMode,isTotalOrder(),isDistributed());
  }
}
