{
  final List<CacheEntry<String,String>> initialValues=new ArrayList<CacheEntry<String,String>>(10);
  for (int i=0; i < 10; i++) {
    String key="key-" + i;
    String value="value-" + i;
    initialValues.add(new ImmortalCacheEntry(key,value));
  }
  CacheStream mockStream=mockStream();
  doReturn(initialValues.iterator()).when(mockStream).iterator();
  when(mockCache.getAdvancedCache().cacheEntrySet().stream()).thenReturn(mockStream);
  CacheEventFilter filter=mock(CacheEventFilter.class,withSettings().serializable());
  CacheEventConverter converter=mock(CacheEventConverter.class,withSettings().serializable());
  n.addListener(listener,filter,converter);
  verifyEvents(isClustered(listener),listener,initialValues);
  verify(filter,never()).accept(anyObject(),anyObject(),any(Metadata.class),anyObject(),any(Metadata.class),any(EventType.class));
  verify(converter,never()).convert(anyObject(),anyObject(),any(Metadata.class),anyObject(),any(Metadata.class),any(EventType.class));
}
