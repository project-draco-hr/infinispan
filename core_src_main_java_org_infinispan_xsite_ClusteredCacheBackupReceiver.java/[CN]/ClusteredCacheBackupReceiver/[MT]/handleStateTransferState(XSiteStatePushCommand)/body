{
  assertAllowInvocation();
  final long endTime=timeService.expectedEndTime(cmd.getTimeout(),TimeUnit.MILLISECONDS);
  final ClusteringDependentLogic clusteringDependentLogic=cache.getComponentRegistry().getComponent(ClusteringDependentLogic.class);
  final Map<Address,List<XSiteState>> primaryOwnersChunks=new HashMap<>();
  final Address localAddress=clusteringDependentLogic.getAddress();
  if (trace) {
    log.tracef("Received X-Site state transfer '%s'. Splitting by primary owner.",cmd);
  }
  for (  XSiteState state : cmd.getChunk()) {
    final Address primaryOwner=clusteringDependentLogic.getPrimaryOwner(state.key());
    List<XSiteState> primaryOwnerList=primaryOwnersChunks.get(primaryOwner);
    if (primaryOwnerList == null) {
      primaryOwnerList=new LinkedList<>();
      primaryOwnersChunks.put(primaryOwner,primaryOwnerList);
    }
    primaryOwnerList.add(state);
  }
  final List<XSiteState> localChunks=primaryOwnersChunks.remove(localAddress);
  final List<StatePushTask> tasks=new ArrayList<>(primaryOwnersChunks.size());
  for (  Map.Entry<Address,List<XSiteState>> entry : primaryOwnersChunks.entrySet()) {
    if (entry.getValue() == null || entry.getValue().isEmpty()) {
      continue;
    }
    if (trace) {
      log.tracef("Node '%s' will apply %s",entry.getKey(),entry.getValue());
    }
    StatePushTask task=new StatePushTask(entry.getValue(),entry.getKey(),cache);
    tasks.add(task);
    task.executeRemote();
  }
  primaryOwnersChunks.clear();
  if (trace) {
    log.tracef("Local node '%s' will apply %s",localAddress,localChunks);
  }
  if (localChunks != null) {
    StatePushTask task=new StatePushTask(localChunks,localAddress,cache);
    tasks.add(task);
    task.executeLocal();
  }
  if (trace) {
    log.tracef("Waiting for the remote tasks...");
  }
  while (!tasks.isEmpty() && !timeService.isTimeExpired(endTime)) {
    for (Iterator<StatePushTask> iterator=tasks.iterator(); iterator.hasNext(); ) {
      if (awaitRemoteTask(iterator.next())) {
        iterator.remove();
      }
    }
  }
  assertAllowInvocation();
  if (!tasks.isEmpty()) {
    throw new TimeoutException("Unable to apply state in the time limit.");
  }
}
