{
  StateSequencer sequencer=new StateSequencer();
  sequencer.logicalThread("tx1","tx1:begin","tx1:block_commit_on_backup","tx1:after_rollback_on_primary","tx1:after_rollback_on_backup","tx1:resume_commit_on_backup","tx1:after_commit_on_backup","tx1:check");
  sequencer.logicalThread("tx2","tx2:begin","tx2:end");
  sequencer.order("tx1:after_rollback_on_backup","tx2:begin","tx2:end","tx1:resume_commit_on_backup");
  advanceOnInterceptor(sequencer,cache(2),StateTransferInterceptor.class,matchCommand(CommitCommand.class).matchCount(0).build()).before("tx1:block_commit_on_backup","tx1:resume_commit_on_backup").after("tx1:after_commit_on_backup");
  advanceOnInterceptor(sequencer,cache(1),StateTransferInterceptor.class,matchCommand(RollbackCommand.class).build()).after("tx1:after_rollback_on_primary");
  advanceOnInterceptor(sequencer,cache(2),StateTransferInterceptor.class,matchCommand(RollbackCommand.class).build()).after("tx1:after_rollback_on_backup");
  assertEquals(Arrays.asList(address(1),address(2)),advancedCache(0).getDistributionManager().locate(TEST_KEY));
  sequencer.advance("tx1:begin");
  tm(0).begin();
  cache(0).put(TEST_KEY,TX1_VALUE);
  try {
    tm(0).commit();
  }
 catch (  RollbackException e) {
    log.debugf("Commit timed out as expected",e);
  }
  sequencer.advance("tx2:begin");
  LockManager lockManager1=TestingUtil.extractLockManager(cache(1));
  assertFalse(lockManager1.isLocked(TEST_KEY));
  tm(0).begin();
  cache(0).put(TEST_KEY,TX2_VALUE);
  tm(0).commit();
  checkValue();
  sequencer.advance("tx2:end");
  sequencer.advance("tx1:check");
  checkValue();
}
