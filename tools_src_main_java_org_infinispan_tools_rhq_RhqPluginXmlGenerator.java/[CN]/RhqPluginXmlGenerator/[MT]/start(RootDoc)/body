{
  List<Class<?>> mbeanIspnClasses=getMBeanClasses();
  List<Class<?>> globalClasses=new ArrayList<Class<?>>();
  List<Class<?>> namedCacheClasses=new ArrayList<Class<?>>();
  for (  Class<?> clazz : mbeanIspnClasses) {
    Scope scope=clazz.getAnnotation(Scope.class);
    if (scope != null && scope.value() == Scopes.GLOBAL) {
      globalClasses.add(clazz);
    }
 else {
      namedCacheClasses.add(clazz);
    }
  }
  classPool=ClassPool.getDefault();
  classPool.insertClassPath(new ClassClassPath(RhqPluginXmlGenerator.class));
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setNamespaceAware(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.newDocument();
  Element root=doc.createElement("plugin");
  root.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:c",URN_XMLNS_RHQ_CONFIGURATION);
  doc.appendChild(root);
  populateMetricsAndOperations(globalClasses,root,"cacheManager",false);
  populateMetricsAndOperations(namedCacheClasses,root,"cache",true);
  String targetMetaInfDir="../../../target/classes/META-INF";
  new File(targetMetaInfDir).mkdirs();
  TransformerFactory tf=TransformerFactory.newInstance();
  StreamSource xslt=new StreamSource(RhqPluginXmlGenerator.class.getResourceAsStream("/META-INF/rhq-plugin.xslt"));
  Transformer transformer=tf.newTransformer(xslt);
  transformer.setOutputProperty(OutputKeys.INDENT,"yes");
  Result output=new StreamResult(new File(targetMetaInfDir + "/rhq-plugin.xml"));
  transformer.transform(new DOMSource(doc),output);
  return true;
}
