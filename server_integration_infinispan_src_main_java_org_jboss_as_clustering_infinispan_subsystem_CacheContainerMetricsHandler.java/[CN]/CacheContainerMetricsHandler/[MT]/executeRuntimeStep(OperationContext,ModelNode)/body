{
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String cacheContainerName=address.getLastElement().getValue();
  final String attrName=operation.require(ModelDescriptionConstants.NAME).asString();
  final ServiceController<?> controller=context.getServiceRegistry(false).getService(EmbeddedCacheManagerService.getServiceName(cacheContainerName));
  DefaultEmbeddedCacheManager cacheManager=(DefaultEmbeddedCacheManager)controller.getValue();
  CacheManagerMetrics metric=CacheManagerMetrics.getStat(attrName);
  ModelNode result=new ModelNode();
  CacheContainerStats stats=cacheManager.getStats();
  if (metric == null) {
    context.getFailureDescription().set(String.format("Unknown metric %s",attrName));
  }
 else   if (cacheManager == null) {
    context.getFailureDescription().set(String.format("Unavailable cache container %s",attrName));
  }
 else {
switch (metric) {
case CACHE_MANAGER_STATUS:
      result.set(SecurityActions.getCacheManagerStatus(cacheManager).toString());
    break;
case IS_COORDINATOR:
  result.set(SecurityActions.getCacheManagerIsCoordinator(cacheManager));
break;
case LOCAL_ADDRESS:
Address localAddress=SecurityActions.getCacheManagerLocalAddress(cacheManager);
result.set(localAddress != null ? localAddress.toString() : "N/A");
break;
case COORDINATOR_ADDRESS:
Address coordinatorAddress=SecurityActions.getCacheManagerCoordinatorAddress(cacheManager);
result.set(coordinatorAddress != null ? coordinatorAddress.toString() : "N/A");
break;
case CLUSTER_AVAILABILITY:
result.set(SecurityActions.getCacheManagerClusterAvailability(cacheManager));
break;
case CLUSTER_NAME:
String clusterName=SecurityActions.getCacheManagerClusterName(cacheManager);
result.set(clusterName != null ? clusterName : "N/A");
break;
case DEFINED_CACHE_NAMES:
String definedCacheNames=SecurityActions.getDefinedCacheNames(cacheManager);
result.set(definedCacheNames != null ? definedCacheNames : "N/A");
break;
case CLUSTER_SIZE:
List<Address> members=SecurityActions.getMembers(cacheManager);
result.set(members != null ? Integer.toString(members.size()) : "N/A");
break;
case CREATED_CACHE_COUNT:
result.set(SecurityActions.getCacheCreatedCount(cacheManager));
break;
case DEFINED_CACHE_COUNT:
result.set(SecurityActions.getDefinedCacheCount(cacheManager));
break;
case MEMBERS:
members=SecurityActions.getMembers(cacheManager);
result.set(members != null ? members.toString() : "N/A");
break;
case RUNNING_CACHE_COUNT:
result.set(SecurityActions.getRunningCacheCount(cacheManager));
break;
case VERSION:
result.set(Version.getVersion());
break;
case AVERAGE_READ_TIME:
result.set(stats.getAverageReadTime());
break;
case AVERAGE_WRITE_TIME:
result.set(stats.getAverageWriteTime());
break;
case AVERAGE_REMOVE_TIME:
result.set(stats.getAverageRemoveTime());
break;
case TIME_SINCE_START:
result.set(stats.getTimeSinceStart());
break;
case EVICTIONS:
result.set(stats.getEvictions());
break;
case HIT_RATIO:
result.set(stats.getHitRatio());
break;
case HITS:
result.set(stats.getHits());
break;
case MISSES:
result.set(stats.getMisses());
break;
case NUMBER_OF_ENTRIES:
result.set(stats.getCurrentNumberOfEntries());
break;
case READ_WRITE_RATIO:
result.set(stats.getReadWriteRatio());
break;
case REMOVE_HITS:
result.set(stats.getHits());
break;
case REMOVE_MISSES:
result.set(stats.getRemoveMisses());
break;
case STORES:
result.set(stats.getStores());
break;
case TIME_SINCE_RESET:
result.set(stats.getTimeSinceStart());
break;
default :
context.getFailureDescription().set(String.format("Unknown metric %s",metric));
break;
}
context.getResult().set(result);
}
context.stepCompleted();
}
