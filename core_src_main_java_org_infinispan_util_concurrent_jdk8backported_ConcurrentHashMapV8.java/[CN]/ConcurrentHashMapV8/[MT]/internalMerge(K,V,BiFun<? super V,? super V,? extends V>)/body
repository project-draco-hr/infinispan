{
  int h=spread(k.hashCode());
  Object val=null;
  int delta=0;
  int count=0;
  for (Node[] tab=table; ; ) {
    int i;
    Node f;
    int fh;
    Object fk, fv;
    if (tab == null)     tab=initTable();
 else     if ((f=tabAt(tab,i=(tab.length - 1) & h)) == null) {
      if (casTabAt(tab,i,null,new Node(h,k,v,null))) {
        delta=1;
        val=v;
        break;
      }
    }
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            count=1;
            TreeNode p=t.getTreeNode(h,k,t.root);
            val=(p == null) ? v : mf.apply((V)p.val,v);
            if (val != null) {
              if (p != null)               p.val=val;
 else {
                count=2;
                delta=1;
                t.putTreeNode(h,k,val);
              }
            }
 else             if (p != null) {
              delta=-1;
              t.deleteTreeNode(p);
            }
          }
        }
  finally {
          t.release(0);
        }
        if (count != 0)         break;
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      try {
        if (tabAt(tab,i) == f) {
          count=1;
          for (Node e=f, pred=null; ; ++count) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && (ev=e.val) != null && ((ek=e.key) == k || k.equals(ek))) {
              val=mf.apply(v,(V)ev);
              if (val != null)               e.val=val;
 else {
                delta=-1;
                Node en=e.next;
                if (pred != null)                 pred.next=en;
 else                 setTabAt(tab,i,en);
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null) {
              val=v;
              pred.next=new Node(h,k,val,null);
              delta=1;
              if (count >= TREE_THRESHOLD)               replaceWithTreeBin(tab,i,k);
              break;
            }
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (count != 0) {
        if (tab.length <= 64)         count=2;
        break;
      }
    }
  }
  if (delta != 0) {
    counter.add((long)delta);
    if (count > 1)     checkForResize();
  }
  return val;
}
