{
  AtomicReference<U> result=this.result;
  final Fun<? super V,? extends U> searchFunction=this.searchFunction;
  if (searchFunction == null || result == null)   return abortOnNullFunction();
  try {
    int b=batch(), c;
    while (b > 1 && baseIndex != baseLimit && result.get() == null) {
      do {
      }
 while (!casPending(c=pending,c + 1));
      new SearchValuesTask<K,V,U>(map,this,b>>>=1,searchFunction,result).fork();
    }
    Object v;
    U u;
    while (result.get() == null && (v=advance()) != null) {
      if ((u=searchFunction.apply((V)v)) != null) {
        if (result.compareAndSet(null,u))         tryCompleteComputation(null);
        break;
      }
    }
    tryComplete();
  }
 catch (  Throwable ex) {
    return tryCompleteComputation(ex);
  }
  return false;
}
