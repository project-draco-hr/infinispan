{
  assertTrue(jcache.getAll(new HashSet<>(Arrays.asList(1,2,3))).isEmpty());
  assertTrue(jcache.getAll(new HashSet<>()).isEmpty());
  Map<Integer,String> data=new HashMap<>();
  data.put(1,"one");
  data.put(2,"two");
  data.put(3,"three");
  data.put(4,"four");
  data.put(5,"five");
  data.put(55,"five");
  jcache.putAll(data);
  assertEquals("one",jcache.get(1));
  assertEquals("two",jcache.get(2));
  assertEquals("three",jcache.get(3));
  assertEquals("four",jcache.get(4));
  assertEquals("five",jcache.get(5));
  assertEquals("five",jcache.get(55));
  Map<Integer,String> res0=jcache.getAll(new HashSet<>());
  assertTrue(res0.isEmpty());
  assertEquals(0,res0.size());
  Map<Integer,String> res1=jcache.getAll(new HashSet<>(Arrays.asList(1,2,5,55)));
  assertFalse(res1.isEmpty());
  assertEquals(4,res1.size());
  assertEquals("one",res1.get(1));
  assertEquals("two",res1.get(2));
  assertEquals("five",res1.get(5));
  assertEquals("five",res1.get(55));
  Map<Integer,String> res2=jcache.getAll(new HashSet<>(Arrays.asList(1,2,3,4,5,55)));
  assertFalse(res2.isEmpty());
  assertEquals(6,res2.size());
  assertEquals("one",res2.get(1));
  assertEquals("two",res2.get(2));
  assertEquals("three",res2.get(3));
  assertEquals("four",res2.get(4));
  assertEquals("five",res2.get(5));
  assertEquals("five",res2.get(55));
  jcache.removeAll(new HashSet<>());
  Map<Integer,String> res3=jcache.getAll(new HashSet<>(Arrays.asList(1,2,3,4,5,55)));
  assertFalse(res3.isEmpty());
  assertEquals(6,res3.size());
  jcache.removeAll(new HashSet<>(Arrays.asList(3,4,5,55)));
  Map<Integer,String> res4=jcache.getAll(new HashSet<>(Arrays.asList(1,2,3,4,5,55)));
  assertFalse(res4.isEmpty());
  assertEquals(2,res4.size());
  assertEquals("one",res4.get(1));
  assertEquals("two",res4.get(2));
  jcache.removeAll();
  Map<Integer,String> res5=jcache.getAll(new HashSet<>(Arrays.asList(1,2,3,4,5,55)));
  assertTrue(res5.isEmpty());
  assertEquals(0,res5.size());
}
