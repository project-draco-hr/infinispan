{
  final Class<?> propertyType=getPrimitivePropertyType(entityType,propertyPath);
  if (propertyType == null) {
    throw log.getPredicatesOnCompleteEmbeddedEntitiesNotAllowedException(StringHelper.join(propertyPath,"."));
  }
  if (Date.class.isAssignableFrom(propertyType)) {
    try {
      return getDateFormat().parse(value);
    }
 catch (    ParseException e) {
      throw log.getInvalidDateLiteralException(value);
    }
  }
  if (Enum.class.isAssignableFrom(propertyType)) {
    try {
      return Enum.valueOf((Class<Enum>)propertyType,value);
    }
 catch (    IllegalArgumentException e) {
      throw log.getInvalidEnumLiteralException(value,propertyType.getName());
    }
  }
  if (propertyType == String.class) {
    return value;
  }
  if (propertyType == Character.class || propertyType == char.class) {
    return value.charAt(0);
  }
  try {
    if (propertyType == Double.class || propertyType == double.class) {
      return Double.valueOf(value);
    }
    if (propertyType == Float.class || propertyType == float.class) {
      return Float.valueOf(value);
    }
    if (propertyType == Long.class || propertyType == long.class) {
      return Long.valueOf(value);
    }
    if (propertyType == Integer.class || propertyType == int.class) {
      return Integer.valueOf(value);
    }
    if (propertyType == Short.class || propertyType == short.class) {
      return Short.valueOf(value);
    }
    if (propertyType == Byte.class || propertyType == byte.class) {
      return Byte.valueOf(value);
    }
  }
 catch (  NumberFormatException ex) {
    throw log.getInvalidNumericLiteralException(value);
  }
  if (propertyType == Boolean.class || propertyType == boolean.class) {
    if (value.equalsIgnoreCase("true")) {
      return true;
    }
 else     if (value.equalsIgnoreCase("false")) {
      return false;
    }
 else {
      throw log.getInvalidBooleanLiteralException(value);
    }
  }
  return value;
}
