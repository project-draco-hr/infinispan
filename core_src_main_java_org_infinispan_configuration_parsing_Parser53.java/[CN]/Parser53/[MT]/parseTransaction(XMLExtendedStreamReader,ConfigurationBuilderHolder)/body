{
  ConfigurationBuilder builder=holder.getCurrentConfigurationBuilder();
  boolean forceSetTransactional=false;
  boolean transactionModeSpecified=false;
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case AUTO_COMMIT:
      builder.transaction().autoCommit(Boolean.parseBoolean(value));
    break;
case CACHE_STOP_TIMEOUT:
  builder.transaction().cacheStopTimeout(Long.parseLong(value));
break;
case EAGER_LOCK_SINGLE_NODE:
builder.transaction().eagerLockingSingleNode(Boolean.parseBoolean(value));
break;
case LOCKING_MODE:
builder.transaction().lockingMode(LockingMode.valueOf(value));
break;
case SYNC_COMMIT_PHASE:
builder.transaction().syncCommitPhase(Boolean.parseBoolean(value));
break;
case SYNC_ROLLBACK_PHASE:
builder.transaction().syncRollbackPhase(Boolean.parseBoolean(value));
break;
case TRANSACTION_MANAGER_LOOKUP_CLASS:
builder.transaction().transactionManagerLookup(Util.<TransactionManagerLookup>getInstance(value,holder.getClassLoader()));
forceSetTransactional=true;
break;
case TRANSACTION_MODE:
builder.transaction().transactionMode(TransactionMode.valueOf(value));
transactionModeSpecified=true;
break;
case USE_EAGER_LOCKING:
builder.transaction().useEagerLocking(Boolean.parseBoolean(value));
break;
case USE_SYNCHRONIZAION:
builder.transaction().useSynchronization(Boolean.parseBoolean(value));
break;
case USE_1PC_FOR_AUTOCOMMIT_TX:
builder.transaction().use1PcForAutoCommitTransactions(Boolean.parseBoolean(value));
break;
case REAPER_WAKE_UP_INTERVAL:
builder.transaction().reaperWakeUpInterval(Long.parseLong(value));
break;
case COMPLETED_TX_TIMEOUT:
builder.transaction().completedTxTimeout(Long.parseLong(value));
break;
case TRANSACTION_PROTOCOL:
builder.transaction().transactionProtocol(TransactionProtocol.valueOf(value));
break;
default :
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
if (!transactionModeSpecified && forceSetTransactional) {
builder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case RECOVERY:
parseRecovery(reader,holder);
break;
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
