{
  PrioritizedMethod[] retval;
  int numStartMethods=methodMetadata.length;
  if (numStartMethods == 0) {
    retval=EMPTY_PRIO_METHODS;
  }
 else {
    retval=new PrioritizedMethod[numStartMethods];
    for (int i=0; i < numStartMethods; i++) {
      retval[i]=new PrioritizedMethod();
      retval[i].component=c;
      retval[i].metadata=methodMetadata[i];
      if (methodMetadata[i].getMethod() == null) {
        Method method=ReflectionUtil.findMethod(componentClass,methodMetadata[i].getMethodName());
        methodMetadata[i].setMethod(method);
      }
    }
    if (retval.length > 1)     Arrays.sort(retval);
  }
  return retval;
}
