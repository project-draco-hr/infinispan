{
  while (true) {
    L lock=getLock(key);
    boolean locked;
    try {
      locked=tryLock(lock,timeout,unit,ctx);
    }
 catch (    InterruptedException ie) {
      safeRelease(lock,ctx);
      throw ie;
    }
catch (    Throwable th) {
      safeRelease(lock,ctx);
      locked=false;
    }
    if (locked) {
      L existingLock=locks.putIfAbsent(key,lock);
      if (existingLock != null && existingLock != lock) {
        safeRelease(lock,ctx);
      }
 else {
        return lock;
      }
    }
 else {
      return null;
    }
  }
}
