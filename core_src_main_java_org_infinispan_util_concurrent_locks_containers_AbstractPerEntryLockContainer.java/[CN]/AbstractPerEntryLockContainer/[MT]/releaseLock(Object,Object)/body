{
  locks.computeIfPresent(key,new ConcurrentHashMapV8.BiFun<Object,L,L>(){
    @Override public L apply(    Object key,    L lock){
      int refCount=lock.getReferenceCounter().decrementAndGet();
      if (refCount < 0) {
        throw new IllegalStateException("Negative reference count for lock " + key + ": "+ lock);
      }
      boolean remove=refCount == 0;
      getLog().tracef("Unlocking lock instance for key %s",key);
      unlock(lock,lockOwner);
      return remove ? null : lock;
    }
  }
);
}
