{
  int maxTopologyId=0;
  CacheTopology maxStableTopology=null;
  CacheTopology maxActiveTopology=null;
  Set<CacheTopology> degradedTopologies=new HashSet<>();
  CacheTopology maxDegradedTopology=null;
  for (  CacheStatusResponse response : statusResponses) {
    CacheTopology partitionStableTopology=response.getStableTopology();
    if (partitionStableTopology == null) {
      continue;
    }
    if (maxStableTopology == null || maxStableTopology.getTopologyId() < partitionStableTopology.getTopologyId()) {
      maxStableTopology=partitionStableTopology;
    }
    CacheTopology partitionTopology=response.getCacheTopology();
    if (partitionTopology == null) {
      continue;
    }
    if (partitionTopology.getTopologyId() > maxTopologyId) {
      maxTopologyId=partitionTopology.getTopologyId();
    }
    if (response.getAvailabilityMode() == AvailabilityMode.AVAILABLE) {
      if (maxActiveTopology == null || maxActiveTopology.getTopologyId() < partitionTopology.getTopologyId()) {
        maxActiveTopology=partitionTopology;
      }
    }
 else     if (response.getAvailabilityMode() == AvailabilityMode.DEGRADED_MODE) {
      degradedTopologies.add(partitionTopology);
      if (maxDegradedTopology == null || maxDegradedTopology.getTopologyId() < partitionTopology.getTopologyId()) {
        maxDegradedTopology=partitionTopology;
      }
    }
 else {
      eventLogManager.getEventLogger().context(context.getCacheName()).error(EventLogCategory.CLUSTER,MESSAGES.unexpectedAvailabilityMode(context.getAvailabilityMode(),response.getCacheTopology()));
    }
  }
  if (maxStableTopology != null) {
    log.tracef("Max stable partition topology: %s",maxStableTopology);
  }
  if (maxActiveTopology != null) {
    log.tracef("Max active partition topology: %s",maxActiveTopology);
  }
  if (maxDegradedTopology != null) {
    log.tracef("Max degraded partition topology: %s, all degraded: %s",maxDegradedTopology,degradedTopologies);
  }
  List<Address> actualMembers=new ArrayList<>(context.getExpectedMembers());
  CacheTopology mergedTopology;
  AvailabilityMode mergedAvailabilityMode;
  if (maxActiveTopology != null) {
    log.debugf("One of the partitions is available, using that partition's topology");
    mergedTopology=maxActiveTopology;
    actualMembers.retainAll(mergedTopology.getMembers());
    mergedAvailabilityMode=AvailabilityMode.AVAILABLE;
  }
 else   if (!degradedTopologies.isEmpty()) {
    log.debugf("No active partitions, so all the partitions must be in degraded mode.");
    mergedTopology=maxDegradedTopology;
    actualMembers.retainAll(mergedTopology.getMembers());
    mergedAvailabilityMode=AvailabilityMode.DEGRADED_MODE;
  }
 else {
    log.debugf("No current topology, recovered only joiners for cache %s",context.getCacheName());
    mergedTopology=null;
    actualMembers=null;
    mergedAvailabilityMode=AvailabilityMode.AVAILABLE;
  }
  if (mergedTopology != null) {
    mergedTopology=new CacheTopology(maxTopologyId + 1,mergedTopology.getRebalanceId(),mergedTopology.getCurrentCH(),null,actualMembers,persistentUUIDManager.mapAddresses(actualMembers));
  }
  context.updateTopologiesAfterMerge(mergedTopology,maxStableTopology,mergedAvailabilityMode);
  AvailabilityMode newAvailabilityMode=computeAvailabilityAfterMerge(context,maxStableTopology,actualMembers,mergedAvailabilityMode);
  if (newAvailabilityMode == AvailabilityMode.DEGRADED_MODE) {
    log.debugf("After merge, cache %s is staying in degraded mode",context.getCacheName());
    context.updateAvailabilityMode(actualMembers,newAvailabilityMode,true);
  }
 else {
    log.debugf("After merge, cache %s has recovered and is entering available mode",context.getCacheName());
    updateMembersAndRebalance(context,actualMembers,context.getExpectedMembers());
  }
}
