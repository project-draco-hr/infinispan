{
  CacheTopology currentTopology=context.getCurrentTopology();
  List<Address> newMembers=new ArrayList<>(currentTopology.getMembers());
  if (!newMembers.retainAll(clusterMembers)) {
    log.debugf("Cache %s did not lose any members, ignoring view change",context.getCacheName());
    return;
  }
  if (context.getAvailabilityMode() != AvailabilityMode.AVAILABLE) {
    log.debugf("Cache %s is not available, updating the actual members only",context.getCacheName());
    context.updateAvailabilityMode(newMembers,context.getAvailabilityMode(),false);
    return;
  }
  CacheTopology stableTopology=context.getStableTopology();
  List<Address> stableMembers=stableTopology.getMembers();
  List<Address> lostMembers=new ArrayList<>(stableMembers);
  lostMembers.removeAll(newMembers);
  if (isDataLost(stableTopology.getCurrentCH(),newMembers)) {
    eventLogManager.getEventLogger().context(context.getCacheName()).error(EventLogCategory.CLUSTER,MESSAGES.enteringDegradedModeLostData(lostMembers));
    context.updateAvailabilityMode(newMembers,AvailabilityMode.DEGRADED_MODE,true);
    return;
  }
  if (isMinorityPartition(stableMembers,lostMembers)) {
    eventLogManager.getEventLogger().context(context.getCacheName()).error(EventLogCategory.CLUSTER,MESSAGES.enteringDegradedModeMinorityPartition(newMembers,lostMembers,stableMembers));
    context.updateAvailabilityMode(newMembers,AvailabilityMode.DEGRADED_MODE,true);
    return;
  }
  updateMembersAndRebalance(context,newMembers,newMembers);
}
