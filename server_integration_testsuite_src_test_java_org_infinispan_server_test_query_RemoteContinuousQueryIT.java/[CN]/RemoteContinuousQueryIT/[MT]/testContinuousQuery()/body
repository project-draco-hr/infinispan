{
  remoteCache.put(1,createUser(1,25));
  remoteCache.put(2,createUser(2,25));
  remoteCache.put(3,createUser(3,20));
  assertEquals(3,remoteCache.size());
  QueryFactory<Query> qf=Search.getQueryFactory(remoteCache);
  Query query=qf.from(User.class).having("name").eq("user1").and().having("age").gt(20).toBuilder().build();
  final BlockingQueue<Integer> joined=new LinkedBlockingQueue<Integer>();
  final BlockingQueue<Integer> left=new LinkedBlockingQueue<Integer>();
  ContinuousQueryListener<Integer,User> listener=new ContinuousQueryListener<Integer,User>(){
    @Override public void resultJoining(    Integer key,    User value){
      joined.add(key);
    }
    @Override public void resultLeaving(    Integer key){
      left.add(key);
    }
  }
;
  ContinuousQuery<Integer,User> continuousQuery=Search.getContinuousQuery(remoteCache);
  continuousQuery.addContinuousQueryListener(query,listener);
  expectElementsInQueue(joined,1);
  expectElementsInQueue(left,0);
  User user4=createUser(4,30);
  user4.setName("user1");
  remoteCache.put(4,user4);
  expectElementsInQueue(joined,1);
  expectElementsInQueue(left,0);
  User user1=remoteCache.get(1);
  user1.setAge(19);
  remoteCache.put(1,user1);
  expectElementsInQueue(joined,0);
  expectElementsInQueue(left,1);
  remoteCache.clear();
  expectElementsInQueue(joined,0);
  expectElementsInQueue(left,1);
  continuousQuery.removeContinuousQueryListener(listener);
  user1.setAge(25);
  remoteCache.put(1,user1);
  expectElementsInQueue(joined,0);
  expectElementsInQueue(left,0);
}
