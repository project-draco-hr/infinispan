{
  ConsistentHash ch=createConsistentHash(numNodes);
  Map<Address,Integer> distribution=new HashMap<Address,Integer>();
  for (  Object key : keys) {
    Address a=ch.locate(key,1).get(0);
    if (distribution.containsKey(a)) {
      int i=distribution.get(a);
      distribution.put(a,i + 1);
    }
 else {
      distribution.put(a,1);
    }
  }
  System.out.printf("\nTesting distribution with %d keys, %d nodes\n",numKeys,numNodes);
  ArrayList<Integer> counts=new ArrayList<Integer>(distribution.values());
  Collections.sort(counts);
  assertEquals(numNodes,counts.size());
  for (int i=0; i < numNodes - counts.size(); i++)   counts.add(0,0);
  double mean=0;
  int sum=0;
  for (  Integer count : counts)   sum+=count;
  assertEquals(sum,numKeys);
  mean=sum / numNodes;
  double variance=0;
  for (  Integer count : counts)   variance+=(count - mean) * (count - mean);
  double stdDev=sqrt(variance);
  double avgAbsDev=0;
  for (  Integer count : counts)   avgAbsDev+=abs(count - mean);
  avgAbsDev/=numNodes;
  int median=counts.get(numNodes / 2);
  ArrayList<Integer> medianDevs=new ArrayList<Integer>(numNodes);
  for (  Integer count : counts)   medianDevs.add(abs(count - median));
  Collections.sort(medianDevs);
  int medianAbsDev=medianDevs.get(numNodes / 2);
  System.out.printf("Mean = %f, median = %d\n",mean,median);
  System.out.printf("Standard deviation = %.3f, or %.3f%%\n",stdDev,stdDev / mean * 100);
  System.out.printf("Average absolute deviation = %.3f, or %.3f%%\n",avgAbsDev,avgAbsDev / mean * 100);
  System.out.printf("Median absolute deviation = %d, or %.3f%%\n",medianAbsDev,(double)medianAbsDev / mean * 100);
}
