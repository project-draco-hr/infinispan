{
  if (hasClusteredMethods) {
    if (config.clustering().cacheMode().isInvalidation()) {
      throw new UnsupportedOperationException("Cluster listeners cannot be used with Invalidation Caches!");
    }
    clusterListenerIDs.put(listener,generatedId);
    EmbeddedCacheManager manager=cache.getCacheManager();
    Address ourAddress=manager.getAddress();
    List<Address> members=manager.getMembers();
    if (members.size() > 1) {
      DistributedExecutionCompletionService decs=new DistributedExecutionCompletionService(distExecutorService);
      log.tracef("Replicating cluster listener to other nodes %s for cluster listener with id %s",members,generatedId);
      Callable callable=new ClusterListenerReplicateCallable(generatedId,ourAddress,filter,converter);
      for (      Address member : members) {
        if (!member.equals(ourAddress)) {
          decs.submit(member,callable);
        }
      }
      for (int i=0; i < members.size() - 1; ++i) {
        try {
          decs.take().get();
        }
 catch (        InterruptedException e) {
          throw new CacheListenerException(e);
        }
catch (        ExecutionException e) {
          throw new CacheListenerException(e);
        }
      }
      int extraCount=0;
      List<Address> membersAfter=manager.getMembers();
      for (      Address member : membersAfter) {
        if (!members.contains(member) && !member.equals(ourAddress)) {
          log.tracef("Found additional node %s that joined during replication of cluster listener with id %s",member,generatedId);
          extraCount++;
          decs.submit(member,callable);
        }
      }
      for (int i=0; i < extraCount; ++i) {
        try {
          decs.take().get();
        }
 catch (        InterruptedException e) {
          throw new CacheListenerException(e);
        }
catch (        ExecutionException e) {
          throw new CacheListenerException(e);
        }
      }
    }
  }
}
