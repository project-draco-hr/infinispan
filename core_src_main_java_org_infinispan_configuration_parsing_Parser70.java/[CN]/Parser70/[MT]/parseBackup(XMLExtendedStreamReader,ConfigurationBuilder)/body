{
  BackupConfigurationBuilder backup=builder.sites().addBackup();
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String value=replaceProperties(reader.getAttributeValue(i));
    Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SITE:
{
        backup.site(value);
        break;
      }
case STRATEGY:
{
      backup.strategy(BackupConfiguration.BackupStrategy.valueOf(value));
      break;
    }
case BACKUP_FAILURE_POLICY:
{
    backup.backupFailurePolicy(BackupFailurePolicy.valueOf(value));
    break;
  }
case TIMEOUT:
{
  backup.replicationTimeout(Long.valueOf(value));
  break;
}
case ENABLED:
{
backup.enabled(Boolean.valueOf(value));
break;
}
case USE_TWO_PHASE_COMMIT:
{
backup.useTwoPhaseCommit(Boolean.parseBoolean(value));
break;
}
case FAILURE_POLICY_CLASS:
{
backup.failurePolicyClass(value);
break;
}
default :
{
throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (backup.site() == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.SITE));
}
while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
Element element=Element.forName(reader.getLocalName());
switch (element) {
case TAKE_OFFLINE:
{
this.parseTakeOffline(reader,backup);
break;
}
default :
{
throw ParseUtils.unexpectedElement(reader);
}
}
}
}
