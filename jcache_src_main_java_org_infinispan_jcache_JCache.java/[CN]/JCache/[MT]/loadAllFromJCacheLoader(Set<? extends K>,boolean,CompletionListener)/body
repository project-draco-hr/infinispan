{
  final List<K> keysToLoad=filterLoadAllKeys(keys,replaceExistingValues,false);
  if (keysToLoad.isEmpty()) {
    listener.onCompletion();
    return;
  }
  try {
    Map<K,V> loaded=loadAllKeys(keysToLoad);
    Iterator<Map.Entry<K,V>> it=loaded.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<K,V> entry=it.next();
      if (entry.getValue() == null)       it.remove();
    }
    AdvancedCache<K,V> skipCacheStoreCache=ignoreReturnValuesCache.withFlags(Flag.SKIP_CACHE_STORE);
    for (    Map.Entry<K,V> entry : loaded.entrySet()) {
      K loadedKey=entry.getKey();
      V loadedValue=entry.getValue();
      put(skipCacheStoreCache,skipCacheLoadCache,loadedKey,loadedValue,false);
    }
    listener.onCompletion();
  }
 catch (  Throwable t) {
    setListenerException(listener,t);
  }
}
