{
  mc.set("key1","value1");
  mc.get("key1");
  assertNotEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"NumberOfEntries")));
  mc.delete("key1");
  assertEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Evictions")));
  assertEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"RemoveMisses")));
  assertNotEquals(0.0,Double.parseDouble(getAttribute(provider,memcachedCacheStatisticsMBean,"ReadWriteRatio")));
  assertNotEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Hits")));
  assertEquals(Boolean.TRUE,Boolean.parseBoolean(getAttribute(provider,memcachedCacheStatisticsMBean,"StatisticsEnabled")));
  sleepForSecs(2);
  assertNotEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"TimeSinceReset")));
  assertNotEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"ElapsedTime")));
  assertEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Misses")));
  assertNotEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"RemoveHits")));
  assertNotEquals(null,getAttribute(provider,memcachedCacheStatisticsMBean,"AverageWriteTime"));
  assertNotEquals(0,Integer.parseInt(getAttribute(provider,memcachedCacheStatisticsMBean,"Stores")));
  assertTrue(1.0 == Double.parseDouble(getAttribute(provider,memcachedCacheStatisticsMBean,"HitRatio")));
  assertNotEquals(null,getAttribute(provider,memcachedCacheStatisticsMBean,"AverageReadTime"));
}
