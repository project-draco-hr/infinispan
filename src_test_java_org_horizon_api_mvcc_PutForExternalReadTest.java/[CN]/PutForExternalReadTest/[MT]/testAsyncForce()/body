{
  Transport mockTransport=createNiceMock(Transport.class);
  RpcManagerImpl rpcManager=(RpcManagerImpl)TestingUtil.extractComponent(cache1,RpcManager.class);
  Transport originalTransport=TestingUtil.extractComponent(cache1,Transport.class);
  try {
    Address mockAddress1=createNiceMock(Address.class);
    Address mockAddress2=createNiceMock(Address.class);
    List<Address> memberList=new ArrayList<Address>(2);
    memberList.add(mockAddress1);
    memberList.add(mockAddress2);
    expect(mockTransport.getMembers()).andReturn(memberList).anyTimes();
    rpcManager.setTransport(mockTransport);
    expect(mockTransport.invokeRemotely((List<Address>)anyObject(),(CacheRpcCommand)anyObject(),eq(ResponseMode.ASYNCHRONOUS),anyLong(),anyBoolean(),(ResponseFilter)isNull(),anyBoolean())).andReturn(null);
    replay(mockAddress1,mockAddress2,mockTransport);
    cache1.putForExternalRead(key,value);
    verify(mockTransport);
  }
  finally {
    if (rpcManager != null)     rpcManager.setTransport(originalTransport);
  }
}
