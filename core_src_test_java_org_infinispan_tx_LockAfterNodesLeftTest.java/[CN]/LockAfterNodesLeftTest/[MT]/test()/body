{
  log.debug("Adding test key");
  cache(0).put("k","v");
  for (int i=0; i < INITIAL_CLUSTER_SIZE; i++) {
    final TransactionTable transactionTable=TestingUtil.getTransactionTable(cache(i));
    eventually(new Condition(){
      @Override public boolean isSatisfied() throws Exception {
        return transactionTable.getLocalTransactions().isEmpty();
      }
    }
);
    eventually(new Condition(){
      @Override public boolean isSatisfied() throws Exception {
        return transactionTable.getRemoteTransactions().isEmpty();
      }
    }
);
  }
  TestingUtil.sleepThread(2000);
  log.debug("Shutting down some nodes ..");
  for (int i=0; i < NUM_NODES_TO_STOP_FOR_TEST; i++) {
    cacheManagers.get(INITIAL_CLUSTER_SIZE - 1 - i).stop();
  }
  log.debug("Shutdown completed");
  final int remainingNodesCount=INITIAL_CLUSTER_SIZE - NUM_NODES_TO_STOP_FOR_TEST;
  TestingUtil.sleepThread(2000);
  final String key="key";
  final AtomicInteger errorCount=new AtomicInteger();
  final AtomicInteger rolledBack=new AtomicInteger();
  final CountDownLatch latch=new CountDownLatch(1);
  Thread[] threads=new Thread[remainingNodesCount];
  for (int i=0; i < remainingNodesCount; i++) {
    final int nodeIndex=i;
    threads[i]=new Thread("LockAfterNodesLeftTest.Putter-" + i){
      public void run(){
        try {
          latch.await();
          log.debug("about to begin transaction...");
          tm(nodeIndex).begin();
          try {
            log.debug("Getting lock on cache key");
            cache(nodeIndex).getAdvancedCache().lock(key);
            log.debug("Got lock");
            cache(nodeIndex).put(key,"value");
            log.debug("Done with put");
            TestingUtil.sleepRandom(200);
            tm(nodeIndex).commit();
          }
 catch (          Throwable e) {
            if (e instanceof RollbackException) {
              rolledBack.incrementAndGet();
            }
 else             if (tm(nodeIndex).getTransaction() != null) {
              try {
                tm(nodeIndex).rollback();
                rolledBack.incrementAndGet();
              }
 catch (              SystemException e1) {
                log.error("Failed to rollback",e1);
              }
            }
            throw e;
          }
        }
 catch (        Throwable e) {
          errorCount.incrementAndGet();
          log.error(e);
        }
      }
    }
;
    threads[i].start();
  }
  latch.countDown();
  for (  Thread t : threads) {
    t.join();
  }
  log.trace("Got errors: " + errorCount.get());
  assertEquals(0,errorCount.get());
}
