{
  assertNotNull(operation);
  assertTrue(operation.replicates());
  takeSiteOffline(LON,NYC);
  assertOffline(LON,NYC);
  assertNoStateTransferInReceivingSite(NYC);
  assertNoStateTransferInSendingSite(LON);
  final Object key=key(0);
  final CheckPoint checkPoint=new CheckPoint();
  operation.init(cache(LON,0),key);
  assertNotNull(operation.initialValue());
  final BackupListener listener=new BackupListener(){
    @Override public void beforeCommand(    VisitableCommand command) throws Exception {
      checkPoint.trigger("before-update");
      if (!performBeforeState && isUpdatingKeyWithValue(command,key,operation.finalValue())) {
        checkPoint.awaitStrict("update-key",30,TimeUnit.SECONDS);
      }
    }
    @Override public void afterCommand(    VisitableCommand command) throws Exception {
      if (performBeforeState && isUpdatingKeyWithValue(command,key,operation.finalValue())) {
        checkPoint.trigger("apply-state");
      }
    }
    @Override public void beforeState(    XSiteStatePushCommand command) throws Exception {
      checkPoint.trigger("before-state");
      checkPoint.awaitStrict("before-update",30,TimeUnit.SECONDS);
      if (performBeforeState && containsKey(command.getChunk(),key)) {
        checkPoint.awaitStrict("apply-state",30,TimeUnit.SECONDS);
      }
    }
    @Override public void afterState(    XSiteStatePushCommand command) throws Exception {
      if (!performBeforeState && containsKey(command.getChunk(),key)) {
        checkPoint.trigger("update-key");
      }
    }
  }
;
  for (  CacheContainer cacheContainer : site(NYC).cacheManagers()) {
    BackupReceiverRepositoryWrapper.replaceInCache(cacheContainer,listener);
  }
  startStateTransfer(LON,NYC);
  assertOnline(LON,NYC);
  checkPoint.awaitStrict("before-state",30,TimeUnit.SECONDS);
  operation.perform(cache(LON,0),key).get();
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      return extractComponent(cache(LON,0),XSiteAdminOperations.class).getRunningStateTransfer().isEmpty();
    }
  }
,TimeUnit.SECONDS.toMillis(30));
  assertEventuallyNoStateTransferInReceivingSite(NYC,30,TimeUnit.SECONDS);
  assertEventuallyNoStateTransferInSendingSite(LON,30,TimeUnit.SECONDS);
  assertInSite(NYC,new AssertCondition<Object,Object>(){
    @Override public void assertInCache(    Cache<Object,Object> cache){
      assertEquals(operation.finalValue(),cache.get(key));
    }
  }
);
  assertInSite(LON,new AssertCondition<Object,Object>(){
    @Override public void assertInCache(    Cache<Object,Object> cache){
      assertEquals(operation.finalValue(),cache.get(key));
    }
  }
);
}
