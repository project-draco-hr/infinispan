{
  final Transaction tx=getOngoingTransaction();
  final NotifyingNotifiableFuture f=new DeferredReturnFuture();
  if (asyncSkipsThread(explicitFlags,key)) {
    return wrapInFuture(get(key,explicitFlags,explicitClassLoader));
  }
 else {
    final EnumSet<Flag> appliedFlags;
    if (explicitFlags == null) {
      appliedFlags=null;
    }
 else {
      appliedFlags=explicitFlags.clone();
      explicitFlags.clear();
    }
    Callable<V> c=new Callable<V>(){
      @Override public V call() throws Exception {
        assertKeyNotNull(key);
        InvocationContext ctx=getInvocationContextForRead(tx,appliedFlags,explicitClassLoader,1);
        GetKeyValueCommand command=commandsFactory.buildGetKeyValueCommand(key,appliedFlags);
        Object ret=invoker.invoke(ctx,command);
        f.notifyDone();
        return (V)ret;
      }
    }
;
    f.setNetworkFuture(asyncExecutor.submit(c));
    return f;
  }
}
