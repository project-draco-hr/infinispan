{
  Transaction ongoingTransaction=null;
  try {
    ongoingTransaction=getOngoingTransaction();
    if (ongoingTransaction != null)     transactionManager.suspend();
    EnumSet<Flag> flags=EnumSet.of(FAIL_SILENTLY,FORCE_ASYNCHRONOUS,ZERO_LOCK_ACQUISITION_TIMEOUT,PUT_FOR_EXTERNAL_READ);
    if (explicitFlags != null && !explicitFlags.isEmpty()) {
      flags.addAll(explicitFlags);
    }
 else {
      PreInvocationContext pic=preInvocationContextHolder.get();
      if (!pic.flags.isEmpty())       flags.addAll(pic.flags);
    }
    putIfAbsent(key,value,defaultLifespan,TimeUnit.MILLISECONDS,defaultMaxIdleTime,TimeUnit.MILLISECONDS,flags,explicitClassLoader);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled())     log.debug("Caught exception while doing putForExternalRead()",e);
  }
 finally {
    try {
      if (ongoingTransaction != null)       transactionManager.resume(ongoingTransaction);
    }
 catch (    Exception e) {
      if (log.isDebugEnabled())       log.debug("Had problems trying to resume a transaction after putForExternalRead()",e);
    }
  }
}
