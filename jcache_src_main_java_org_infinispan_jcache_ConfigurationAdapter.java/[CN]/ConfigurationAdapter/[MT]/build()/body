{
  ConfigurationBuilder cb=new ConfigurationBuilder();
  if (c.isStoreByValue())   cb.storeAsBinary().enable().defensive(true);
switch (c.getTransactionMode()) {
case NONE:
    cb.transaction().transactionMode(TransactionMode.NON_TRANSACTIONAL);
  break;
case LOCAL:
cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);
break;
case XA:
break;
default :
break;
}
switch (c.getTransactionIsolationLevel()) {
case NONE:
cb.locking().isolationLevel(org.infinispan.util.concurrent.IsolationLevel.NONE);
break;
case READ_UNCOMMITTED:
cb.locking().isolationLevel(org.infinispan.util.concurrent.IsolationLevel.READ_UNCOMMITTED);
break;
case READ_COMMITTED:
cb.locking().isolationLevel(org.infinispan.util.concurrent.IsolationLevel.READ_COMMITTED);
break;
case REPEATABLE_READ:
cb.locking().isolationLevel(org.infinispan.util.concurrent.IsolationLevel.REPEATABLE_READ);
break;
case SERIALIZABLE:
cb.locking().isolationLevel(org.infinispan.util.concurrent.IsolationLevel.SERIALIZABLE);
break;
default :
break;
}
CacheLoader<K,? extends V> cacheLoader=c.getCacheLoader();
if (cacheLoader != null) {
cb.loaders().addStore().cacheStore(new JCacheLoaderAdapter());
}
CacheWriter<? super K,? super V> cacheWriter=c.getCacheWriter();
if (cacheWriter != null) {
cb.loaders().addStore().cacheStore(new JCacheWriterAdapter());
}
return cb.build();
}
