{
  Properties properties=new Properties();
  if (configuration.asyncExecutorFactory().factoryClass() != null) {
    properties.setProperty(ConfigurationProperties.ASYNC_EXECUTOR_FACTORY,configuration.asyncExecutorFactory().factoryClass().getName());
  }
  properties.setProperty(ConfigurationProperties.REQUEST_BALANCING_STRATEGY,configuration.balancingStrategy().getName());
  properties.setProperty(ConfigurationProperties.CONNECT_TIMEOUT,Integer.toString(configuration.connectionTimeout()));
  for (int i=1; i <= configuration.consistentHashImpl().length; i++) {
    properties.setProperty(ConfigurationProperties.HASH_FUNCTION_PREFIX + "." + i,configuration.consistentHashImpl()[i - 1].getName());
  }
  properties.setProperty(ConfigurationProperties.FORCE_RETURN_VALUES,Boolean.toString(configuration.forceReturnValues()));
  properties.setProperty(ConfigurationProperties.KEY_SIZE_ESTIMATE,Integer.toString(configuration.keySizeEstimate()));
  properties.setProperty(ConfigurationProperties.MARSHALLER,configuration.marshallerClass().getName());
  properties.setProperty(ConfigurationProperties.PING_ON_STARTUP,Boolean.toString(configuration.pingOnStartup()));
  properties.setProperty(ConfigurationProperties.PROTOCOL_VERSION,configuration.protocolVersion());
  properties.setProperty(ConfigurationProperties.SO_TIMEOUT,Integer.toString(configuration.socketTimeout()));
  properties.setProperty(ConfigurationProperties.TCP_NO_DELAY,Boolean.toString(configuration.tcpNoDelay()));
  properties.setProperty(ConfigurationProperties.TRANSPORT_FACTORY,configuration.transportFactory().getName());
  properties.setProperty(ConfigurationProperties.VALUE_SIZE_ESTIMATE,Integer.toString(configuration.valueSizeEstimate()));
  properties.setProperty("exhaustedAction",Integer.toString(configuration.connectionPool().exhaustedAction().ordinal()));
  properties.setProperty("maxActive",Integer.toString(configuration.connectionPool().maxActive()));
  properties.setProperty("maxTotal",Integer.toString(configuration.connectionPool().maxTotal()));
  properties.setProperty("maxWait",Long.toString(configuration.connectionPool().maxWait()));
  properties.setProperty("maxIdle",Integer.toString(configuration.connectionPool().maxIdle()));
  properties.setProperty("minIdle",Integer.toString(configuration.connectionPool().minIdle()));
  properties.setProperty("numTestsPerEvictionRun",Integer.toString(configuration.connectionPool().numTestsPerEvictionRun()));
  properties.setProperty("minEvictableIdleTimeMillis",Long.toString(configuration.connectionPool().minEvictableIdleTime()));
  properties.setProperty("timeBetweenEvictionRunsMillis",Long.toString(configuration.connectionPool().timeBetweenEvictionRuns()));
  properties.setProperty("lifo",Boolean.toString(configuration.connectionPool().lifo()));
  properties.setProperty("testOnBorrow",Boolean.toString(configuration.connectionPool().testOnBorrow()));
  properties.setProperty("testOnReturn",Boolean.toString(configuration.connectionPool().testOnReturn()));
  properties.setProperty("testWhileIdle",Boolean.toString(configuration.connectionPool().testWhileIdle()));
  StringBuilder servers=new StringBuilder();
  for (  ServerConfiguration server : configuration.servers()) {
    if (servers.length() > 0) {
      servers.append(";");
    }
    servers.append(server.host()).append(":").append(server.port());
  }
  properties.setProperty(ConfigurationProperties.SERVER_LIST,servers.toString());
  return properties;
}
