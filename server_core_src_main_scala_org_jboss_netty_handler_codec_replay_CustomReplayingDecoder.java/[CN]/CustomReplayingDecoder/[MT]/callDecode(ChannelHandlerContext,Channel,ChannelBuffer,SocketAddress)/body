{
  while (cumulation.readable()) {
    int oldReaderIndex=checkpoint=cumulation.readerIndex();
    Object result=null;
    T oldState=state;
    try {
      result=decode(context,channel,replayable,state);
      if (result == null) {
        if (oldReaderIndex == cumulation.readerIndex() && oldState == state) {
          throw new IllegalStateException("null cannot be returned if no data is consumed and state didn't change.");
        }
 else {
          continue;
        }
      }
    }
 catch (    Error replay) {
      if (replayErrorClass.isInstance(replay)) {
        int checkpoint=this.checkpoint;
        if (checkpoint >= 0) {
          cumulation.readerIndex(checkpoint);
        }
 else {
        }
      }
 else {
        throw replay;
      }
    }
    if (result == null) {
      break;
    }
    if (oldReaderIndex == cumulation.readerIndex() && oldState == state) {
      throw new IllegalStateException("decode() method must consume at least one byte " + "if it returned a decoded message (caused by: " + getClass() + ")");
    }
    unfoldAndfireMessageReceived(context,result,remoteAddress);
  }
}
