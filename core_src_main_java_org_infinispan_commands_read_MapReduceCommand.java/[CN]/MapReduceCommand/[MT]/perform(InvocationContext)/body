{
  InvocationContext ctx=getInvocationContext(context);
  boolean noInputKeys=keys == null || keys.isEmpty();
  if (noInputKeys) {
    KeySetCommand keySetCommand=commandsFactory.buildKeySetCommand();
    Set<Object> nodeLocalKeys=(Set<Object>)invoker.invoke(ctx,keySetCommand);
    List<Object> selectedKeys=new ArrayList<Object>();
    for (    Object key : nodeLocalKeys) {
      Address primaryLocation=dm.getPrimaryLocation(key);
      log.tracef("For key %s at %s owner is %s",key,localAddress,primaryLocation);
      if (primaryLocation != null && primaryLocation.equals(localAddress)) {
        selectedKeys.add(key);
      }
    }
    if (keys == null)     keys=new HashSet<Object>();
    keys.addAll(selectedKeys);
  }
  MapReduceTaskLifecycleService taskLifecycleService=MapReduceTaskLifecycleService.getInstance();
  log.tracef("For %s at %s invoking mapper on keys %s",this,localAddress,keys);
  DefaultCollector<Object,Object> collector=new DefaultCollector<Object,Object>();
  try {
    taskLifecycleService.onPreExecute(mapper);
    for (    Object key : keys) {
      GetKeyValueCommand command=commandsFactory.buildGetKeyValueCommand(key,ctx.getFlags());
      command.setReturnCacheEntry(false);
      Object value=invoker.invoke(ctx,command);
      mapper.map(key,value,collector);
    }
  }
  finally {
    taskLifecycleService.onPostExecute(mapper);
  }
  Map<Object,Object> reducedMap=new HashMap<Object,Object>();
  try {
    taskLifecycleService.onPreExecute(reducer);
    Map<Object,List<Object>> collectedValues=collector.collectedValues();
    for (    Entry<Object,List<Object>> e : collectedValues.entrySet()) {
      List<Object> list=e.getValue();
      if (list.size() > 1) {
        Object reduced=reducer.reduce(e.getKey(),list.iterator());
        reducedMap.put(e.getKey(),reduced);
      }
 else {
        reducedMap.put(e.getKey(),list.get(0));
      }
    }
  }
  finally {
    taskLifecycleService.onPostExecute(reducer);
  }
  log.tracef("%s executed at %s was reduced to %s",this,localAddress,reducedMap);
  return reducedMap;
}
