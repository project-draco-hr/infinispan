{
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    String sql=tableManager.getLoadNonExpiredAllRowsSql();
    if (trace) {
      log.tracef("Running sql %s",sql);
    }
    conn=connectionFactory.getConnection();
    ps=conn.prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
    ps.setLong(1,ctx.getTimeService().wallClockTime());
    ps.setFetchSize(tableManager.getFetchSize());
    rs=ps.executeQuery();
    ExecutorAllCompletionService ecs=new ExecutorAllCompletionService(executor);
    final TaskContextImpl taskContext=new TaskContextImpl();
    while (rs.next()) {
      InputStream binaryStream=rs.getBinaryStream(1);
      final Bucket bucket=unmarshallBucket(binaryStream);
      ecs.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          try {
            for (            MarshalledEntry me : bucket.getStoredEntries(filter,ctx.getTimeService()).values()) {
              if (!taskContext.isStopped()) {
                if (!fetchValue || !fetchMetadata) {
                  me=ctx.getMarshalledEntryFactory().newMarshalledEntry(me.getKey(),fetchValue ? me.getValue() : null,fetchMetadata ? me.getMetadata() : null);
                }
                task.processEntry(me,taskContext);
              }
            }
            return null;
          }
 catch (          Exception e) {
            log.errorExecutingParallelStoreTask(e);
            throw e;
          }
        }
      }
);
    }
    ecs.waitUntilAllCompleted();
    if (ecs.isExceptionThrown()) {
      throw new PersistenceException("Execution exception!",ecs.getFirstException());
    }
  }
 catch (  SQLException e) {
    log.sqlFailureFetchingAllStoredEntries(e);
    throw new PersistenceException("SQL error while fetching all StoredEntries",e);
  }
 finally {
    JdbcUtil.safeClose(rs);
    JdbcUtil.safeClose(ps);
    connectionFactory.releaseConnection(conn);
  }
}
