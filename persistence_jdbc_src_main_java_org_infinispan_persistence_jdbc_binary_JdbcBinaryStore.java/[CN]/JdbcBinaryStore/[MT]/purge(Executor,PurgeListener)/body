{
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  Collection<Bucket> expiredBuckets=new ArrayList<Bucket>(BATCH_SIZE);
  ExecutorCompletionService ecs=new ExecutorCompletionService(threadPool);
  BlockingQueue<Bucket> emptyBuckets=new LinkedBlockingQueue<Bucket>();
  int tasksScheduled=0;
  int tasksCompleted=0;
  try {
    String sql=tableManager.getSelectExpiredRowsSql();
    conn=connectionFactory.getConnection();
    ps=conn.prepareStatement(sql);
    ps.setLong(1,ctx.getTimeService().wallClockTime());
    rs=ps.executeQuery();
    while (rs.next()) {
      Integer bucketId=rs.getInt(2);
      if (immediateLockForWriting(bucketId)) {
        if (trace) {
          log.tracef("Adding bucket keyed %s for purging.",bucketId);
        }
        InputStream binaryStream=rs.getBinaryStream(1);
        Bucket bucket=unmarshallBucket(binaryStream);
        bucket.setBucketId(bucketId);
        expiredBuckets.add(bucket);
        if (expiredBuckets.size() == BATCH_SIZE) {
          ++tasksScheduled;
          ecs.submit(new BucketPurger(expiredBuckets,task,ctx.getMarshaller(),conn,emptyBuckets));
          expiredBuckets=new ArrayList<Bucket>(BATCH_SIZE);
        }
      }
 else {
        if (trace) {
          log.tracef("Could not acquire write lock for %s, this won't be purged even though it has expired elements",bucketId);
        }
      }
      tasksCompleted+=unlockCompleted(ecs,false);
    }
    if (!expiredBuckets.isEmpty()) {
      ++tasksScheduled;
      ecs.submit(new BucketPurger(expiredBuckets,task,ctx.getMarshaller(),conn,emptyBuckets));
    }
    try {
      while (tasksCompleted < tasksScheduled) {
        tasksCompleted+=unlockCompleted(ecs,true);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new PersistenceException("Interrupted purging JdbcBinaryStore",e);
    }
    PreparedStatement deletePs=null;
    try {
      deletePs=conn.prepareStatement(tableManager.getDeleteRowSql());
      Bucket bucket;
      while ((bucket=emptyBuckets.poll()) != null) {
        deletePs.setString(1,bucket.getBucketIdAsString());
        deletePs.addBatch();
        unlock(bucket.getBucketId());
      }
      log.tracef("Flushing deletion batch");
      deletePs.executeBatch();
      log.tracef("Flushed deletion batch");
    }
 catch (    Exception ex) {
      log.failedClearingJdbcCacheStore(ex);
    }
 finally {
      JdbcUtil.safeClose(deletePs);
    }
  }
 catch (  Exception ex) {
    log.failedClearingJdbcCacheStore(ex);
    throw new PersistenceException("Failed clearing JdbcBinaryStore",ex);
  }
 finally {
    JdbcUtil.safeClose(ps);
    JdbcUtil.safeClose(rs);
    try {
      while (tasksCompleted < tasksScheduled) {
        tasksCompleted+=unlockCompleted(ecs,true);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new PersistenceException("Interrupted purging JdbcBinaryStore",e);
    }
 finally {
      connectionFactory.releaseConnection(conn);
    }
  }
}
