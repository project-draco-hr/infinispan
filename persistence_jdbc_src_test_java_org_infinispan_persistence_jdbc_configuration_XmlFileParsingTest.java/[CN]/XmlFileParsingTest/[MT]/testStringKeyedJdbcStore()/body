{
  String config=INFINISPAN_START_TAG + "   <cache-container default-cache=\"default\">\n" + "      <local-cache name=\"default\">\n"+ "     <persistence>\n"+ "       <string-keyed-jdbc-store xmlns=\"urn:infinispan:config:store:jdbc:7.0\" key-to-string-mapper=\"DummyKey2StringMapper\" shared=\"true\" "+ "                                preload=\"true\" read-only=\"true\" fetch-state=\"true\" purge=\"true\" singleton=\"false\" dialect=\"H2\">\n"+ "         <connection-pool connection-url=\"jdbc:h2:mem:infinispan;DB_CLOSE_DELAY=-1\" username=\"dbuser\" password=\"dbpass\" driver=\"org.h2.Driver\"/>\n"+ "         <string-keyed-table prefix=\"entry\" fetch-size=\"34\" batch-size=\"128\" >\n"+ "           <id-column name=\"id\" type=\"VARCHAR\" />\n"+ "           <data-column name=\"datum\" type=\"BINARY\" />\n"+ "           <timestamp-column name=\"version\" type=\"BIGINT\" />\n"+ "         </string-keyed-table>\n"+ "         <write-behind />\n"+ "       </string-keyed-jdbc-store>\n"+ "     </persistence>\n"+ "   </local-cache></cache-container>\n"+ TestingUtil.INFINISPAN_END_TAG;
  JdbcStringBasedStoreConfiguration store=(JdbcStringBasedStoreConfiguration)buildCacheManagerWithCacheStore(config);
  assertEquals(128,store.table().batchSize());
  assertEquals(34,store.table().fetchSize());
  assertEquals("BINARY",store.table().dataColumnType());
  assertEquals("version",store.table().timestampColumnName());
  assertTrue(store.async().enabled());
  assertEquals("DummyKey2StringMapper",store.key2StringMapper());
  assertTrue(store.shared());
  assertTrue(store.preload());
  assertEquals(Dialect.H2,store.dialect());
  PooledConnectionFactoryConfiguration connectionFactory=(PooledConnectionFactoryConfiguration)store.connectionFactory();
  assertEquals("jdbc:h2:mem:infinispan;DB_CLOSE_DELAY=-1",connectionFactory.connectionUrl());
  assertEquals("org.h2.Driver",connectionFactory.driverClass());
  assertEquals("dbuser",connectionFactory.username());
  assertEquals("dbpass",connectionFactory.password());
  assertTrue(store.ignoreModifications());
  assertTrue(store.fetchPersistentState());
  assertTrue(store.purgeOnStartup());
  assertFalse(store.singletonStore().enabled());
}
