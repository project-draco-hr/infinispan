{
  stateTransferLock.acquireSharedTopologyLock();
  try {
    if (!isInvalidation && command instanceof WriteCommand) {
      WriteCommand writeCommand=(WriteCommand)command;
      boolean syncRpc=isSync && !command.hasFlag(Flag.FORCE_ASYNCHRONOUS) || command.hasFlag(Flag.FORCE_SYNCHRONOUS);
      if (writeCommand.isSuccessful() && stateConsumer != null && stateConsumer.getCacheTopology() != null) {
        int commandTopologyId=command.getTopologyId();
        int currentTopologyId=stateConsumer.getCacheTopology().getTopologyId();
        if (syncRpc && currentTopologyId != commandTopologyId && commandTopologyId != -1) {
          if (!ctx.isOriginLocal() || !(command instanceof DataCommand) || ctx.hasLockedKey(((DataCommand)command).getKey())) {
            if (trace)             log.tracef("Cache topology changed while the command was executing: expected %d, got %d",commandTopologyId,currentTopologyId);
            writeCommand.setValueMatcher(writeCommand.getValueMatcher().matcherForRetry());
            throw new OutdatedTopologyException("Cache topology changed while the command was executing: expected " + commandTopologyId + ", got "+ currentTopologyId);
          }
        }
      }
    }
    commitContextEntries(ctx,command,metadata);
  }
  finally {
    stateTransferLock.releaseSharedTopologyLock();
  }
}
