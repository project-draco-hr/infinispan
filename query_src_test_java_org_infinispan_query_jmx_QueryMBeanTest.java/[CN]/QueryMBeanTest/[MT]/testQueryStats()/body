{
  cacheManager.getCache(CACHE_NAME);
  ObjectName name=getQueryStatsObjectName(JMX_DOMAIN,CACHE_NAME);
  try {
    assertTrue(server.isRegistered(name));
    if (!(Boolean)server.getAttribute(name,"StatisticsEnabled")) {
      server.setAttribute(name,new Attribute("StatisticsEnabled",true));
    }
    Cache cache=cacheManager.getCache(CACHE_NAME);
    SearchManager searchManager=Search.getSearchManager(cache);
    assertTrue(searchManager.getSearchFactory().getStatistics().isStatisticsEnabled());
    for (int i=0; i < numberOfEntries; i++) {
      Person person=new Person();
      person.setName("key" + i);
      person.setAge(i);
      person.setBlurb("value " + i);
      person.setNonSearchableField("i: " + i);
      cache.put("key" + i,person);
    }
    assertTrue(searchManager.getSearchFactory().getStatistics().isStatisticsEnabled());
    assertEquals(0L,server.getAttribute(name,"SearchQueryExecutionCount"));
    QueryParser queryParser=createQueryParser("blurb");
    Query luceneQuery=queryParser.parse("value");
    CacheQuery cacheQuery=searchManager.getQuery(luceneQuery);
    List<Object> found=cacheQuery.list();
    assertEquals(1L,server.getAttribute(name,"SearchQueryExecutionCount"));
    assertEquals(numberOfEntries,found.size());
    assertEquals(numberOfEntries,server.invoke(name,"getNumberOfIndexedEntities",new Object[]{Person.class.getCanonicalName()},new String[]{String.class.getCanonicalName()}));
    assertEquals(1,searchManager.getSearchFactory().getStatistics().indexedEntitiesCount().size());
    AnotherGrassEater anotherGrassEater=new AnotherGrassEater("Another grass-eater","Eats grass");
    cache.put("key101",anotherGrassEater);
    cacheQuery=searchManager.getQuery(luceneQuery);
    found=cacheQuery.list();
    assertEquals(numberOfEntries,found.size());
    assertEquals(1,server.invoke(name,"getNumberOfIndexedEntities",new Object[]{AnotherGrassEater.class.getCanonicalName()},new String[]{String.class.getCanonicalName()}));
    Set<String> classNames=(Set<String>)server.getAttribute(name,"IndexedClassNames");
    assertEquals(2,classNames.size());
    assertTrue("The set should contain the Person class name.",classNames.contains(Person.class.getCanonicalName()));
    assertTrue("The set should contain the AnotherGrassEater class name.",classNames.contains(AnotherGrassEater.class.getCanonicalName()));
    assertEquals(2,searchManager.getSearchFactory().getStatistics().indexedEntitiesCount().size());
    assertTrue("The query execution total time should be > 0.",(Long)server.getAttribute(name,"SearchQueryTotalTime") > 0);
    assertEquals(2L,server.getAttribute(name,"SearchQueryExecutionCount"));
    assertEquals("blurb:value",server.getAttribute(name,"SearchQueryExecutionMaxTimeQueryString"));
    assertTrue((Long)server.getAttribute(name,"SearchQueryExecutionMaxTime") > 0);
    assertTrue((Long)server.getAttribute(name,"SearchQueryExecutionAvgTime") > 0);
    server.invoke(name,"clear",new Object[]{},new String[]{});
    assertEquals(0L,server.getAttribute(name,"SearchQueryExecutionCount"));
    assertEquals("",server.getAttribute(name,"SearchQueryExecutionMaxTimeQueryString"));
    assertEquals(0L,server.getAttribute(name,"SearchQueryExecutionMaxTime"));
    assertEquals(0L,server.getAttribute(name,"SearchQueryExecutionAvgTime"));
    assertEquals(0L,server.getAttribute(name,"ObjectsLoadedCount"));
    assertEquals(0L,server.getAttribute(name,"ObjectLoadingTotalTime"));
    assertEquals(0L,server.getAttribute(name,"ObjectLoadingExecutionMaxTime"));
    assertEquals(0L,server.getAttribute(name,"ObjectLoadingExecutionAvgTime"));
  }
  finally {
    server.setAttribute(name,new Attribute("StatisticsEnabled",false));
  }
}
