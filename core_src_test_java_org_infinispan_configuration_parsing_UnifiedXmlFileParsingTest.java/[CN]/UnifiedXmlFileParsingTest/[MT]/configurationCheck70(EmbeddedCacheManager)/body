{
  GlobalConfiguration g=cm.getCacheManagerConfiguration();
  assertEquals("maximal",g.globalJmxStatistics().cacheManagerName());
  assertTrue(g.globalJmxStatistics().enabled());
  assertEquals("my-domain",g.globalJmxStatistics().domain());
  assertTrue(g.globalJmxStatistics().mbeanServerLookup() instanceof CustomMBeanServerPropertiesTest.TestLookup);
  assertEquals(1,g.globalJmxStatistics().properties().size());
  assertEquals("value",g.globalJmxStatistics().properties().getProperty("key"));
  assertEquals("maximal-cluster",g.transport().clusterName());
  assertEquals(120000,g.transport().distributedSyncTimeout());
  assertEquals("udp",g.transport().properties().getProperty("stack-udp"));
  assertEquals("tcp",g.transport().properties().getProperty("stack-tcp"));
  assertEquals("jgroups-udp.xml",g.transport().properties().getProperty("stackFilePath-udp"));
  assertEquals("jgroups-tcp.xml",g.transport().properties().getProperty("stackFilePath-tcp"));
  assertEquals("tcp",g.transport().properties().getProperty("stack"));
  DefaultThreadFactory threadFactory;
  BlockingThreadPoolExecutorFactory threadPool;
  threadFactory=cm.getCacheManagerConfiguration().listenerThreadPool().threadFactory();
  assertEquals("infinispan",threadFactory.threadGroup().getName());
  assertEquals("%G %i",threadFactory.threadNamePattern());
  assertEquals(5,threadFactory.initialPriority());
  threadPool=cm.getCacheManagerConfiguration().listenerThreadPool().threadPoolFactory();
  assertEquals(1,threadPool.coreThreads());
  assertEquals(1,threadPool.maxThreads());
  assertEquals(0,threadPool.queueLength());
  assertEquals(0,threadPool.keepAlive());
  assertTrue(cm.getCacheManagerConfiguration().transport().totalOrderThreadPool().threadPoolFactory() instanceof CachedThreadPoolExecutorFactory);
  threadFactory=cm.getCacheManagerConfiguration().transport().totalOrderThreadPool().threadFactory();
  assertEquals("infinispan",threadFactory.threadGroup().getName());
  assertEquals("%G %i",threadFactory.threadNamePattern());
  assertEquals(5,threadFactory.initialPriority());
  assertTrue(cm.getCacheManagerConfiguration().evictionThreadPool().threadPoolFactory() instanceof ScheduledThreadPoolExecutorFactory);
  threadFactory=cm.getCacheManagerConfiguration().evictionThreadPool().threadFactory();
  assertEquals("infinispan",threadFactory.threadGroup().getName());
  assertEquals("%G %i",threadFactory.threadNamePattern());
  assertEquals(5,threadFactory.initialPriority());
  ThreadPoolExecutorFactory threadPoolExecutorFactory=cm.getCacheManagerConfiguration().replicationQueueThreadPool().threadPoolFactory();
  if (threadPoolExecutorFactory != null) {
    assertTrue(threadPoolExecutorFactory instanceof ScheduledThreadPoolExecutorFactory);
    threadFactory=cm.getCacheManagerConfiguration().replicationQueueThreadPool().threadFactory();
    assertEquals("infinispan",threadFactory.threadGroup().getName());
    assertEquals("%G %i",threadFactory.threadNamePattern());
    assertEquals(5,threadFactory.initialPriority());
  }
  threadFactory=cm.getCacheManagerConfiguration().transport().remoteCommandThreadPool().threadFactory();
  assertEquals("infinispan",threadFactory.threadGroup().getName());
  assertEquals("%G %i",threadFactory.threadNamePattern());
  assertEquals(5,threadFactory.initialPriority());
  threadPool=cm.getCacheManagerConfiguration().transport().remoteCommandThreadPool().threadPoolFactory();
  assertEquals(TestCacheManagerFactory.REMOTE_EXEC_MAX_THREADS,threadPool.coreThreads());
  assertEquals(TestCacheManagerFactory.REMOTE_EXEC_MAX_THREADS,threadPool.maxThreads());
  assertEquals(TestCacheManagerFactory.REMOTE_EXEC_QUEUE_SIZE,threadPool.queueLength());
  assertEquals(TestCacheManagerFactory.KEEP_ALIVE,threadPool.keepAlive());
  threadFactory=cm.getCacheManagerConfiguration().transport().transportThreadPool().threadFactory();
  assertEquals("infinispan",threadFactory.threadGroup().getName());
  assertEquals("%G %i",threadFactory.threadNamePattern());
  assertEquals(5,threadFactory.initialPriority());
  threadPool=cm.getCacheManagerConfiguration().transport().transportThreadPool().threadPoolFactory();
  assertEquals(TestCacheManagerFactory.TRANSPORT_EXEC_MAX_THREADS,threadPool.coreThreads());
  assertEquals(TestCacheManagerFactory.TRANSPORT_EXEC_MAX_THREADS,threadPool.maxThreads());
  assertEquals(TestCacheManagerFactory.TRANSPORT_EXEC_QUEUE_SIZE,threadPool.queueLength());
  assertEquals(TestCacheManagerFactory.KEEP_ALIVE,threadPool.keepAlive());
  assertTrue(g.serialization().marshaller() instanceof VersionAwareMarshaller);
  assertEquals(Version.getVersionShort("1.0"),g.serialization().version());
  Map<Integer,AdvancedExternalizer<?>> externalizers=g.serialization().advancedExternalizers();
  AdvancedExternalizer<?> externalizer=externalizers.get(9001);
  assertTrue(externalizer instanceof AdvancedExternalizerTest.IdViaConfigObj.Externalizer);
  externalizer=externalizers.get(9002);
  assertTrue(externalizer instanceof AdvancedExternalizerTest.IdViaAnnotationObj.Externalizer);
  assertEquals(ShutdownHookBehavior.DONT_REGISTER,g.shutdown().hookBehavior());
  Configuration c=cm.getDefaultCacheConfiguration();
  assertFalse(c.invocationBatching().enabled());
  assertTrue(c.jmxStatistics().enabled());
  assertEquals(CacheMode.LOCAL,c.clustering().cacheMode());
  assertEquals(30000,c.locking().lockAcquisitionTimeout());
  assertEquals(2000,c.locking().concurrencyLevel());
  assertEquals(IsolationLevel.NONE,c.locking().isolationLevel());
  assertTrue(c.locking().useLockStriping());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertFalse(c.transaction().useSynchronization());
  assertTrue(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(LockingMode.OPTIMISTIC,c.transaction().lockingMode());
  assertTrue(c.transaction().transactionManagerLookup() instanceof JBossStandaloneJTAManagerLookup);
  assertEquals(60000,c.transaction().cacheStopTimeout());
  assertEquals(20000,c.eviction().maxEntries());
  assertEquals(EvictionStrategy.LIRS,c.eviction().strategy());
  assertEquals(10000,c.expiration().wakeUpInterval());
  assertEquals(10,c.expiration().lifespan());
  assertEquals(10,c.expiration().maxIdle());
  assertFalse(c.persistence().passivation());
  SingleFileStoreConfiguration fileStore=(SingleFileStoreConfiguration)c.persistence().stores().get(0);
  assertFalse(fileStore.fetchPersistentState());
  assertEquals("path",fileStore.location());
  assertFalse(fileStore.singletonStore().enabled());
  assertFalse(fileStore.purgeOnStartup());
  assertTrue(fileStore.preload());
  assertTrue(fileStore.shared());
  assertEquals(2048,fileStore.async().modificationQueueSize());
  assertEquals(1,fileStore.async().threadPoolSize());
  assertEquals(Index.NONE,c.indexing().index());
  c=cm.getCacheConfiguration("invalid");
  assertEquals(CacheMode.INVALIDATION_ASYNC,c.clustering().cacheMode());
  assertTrue(c.invocationBatching().enabled());
  assertTrue(c.jmxStatistics().enabled());
  assertEquals(30500,c.locking().lockAcquisitionTimeout());
  assertEquals(2500,c.locking().concurrencyLevel());
  assertEquals(IsolationLevel.READ_COMMITTED,c.locking().isolationLevel());
  assertTrue(c.locking().useLockStriping());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(LockingMode.OPTIMISTIC,c.transaction().lockingMode());
  assertEquals(60500,c.transaction().cacheStopTimeout());
  assertEquals(20500,c.eviction().size());
  assertEquals(EvictionStrategy.LRU,c.eviction().strategy());
  assertEquals(10500,c.expiration().wakeUpInterval());
  assertEquals(11,c.expiration().lifespan());
  assertEquals(11,c.expiration().maxIdle());
  assertEquals(Index.NONE,c.indexing().index());
  c=cm.getCacheConfiguration("repl");
  assertEquals(CacheMode.REPL_ASYNC,c.clustering().cacheMode());
  assertTrue(c.invocationBatching().enabled());
  assertTrue(c.jmxStatistics().enabled());
  assertEquals(31000,c.locking().lockAcquisitionTimeout());
  assertEquals(3000,c.locking().concurrencyLevel());
  assertEquals(IsolationLevel.REPEATABLE_READ,c.locking().isolationLevel());
  assertTrue(c.locking().useLockStriping());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(LockingMode.PESSIMISTIC,c.transaction().lockingMode());
  assertEquals(61000,c.transaction().cacheStopTimeout());
  assertEquals(21000,c.eviction().maxEntries());
  assertEquals(EvictionStrategy.FIFO,c.eviction().strategy());
  assertEquals(11000,c.expiration().wakeUpInterval());
  assertEquals(12,c.expiration().lifespan());
  assertEquals(12,c.expiration().maxIdle());
  assertFalse(c.clustering().stateTransfer().fetchInMemoryState());
  assertEquals(60000,c.clustering().stateTransfer().timeout());
  assertEquals(10000,c.clustering().stateTransfer().chunkSize());
  ClusterLoaderConfiguration clusterLoader=getStoreConfiguration(c,ClusterLoaderConfiguration.class);
  assertEquals(35000,clusterLoader.remoteCallTimeout());
  assertFalse(clusterLoader.preload());
  assertEquals(Index.NONE,c.indexing().index());
  c=cm.getCacheConfiguration("dist");
  assertEquals(CacheMode.DIST_SYNC,c.clustering().cacheMode());
  assertFalse(c.invocationBatching().enabled());
  assertEquals(1200000,c.clustering().l1().lifespan());
  assertEquals(4,c.clustering().hash().numOwners());
  assertEquals(35000,c.clustering().remoteTimeout());
  assertEquals(2,c.clustering().hash().numSegments());
  assertTrue(c.clustering().hash().consistentHashFactory() instanceof SyncConsistentHashFactory);
  assertTrue(c.clustering().partitionHandling().enabled());
  assertTrue(c.jmxStatistics().enabled());
  assertEquals(31500,c.locking().lockAcquisitionTimeout());
  assertEquals(3500,c.locking().concurrencyLevel());
  assertEquals(IsolationLevel.READ_COMMITTED,c.locking().isolationLevel());
  assertTrue(c.locking().useLockStriping());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertFalse(c.transaction().useSynchronization());
  assertTrue(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(LockingMode.OPTIMISTIC,c.transaction().lockingMode());
  assertEquals(61500,c.transaction().cacheStopTimeout());
  assertEquals(21500,c.eviction().maxEntries());
  assertEquals(EvictionStrategy.UNORDERED,c.eviction().strategy());
  assertEquals(11500,c.expiration().wakeUpInterval());
  assertEquals(13,c.expiration().lifespan());
  assertEquals(13,c.expiration().maxIdle());
  assertTrue(c.clustering().stateTransfer().fetchInMemoryState());
  assertEquals(60500,c.clustering().stateTransfer().timeout());
  assertEquals(10500,c.clustering().stateTransfer().chunkSize());
  BackupConfiguration backup=c.sites().allBackups().get(0);
  assertEquals("NYC",backup.site());
  assertEquals(BackupFailurePolicy.WARN,backup.backupFailurePolicy());
  assertEquals(BackupConfiguration.BackupStrategy.SYNC,backup.strategy());
  assertEquals(12500,backup.replicationTimeout());
  assertFalse(backup.enabled());
  backup=c.sites().allBackups().get(1);
  assertEquals("SFO",backup.site());
  assertEquals(BackupFailurePolicy.IGNORE,backup.backupFailurePolicy());
  assertEquals(BackupConfiguration.BackupStrategy.ASYNC,backup.strategy());
  assertEquals(13000,backup.replicationTimeout());
  assertTrue(backup.enabled());
  backup=c.sites().allBackups().get(2);
  assertEquals("LON",backup.site());
  assertEquals(BackupFailurePolicy.FAIL,backup.backupFailurePolicy());
  assertEquals(BackupConfiguration.BackupStrategy.SYNC,backup.strategy());
  assertEquals(13500,backup.replicationTimeout());
  assertTrue(backup.enabled());
  assertEquals(3,backup.takeOffline().afterFailures());
  assertEquals(10000,backup.takeOffline().minTimeToWait());
  assertEquals("users",c.sites().backupFor().remoteCache());
  assertEquals("LON",c.sites().backupFor().remoteSite());
  c=cm.getCacheConfiguration("capedwarf-data");
  assertEquals(CacheMode.REPL_ASYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  fileStore=getStoreConfiguration(c,SingleFileStoreConfiguration.class);
  assertTrue(fileStore.preload());
  assertFalse(fileStore.purgeOnStartup());
  c=cm.getCacheConfiguration("capedwarf-metadata");
  assertEquals(CacheMode.REPL_ASYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  DummyInMemoryStoreConfiguration dummyStore=getStoreConfiguration(c,DummyInMemoryStoreConfiguration.class);
  assertFalse(dummyStore.preload());
  assertFalse(dummyStore.purgeOnStartup());
  c=cm.getCacheConfiguration("capedwarf-memcache");
  assertEquals(CacheMode.REPL_ASYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  assertEquals(LockingMode.PESSIMISTIC,c.transaction().lockingMode());
  c=cm.getCacheConfiguration("capedwarf-default");
  assertEquals(CacheMode.DIST_ASYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  fileStore=getStoreConfiguration(c,SingleFileStoreConfiguration.class);
  assertTrue(fileStore.preload());
  assertFalse(fileStore.purgeOnStartup());
  assertEquals(Index.NONE,c.indexing().index());
  c=cm.getCacheConfiguration("capedwarf-dist");
  assertEquals(CacheMode.DIST_ASYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  assertEquals(LockingMode.PESSIMISTIC,c.transaction().lockingMode());
  fileStore=getStoreConfiguration(c,SingleFileStoreConfiguration.class);
  assertTrue(fileStore.preload());
  assertFalse(fileStore.purgeOnStartup());
  c=cm.getCacheConfiguration("capedwarf-tasks");
  assertEquals(CacheMode.DIST_ASYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.LIRS,c.eviction().strategy());
  assertEquals(10000,c.eviction().maxEntries());
  fileStore=getStoreConfiguration(c,SingleFileStoreConfiguration.class);
  assertTrue(fileStore.preload());
  assertFalse(fileStore.purgeOnStartup());
  assertEquals(Index.NONE,c.indexing().index());
  c=cm.getCacheConfiguration("HibernateSearch-LuceneIndexesMetadata");
  assertEquals(CacheMode.REPL_SYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.invocationBatching().enabled());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  fileStore=getStoreConfiguration(c,SingleFileStoreConfiguration.class);
  assertTrue(fileStore.preload());
  assertFalse(fileStore.purgeOnStartup());
  c=cm.getCacheConfiguration("HibernateSearch-LuceneIndexesData");
  assertEquals(CacheMode.REPL_SYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.invocationBatching().enabled());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  fileStore=getStoreConfiguration(c,SingleFileStoreConfiguration.class);
  assertTrue(fileStore.preload());
  assertFalse(fileStore.purgeOnStartup());
  c=cm.getCacheConfiguration("HibernateSearch-LuceneIndexesLocking");
  assertEquals(CacheMode.REPL_SYNC,c.clustering().cacheMode());
  assertEquals(TransactionMode.TRANSACTIONAL,c.transaction().transactionMode());
  assertTrue(c.invocationBatching().enabled());
  assertTrue(c.transaction().useSynchronization());
  assertFalse(c.transaction().recovery().enabled());
  assertTrue(c.transaction().syncCommitPhase());
  assertTrue(c.transaction().syncRollbackPhase());
  assertEquals(EvictionStrategy.NONE,c.eviction().strategy());
  assertEquals(-1,c.eviction().maxEntries());
  c=cm.getCacheConfiguration("custom-interceptors");
  List<InterceptorConfiguration> interceptors=c.customInterceptors().interceptors();
  InterceptorConfiguration interceptor=interceptors.get(0);
  assertTrue(interceptor.interceptor() instanceof CustomInterceptor1);
  assertEquals(InvocationContextInterceptor.class,interceptor.after());
  interceptor=interceptors.get(1);
  assertEquals(InvocationContextInterceptor.class,interceptor.before());
  assertTrue(interceptor.interceptor() instanceof CustomInterceptor2);
  interceptor=interceptors.get(2);
  assertTrue(interceptor.interceptor() instanceof CustomInterceptor3);
  assertEquals(1,interceptor.index());
  interceptor=interceptors.get(3);
  assertTrue(interceptor.interceptor() instanceof CustomInterceptor4);
  assertEquals(InterceptorConfiguration.Position.LAST,interceptor.position());
  assertTrue(c.unsafe().unreliableReturnValues());
  c=cm.getCacheConfiguration("write-skew");
  assertTrue(c.locking().writeSkewCheck());
  assertEquals(IsolationLevel.REPEATABLE_READ,c.locking().isolationLevel());
  assertTrue(c.versioning().enabled());
  assertEquals(VersioningScheme.SIMPLE,c.versioning().scheme());
  assertFalse(c.deadlockDetection().enabled());
  c=cm.getCacheConfiguration("compatibility");
  assertTrue(c.compatibility().enabled());
  assertTrue(c.compatibility().marshaller() instanceof GenericJBossMarshaller);
  assertTrue(c.deadlockDetection().enabled());
  assertEquals(200,c.deadlockDetection().spinDuration());
  c=cm.getCacheConfiguration("custom-container");
  assertTrue(c.dataContainer().dataContainer() instanceof QueryableDataContainer);
  assertTrue(c.dataContainer().<byte[]>keyEquivalence() instanceof ByteArrayEquivalence);
  assertTrue(c.dataContainer().<byte[]>valueEquivalence() instanceof ByteArrayEquivalence);
  c=cm.getCacheConfiguration("store-as-binary");
  assertTrue(c.storeAsBinary().enabled());
  assertTrue(c.storeAsBinary().storeKeysAsBinary());
  assertFalse(c.storeAsBinary().storeValuesAsBinary());
}
