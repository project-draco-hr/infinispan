{
  Object k0=new MagicKey(cache(0),cache(1));
  Object k1=new MagicKey(cache(0),cache(1));
  Object k2=new MagicKey(cache(1),cache(2));
  Object k3=new MagicKey(cache(1),cache(2));
  Object k4=new MagicKey(cache(2),cache(3));
  Object k5=new MagicKey(cache(2),cache(3));
  Object k6=new MagicKey(cache(3),cache(0));
  Object k7=new MagicKey(cache(3),cache(0));
  final Object[] allKeys=new Object[]{k0,k1,k2,k3,k4,k5,k6,k7};
  for (  Object k : allKeys)   cache(new Random().nextInt(4)).put(k,k);
  StateSequencer ss=new StateSequencer();
  ss.logicalThread("main","main:st_in_progress","main:2nd_node_left","main:cluster_unavailable");
  cchf.setOwnerIndexes(new int[]{0,1},new int[]{1,2},new int[]{2,1},new int[]{2,0});
  final StateTransferManager stm0=advancedCache(0).getComponentRegistry().getStateTransferManager();
  final int initialTopologyId=stm0.getCacheTopology().getTopologyId();
  StateSequencerUtil.advanceOnInboundRpc(ss,manager(1),new CommandMatcher(){
    @Override public boolean accept(    ReplicableCommand command){
      System.out.println("command = " + command);
      if (!(command instanceof StateResponseCommand))       return false;
      StateResponseCommand responseCommand=(StateResponseCommand)command;
      System.out.println(responseCommand.getTopologyId() + " ==? " + (initialTopologyId + 2));
      return responseCommand.getTopologyId() == initialTopologyId + 2;
    }
  }
).before("main:st_in_progress","main:cluster_unavailable");
  log.trace("Before killing manager3");
  Address missing=address(3);
  crashCacheManagers(manager(3));
  installNewView(advancedCache(0).getRpcManager().getTransport().getMembers(),missing,manager(0),manager(1),manager(2));
  ss.enter("main:2nd_node_left");
  log.trace("Killing 2nd node");
  missing=address(2);
  crashCacheManagers(manager(2));
  installNewView(advancedCache(0).getRpcManager().getTransport().getMembers(),missing,manager(0),manager(1));
  ss.exit("main:2nd_node_left");
  eventually(new Condition(){
    @Override public boolean isSatisfied() throws Exception {
      log.trace("Testing condition");
      for (      Object k : allKeys) {
        try {
          cache(0).get(k);
          return false;
        }
 catch (        AvailabilityException e) {
        }
        try {
          cache(1).put(k,k);
          return false;
        }
 catch (        AvailabilityException e) {
        }
      }
      return true;
    }
  }
);
}
