{
  if (mcc.hasCombiner()) {
    Reducer<KOut,VOut> combiner=mcc.getCombiner();
    Cache<?,?> cache=cacheManager.getCache(mcc.getCacheName());
    log.tracef("For m/r task %s invoking combiner %s at %s",mcc.getTaskId(),mcc,cdl.getAddress());
    MapReduceTaskLifecycleService taskLifecycleService=MapReduceTaskLifecycleService.getInstance();
    long start=log.isTraceEnabled() ? timeService.time() : 0;
    try {
      taskLifecycleService.onPreExecute(combiner,cache);
      for (      Entry<KOut,List<VOut>> e : c.collectedValues().entrySet()) {
        List<VOut> mapped=e.getValue();
        if (mapped.size() > 1) {
          VOut reduced=combiner.reduce(e.getKey(),mapped.iterator());
          c.emitReduced(e.getKey(),reduced);
        }
      }
    }
  finally {
      if (log.isTraceEnabled()) {
        log.tracef("Combine for task %s took %s milliseconds",mcc.getTaskId(),timeService.timeDuration(start,TimeUnit.MILLISECONDS));
      }
      taskLifecycleService.onPostExecute(combiner);
    }
  }
}
