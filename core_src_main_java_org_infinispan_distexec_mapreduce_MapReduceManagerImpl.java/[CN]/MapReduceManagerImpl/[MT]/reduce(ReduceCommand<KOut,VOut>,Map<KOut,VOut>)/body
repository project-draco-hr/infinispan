{
  final Set<KOut> keys=reduceCommand.getKeys();
  final String taskId=reduceCommand.getTaskId();
  boolean noInputKeys=keys == null || keys.isEmpty();
  if (noInputKeys) {
    throw new IllegalStateException("Reduce phase of MapReduceTask " + taskId + " on node "+ cdl.getAddress()+ " executed with empty input keys");
  }
 else {
    final Reducer<KOut,VOut> reducer=reduceCommand.getReducer();
    final boolean useIntermediateKeys=reduceCommand.isEmitCompositeIntermediateKeys();
    MapReduceTaskLifecycleService taskLifecycleService=MapReduceTaskLifecycleService.getInstance();
    log.tracef("For m/r task %s invoking %s at %s",taskId,reduceCommand,cdl.getAddress());
    long start=log.isTraceEnabled() ? timeService.time() : 0;
    try {
      Cache<?,?> cache=cacheManager.getCache(reduceCommand.getCacheName());
      taskLifecycleService.onPreExecute(reducer,cache);
      AdvancedCacheLoader.KeyFilter<?> filter=AdvancedCacheLoader.KeyFilter.LOAD_ALL_FILTER;
      if (useIntermediateKeys) {
        filter=new IntermediateKeyFilter<KOut>(taskId);
      }
      DataContainer dc=cache.getAdvancedCache().getDataContainer();
      dc.executeTask(filter,new DataContainerTask<KOut,List<VOut>>(){
        @Override public void apply(        Object k,        InternalCacheEntry v){
          KOut key=null;
          if (useIntermediateKeys) {
            IntermediateCompositeKey<KOut> intKey=(IntermediateCompositeKey<KOut>)k;
            key=intKey.getKey();
          }
 else {
            key=(KOut)k;
          }
          List<VOut> value=getValue(v);
          if (value == null) {
            throw new IllegalStateException("Found invalid value in intermediate cache, for key " + key + " during reduce phase execution on "+ cacheManager.getAddress()+ " for M/R task "+ taskId);
          }
          VOut reduced=reducer.reduce(key,value.iterator());
          result.put(key,reduced);
          log.tracef("For m/r task %s reduced %s to %s at %s ",taskId,key,reduced,cdl.getAddress());
        }
      }
);
    }
  finally {
      if (log.isTraceEnabled()) {
        log.tracef("Reduce for task %s took %s milliseconds",reduceCommand.getTaskId(),timeService.timeDuration(start,TimeUnit.MILLISECONDS));
      }
      taskLifecycleService.onPostExecute(reducer);
    }
  }
}
