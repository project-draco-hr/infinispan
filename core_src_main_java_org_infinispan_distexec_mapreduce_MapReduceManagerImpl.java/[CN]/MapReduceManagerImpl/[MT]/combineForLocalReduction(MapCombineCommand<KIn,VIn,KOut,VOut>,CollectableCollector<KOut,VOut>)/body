{
  String taskId=mcc.getTaskId();
  Reducer<KOut,VOut> combiner=mcc.getCombiner();
  Map<KOut,List<VOut>> result=null;
  if (combiner != null) {
    result=new HashMap<KOut,List<VOut>>();
    log.tracef("For m/r task %s invoking combiner %s at %s",taskId,mcc,cdl.getAddress());
    MapReduceTaskLifecycleService taskLifecycleService=MapReduceTaskLifecycleService.getInstance();
    long start=log.isTraceEnabled() ? timeService.time() : 0;
    try {
      Cache<?,?> cache=cacheManager.getCache(mcc.getCacheName());
      taskLifecycleService.onPreExecute(combiner,cache);
      Map<KOut,List<VOut>> collectedValues=collector.collectedValues();
      for (      Entry<KOut,List<VOut>> e : collectedValues.entrySet()) {
        VOut combined;
        List<VOut> list=e.getValue();
        List<VOut> l=new LinkedList<VOut>();
        if (list.size() > 1) {
          combined=combiner.reduce(e.getKey(),list.iterator());
        }
 else {
          combined=list.get(0);
        }
        l.add(combined);
        result.put(e.getKey(),l);
        log.tracef("For m/r task %s combined %s to %s at %s",taskId,e.getKey(),combined,cdl.getAddress());
      }
    }
  finally {
      if (log.isTraceEnabled()) {
        log.tracef("Combine for task %s took %s milliseconds",mcc.getTaskId(),timeService.timeDuration(start,TimeUnit.MILLISECONDS));
      }
      taskLifecycleService.onPostExecute(combiner);
    }
  }
 else {
    result=collector.collectedValues();
  }
  return result;
}
