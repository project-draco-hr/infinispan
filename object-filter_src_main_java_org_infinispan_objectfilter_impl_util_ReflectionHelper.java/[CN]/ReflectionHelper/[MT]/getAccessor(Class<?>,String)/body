{
  if (propertyName == null || propertyName.length() == 0) {
    throw new IllegalArgumentException("Property name cannot be null or empty");
  }
  if (propertyName.contains(".")) {
    throw new IllegalArgumentException("The argument cannot be a nested property");
  }
  String propertyNameSuffix=Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
  try {
    Method m=clazz.getDeclaredMethod("get" + propertyNameSuffix);
    if (Modifier.isPublic(m.getModifiers()) && !m.isSynthetic() && !m.isBridge()&& !m.getReturnType().equals(Void.class)) {
      return getMethodAccessor(m);
    }
  }
 catch (  NoSuchMethodException e) {
    try {
      Method m=clazz.getDeclaredMethod("is" + propertyNameSuffix);
      if (Modifier.isPublic(m.getModifiers()) && !m.isSynthetic() && !m.isBridge()&& (m.getReturnType().equals(boolean.class) || m.getReturnType().equals(Boolean.class))) {
        return getMethodAccessor(m);
      }
    }
 catch (    NoSuchMethodException e1) {
    }
  }
  try {
    Field f=clazz.getDeclaredField(propertyName);
    if (f != null && !f.isSynthetic()) {
      return getFieldAccessor(f);
    }
  }
 catch (  NoSuchFieldException e) {
  }
  return null;
}
