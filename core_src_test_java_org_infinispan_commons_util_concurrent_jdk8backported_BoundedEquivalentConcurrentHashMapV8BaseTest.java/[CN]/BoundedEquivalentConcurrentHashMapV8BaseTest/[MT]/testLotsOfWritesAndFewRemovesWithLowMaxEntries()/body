{
  final int WRITE_THREADS=9;
  final int REMOVE_THREADS=2;
  final int INSERTIONCOUNT=2048;
  final int REMOVECOUNT=200;
  ExecutorService execService=Executors.newFixedThreadPool(WRITE_THREADS + REMOVE_THREADS);
  ExecutorCompletionService<Void> service=new ExecutorCompletionService<Void>(execService);
  try {
    final int COUNT=4;
    final Map<HashCodeControlled,HashCodeControlled> bchm=createMap(COUNT,evictionPolicy());
    for (int i=0; i < WRITE_THREADS; ++i) {
      service.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          for (int i=0; i < INSERTIONCOUNT; ++i) {
            HashCodeControlled hcc=new HashCodeControlled(i);
            bchm.put(hcc,hcc);
          }
          return null;
        }
      }
);
    }
    for (int i=0; i < REMOVE_THREADS; ++i) {
      service.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          for (int i=0; i < REMOVECOUNT; ++i) {
            for (            Entry<HashCodeControlled,HashCodeControlled> entry : bchm.entrySet()) {
              HashCodeControlled key=entry.getKey();
              bchm.remove(key);
            }
          }
          return null;
        }
      }
);
    }
    for (int i=0; i < WRITE_THREADS + REMOVE_THREADS; ++i) {
      try {
        Future<Void> future=service.poll(10,TimeUnit.SECONDS);
        if (future == null) {
          throw new TimeoutException();
        }
        future.get();
      }
 catch (      Exception e) {
        throw e;
      }
    }
    int manualCount=0;
    for (    Entry<HashCodeControlled,HashCodeControlled> entry : bchm.entrySet()) {
      if (entry.getValue() != null) {
        manualCount++;
      }
    }
    if (bchm.size() != manualCount) {
      System.currentTimeMillis();
    }
    assertEquals(bchm.size(),manualCount);
    if (manualCount > COUNT) {
      assertFalse("Count " + manualCount + " should not be higher than max "+ COUNT,manualCount > COUNT);
    }
  }
  finally {
    execService.shutdown();
    execService.awaitTermination(1000,TimeUnit.SECONDS);
  }
}
