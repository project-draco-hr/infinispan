{
  final int THREADS=4;
  ExecutorService service=Executors.newFixedThreadPool(THREADS);
  ExecutorCompletionService<Void> completion=new ExecutorCompletionService<Void>(service);
  try {
    final int COUNT=5;
    final Map<String,String> bchm=createMap(COUNT,evictionPolicy());
    final int WRITE_OFFSET=6;
    for (int i=0; i < THREADS / 2; ++i) {
      completion.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          for (int i=0; i < COUNT * WRITE_OFFSET; i++) {
            bchm.put("a" + i,"a" + i);
          }
          return null;
        }
      }
);
      completion.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          for (int i=0; i < COUNT * WRITE_OFFSET; i++) {
            bchm.put("b" + i,"b" + i);
          }
          return null;
        }
      }
);
    }
    for (int i=0; i < THREADS; ++i) {
      Future<Void> future=completion.poll(10,TimeUnit.SECONDS);
      if (future == null) {
        throw new TimeoutException();
      }
      future.get();
    }
    int manualCount=0;
    for (    Entry<String,String> entry : bchm.entrySet()) {
      if (entry.getValue() != null) {
        manualCount++;
      }
    }
    if (COUNT != manualCount) {
      System.currentTimeMillis();
    }
    assertEquals(COUNT,manualCount);
    if (COUNT != bchm.size()) {
      System.currentTimeMillis();
    }
    assertEquals(COUNT,bchm.size());
  }
  finally {
    service.shutdown();
    service.awaitTermination(10,TimeUnit.SECONDS);
  }
}
