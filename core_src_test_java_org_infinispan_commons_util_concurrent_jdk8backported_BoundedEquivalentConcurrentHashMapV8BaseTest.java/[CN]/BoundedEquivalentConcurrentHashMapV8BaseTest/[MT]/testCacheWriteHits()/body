{
  final int COUNT=10000;
  final Map<Integer,Integer> bchm=createMap(COUNT,evictionPolicy());
  for (int i=0; i < COUNT; i++)   bchm.put(i,i);
  final int THREADS=10;
  ExecutorService service=Executors.newFixedThreadPool(THREADS);
  @SuppressWarnings("unchecked") Future<Void>[] futures=new Future[THREADS];
  for (int i=0; i < THREADS; ++i) {
    final int offset=i / 2;
    futures[i]=service.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        for (int i=0; i < COUNT; i++) {
          int keyValue=offset * (COUNT / THREADS) + i;
          if (keyValue >= COUNT) {
            keyValue=keyValue - COUNT;
          }
          bchm.put(keyValue,keyValue);
        }
        return null;
      }
    }
);
  }
  service.shutdown();
  service.awaitTermination(10,TimeUnit.SECONDS);
  for (int i=0; i < THREADS; ++i) {
    futures[i].get(10,TimeUnit.SECONDS);
  }
  if (COUNT != bchm.size()) {
    System.currentTimeMillis();
  }
  assertEquals(COUNT,bchm.size());
  int manualCount=0;
  for (  Entry<Integer,Integer> entry : bchm.entrySet()) {
    if (entry.getValue() != null) {
      manualCount++;
    }
  }
  if (COUNT != manualCount) {
    System.currentTimeMillis();
  }
  assertEquals(COUNT,manualCount);
}
