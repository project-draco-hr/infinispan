{
  final int COUNT_PER_THREAD=10000;
  final int THREADS=10;
  final int COUNT=COUNT_PER_THREAD * THREADS;
  final EvictionListener<Integer,Integer> l=new NullEvictionListener<Integer,Integer>(){
    @Override public void onEntryChosenForEviction(    Entry<Integer,Integer> entry){
      assertEquals(COUNT,entry.getValue().intValue());
    }
  }
;
  final Map<Integer,Integer> bchm=createMap(COUNT + 1,evictionPolicy(),l);
  for (int i=0; i <= COUNT; i++)   bchm.put(i,i);
  Thread threads[]=new Thread[THREADS];
  for (int i=0; i < THREADS; i++) {
    final int start=COUNT_PER_THREAD * i;
    final int end=start + COUNT_PER_THREAD;
    threads[i]=new Thread(){
      public void run(){
        for (int i=start; i < end; i++)         assertNotNull(bchm.get(i));
      }
    }
;
  }
  for (int i=0; i < THREADS; i++)   threads[i].start();
  for (int i=0; i < THREADS; i++)   threads[i].join();
  bchm.put(COUNT + 1,COUNT + 1);
  if (COUNT + 1 != bchm.size()) {
    System.currentTimeMillis();
  }
  assertEquals(COUNT + 1,bchm.size());
  int manualCount=0;
  for (  Entry<Integer,Integer> entry : bchm.entrySet()) {
    if (entry.getValue() != null) {
      manualCount++;
    }
  }
  if (COUNT + 1 != manualCount) {
    System.currentTimeMillis();
  }
  assertEquals(COUNT + 1,manualCount);
}
