{
  this.asyncExecutorFactory.read(template.asyncExecutorFactory());
  this.balancingStrategy=template.balancingStrategy();
  this.connectionPool.read(template.connectionPool());
  this.connectionTimeout=template.connectionTimeout();
  this.forceReturnValues=template.forceReturnValues();
  this.keySizeEstimate=template.keySizeEstimate();
  this.marshaller=template.marshaller();
  this.pingOnStartup=template.pingOnStartup();
  this.protocolVersion=template.protocolVersion();
  this.remoteCacheName=template.remoteCacheName();
  this.socketTimeout=template.socketTimeout();
  this.tcpNoDelay=template.tcpNoDelay();
  this.transportFactory=template.transportFactory();
  this.valueSizeEstimate=template.valueSizeEstimate();
  for (  RemoteServerConfiguration server : template.servers()) {
    this.addServer().host(server.host()).port(server.port());
  }
  fetchPersistentState=template.fetchPersistentState();
  ignoreModifications=template.ignoreModifications();
  properties=template.properties();
  purgeOnStartup=template.purgeOnStartup();
  purgeSynchronously=template.purgeSynchronously();
  async.read(template.async());
  singletonStore.read(template.singletonStore());
  return this;
}
