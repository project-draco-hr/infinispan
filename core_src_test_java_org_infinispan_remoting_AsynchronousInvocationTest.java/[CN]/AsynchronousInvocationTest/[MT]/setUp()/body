{
  executorService=new DummyTaskCountExecutorService();
  final BlockingTaskAwareExecutorService remoteExecutorService=new BlockingTaskAwareExecutorServiceImpl(executorService,TIME_SERVICE);
  ConfigurationBuilder builder=getDefaultCacheConfiguration(false);
  builder.clustering().cacheMode(CacheMode.DIST_SYNC);
  cacheManager=createClusteredCacheManager(builder);
  Cache<Object,Object> cache=cacheManager.getCache();
  String cacheName=cache.getName();
  Transport transport=extractGlobalComponent(cacheManager,Transport.class);
  if (transport instanceof JGroupsTransport) {
    commandAwareRpcDispatcher=((JGroupsTransport)transport).getCommandAwareRpcDispatcher();
    address=((JGroupsTransport)transport).getChannel().getAddress();
    marshaller=commandAwareRpcDispatcher.getMarshaller();
  }
 else {
    Assert.fail("Expected a JGroups Transport");
  }
  ComponentRegistry registry=cache.getAdvancedCache().getComponentRegistry();
  registry.registerComponent(remoteExecutorService,KnownComponentNames.REMOTE_COMMAND_EXECUTOR);
  registry.rewire();
  GlobalComponentRegistry globalRegistry=cache.getCacheManager().getGlobalComponentRegistry();
  globalRegistry.registerComponent(remoteExecutorService,KnownComponentNames.REMOTE_COMMAND_EXECUTOR);
  globalRegistry.rewire();
  commandsFactory=extractCommandsFactory(cache);
  GetKeyValueCommand getKeyValueCommand=new GetKeyValueCommand("key",InfinispanCollections.<Flag>emptySet());
  PutKeyValueCommand putKeyValueCommand=new PutKeyValueCommand("key","value",false,null,new EmbeddedMetadata.Builder().build(),InfinispanCollections.<Flag>emptySet(),AnyEquivalence.getInstance(),null);
  blockingCacheRpcCommand=new ReduceCommand<>("task",null,cacheName,null);
  nonBlockingCacheRpcCommand=new ClusteredGetCommand("key",cacheName,null,false,null,null);
  blockingNonCacheRpcCommand=new CacheTopologyControlCommand(null,CacheTopologyControlCommand.Type.POLICY_GET_STATUS,null,0);
  nonBlockingNonCacheRpcCommand=new ClusteredGetCommand("key",cacheName,null,false,null,AnyEquivalence.STRING);
  blockingSingleRpcCommand=new SingleRpcCommand(cacheName,putKeyValueCommand);
  nonBlockingSingleRpcCommand=new SingleRpcCommand(cacheName,getKeyValueCommand);
  blockingMultipleRpcCommand=new MultipleRpcCommand(Arrays.<ReplicableCommand>asList(putKeyValueCommand,putKeyValueCommand),cacheName);
  blockingMultipleRpcCommand2=new MultipleRpcCommand(Arrays.<ReplicableCommand>asList(putKeyValueCommand,getKeyValueCommand),cacheName);
  nonBlockingMultipleRpcCommand=new MultipleRpcCommand(Arrays.<ReplicableCommand>asList(getKeyValueCommand,getKeyValueCommand),cacheName);
}
