{
  Set<String> fileList=(Set<String>)cache.get(new FileListCacheKey(indexName));
  Assert.assertNotNull(fileList);
  int fileListCacheKeyInstances=0;
  for (  Object key : cache.keySet()) {
    if (key instanceof ChunkCacheKey) {
      ChunkCacheKey existingChunkKey=(ChunkCacheKey)key;
      String filename=existingChunkKey.getFileName();
      Assert.assertEquals(existingChunkKey.getIndexName(),indexName);
      Assert.assertTrue(fileList.contains(filename));
      Object value=cache.get(existingChunkKey);
      Assert.assertNotNull(value);
      Assert.assertTrue(value instanceof byte[]);
      byte[] buffer=(byte[])cache.get(existingChunkKey);
      Assert.assertTrue(buffer.length != 0);
    }
 else     if (key instanceof FileCacheKey) {
      FileCacheKey fileCacheKey=(FileCacheKey)key;
      Assert.assertEquals(fileCacheKey.getIndexName(),indexName);
      Assert.assertFalse(fileCacheKey.isLockKey());
      Assert.assertTrue(fileList.contains(fileCacheKey.getFileName()),fileCacheKey + " should not have existed");
      Object value=cache.get(fileCacheKey);
      Assert.assertNotNull(value);
      Assert.assertTrue(value instanceof FileMetadata);
      FileMetadata metadata=(FileMetadata)value;
      long totalFileSize=metadata.getSize();
      long actualFileSize=deepCountFileSize(fileCacheKey,cache);
      Assert.assertEquals(actualFileSize,totalFileSize);
    }
 else     if (key instanceof FileListCacheKey) {
      fileListCacheKeyInstances++;
      Assert.assertEquals(1,fileListCacheKeyInstances);
    }
 else {
      Assert.fail("an unexpected key was found in the cache having key type " + key.getClass() + " toString:"+ key);
    }
  }
}
