{
  this.logger.debug("Applying configuration overrides to GlobalConfiguration [" + globalConfigurationToOverride + "] ...");
  if (this.exposeGlobalJmxStatistics != null) {
    this.logger.debug("Overriding property [exposeGlobalJmxStatistics] with new value [" + this.exposeGlobalJmxStatistics + "]");
    globalConfigurationToOverride.globalJmxStatistics().enabled(this.exposeGlobalJmxStatistics);
  }
  if (this.mBeanServerProperties != null) {
    this.logger.debug("Overriding property [mBeanServerProperties] with new value [" + this.mBeanServerProperties + "]");
    globalConfigurationToOverride.globalJmxStatistics().withProperties(this.mBeanServerProperties);
  }
  if (this.jmxDomain != null) {
    this.logger.debug("Overriding property [jmxDomain] with new value [" + this.jmxDomain + "]");
    globalConfigurationToOverride.globalJmxStatistics().jmxDomain(this.jmxDomain);
  }
  if (this.mBeanServerLookupClass != null) {
    this.logger.debug("Overriding property [mBeanServerLookupClass] with new value [" + this.mBeanServerLookupClass + "]");
    globalConfigurationToOverride.globalJmxStatistics().mBeanServerLookup(Util.<MBeanServerLookup>getInstance(this.mBeanServerLookupClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.mBeanServerLookup != null) {
    this.logger.debug("Overriding property [mBeanServerLookup] with new value [" + this.mBeanServerLookup + "]");
    globalConfigurationToOverride.globalJmxStatistics().mBeanServerLookup(this.mBeanServerLookup);
  }
  if (this.allowDuplicateDomains != null) {
    this.logger.debug("Overriding property [allowDuplicateDomains] with new value [" + this.allowDuplicateDomains + "]");
    globalConfigurationToOverride.globalJmxStatistics().allowDuplicateDomains(this.allowDuplicateDomains);
  }
  if (this.cacheManagerName != null) {
    this.logger.debug("Overriding property [cacheManagerName] with new value [" + this.cacheManagerName + "]");
    globalConfigurationToOverride.globalJmxStatistics().cacheManagerName(this.cacheManagerName);
  }
  if (this.clusterName != null) {
    this.logger.debug("Overriding property [clusterName] with new value [" + this.clusterName + "]");
    globalConfigurationToOverride.transport().clusterName(this.clusterName);
  }
  if (this.machineId != null) {
    this.logger.debug("Overriding property [machineId] with new value [" + this.machineId + "]");
    globalConfigurationToOverride.transport().machineId(this.machineId);
  }
  if (this.rackId != null) {
    this.logger.debug("Overriding property [rackId] with new value [" + this.rackId + "]");
    globalConfigurationToOverride.transport().rackId(this.rackId);
  }
  if (this.siteId != null) {
    this.logger.debug("Overriding property [siteId] with new value [" + this.siteId + "]");
    globalConfigurationToOverride.transport().siteId(this.siteId);
  }
  if (this.strictPeerToPeer != null) {
    this.logger.debug("Overriding property [strictPeerToPeer] with new value [" + this.strictPeerToPeer + "]");
    globalConfigurationToOverride.transport().strictPeerToPeer(this.strictPeerToPeer);
  }
  if (this.distributedSyncTimeout != null) {
    this.logger.debug("Overriding property [distributedSyncTimeout] with new value [" + this.distributedSyncTimeout + "]");
    globalConfigurationToOverride.transport().distributedSyncTimeout(this.distributedSyncTimeout);
  }
  if (this.transportClass != null) {
    this.logger.debug("Overriding property [transportClass] with new value [" + this.transportClass + "]");
    globalConfigurationToOverride.transport().transport(Util.<Transport>getInstance(this.transportClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.transportNodeName != null) {
    this.logger.debug("Overriding property [transportNodeName] with new value [" + this.transportNodeName + "]");
    globalConfigurationToOverride.transport().nodeName(this.transportNodeName);
  }
  if (this.asyncListenerExecutorFactoryClass != null) {
    this.logger.debug("Overriding property [asyncListenerExecutorFactoryClass] with new value [" + this.asyncListenerExecutorFactoryClass + "]");
    globalConfigurationToOverride.asyncListenerExecutor().factory(Util.<ExecutorFactory>getInstance(this.asyncListenerExecutorFactoryClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.asyncTransportExecutorFactoryClass != null) {
    this.logger.debug("Overriding property [asyncTransportExecutorFactoryClass] with new value [" + this.asyncTransportExecutorFactoryClass + "]");
    globalConfigurationToOverride.asyncTransportExecutor().factory(Util.<ExecutorFactory>getInstance(this.asyncTransportExecutorFactoryClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.remoteCommandsExecutorFactoryClass != null) {
    this.logger.debug("Overriding property [remoteCommandsExecutorFactoryClass] with new value [" + this.remoteCommandsExecutorFactoryClass + "]");
    globalConfigurationToOverride.remoteCommandsExecutor().factory(Util.<ExecutorFactory>getInstance(this.remoteCommandsExecutorFactoryClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.evictionScheduledExecutorFactoryClass != null) {
    this.logger.debug("Overriding property [evictionScheduledExecutorFactoryClass] with new value [" + this.evictionScheduledExecutorFactoryClass + "]");
    globalConfigurationToOverride.evictionScheduledExecutor().factory(Util.<ScheduledExecutorFactory>getInstance(this.evictionScheduledExecutorFactoryClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.replicationQueueScheduledExecutorFactoryClass != null) {
    this.logger.debug("Overriding property [replicationQueueScheduledExecutorFactoryClass] with new value [" + this.replicationQueueScheduledExecutorFactoryClass + "]");
    globalConfigurationToOverride.replicationQueueScheduledExecutor().factory(Util.<ScheduledExecutorFactory>getInstance(this.replicationQueueScheduledExecutorFactoryClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.marshallerClass != null) {
    this.logger.debug("Overriding property [marshallerClass] with new value [" + this.marshallerClass + "]");
    globalConfigurationToOverride.serialization().marshaller(Util.<Marshaller>getInstance(this.marshallerClass,Thread.currentThread().getContextClassLoader()));
  }
  if (this.transportProperties != null) {
    this.logger.debug("Overriding property [transportProperties] with new value [" + this.transportProperties + "]");
    globalConfigurationToOverride.transport().withProperties(this.transportProperties);
  }
  if (this.shutdownHookBehavior != null) {
    this.logger.debug("Overriding property [shutdownHookBehavior] with new value [" + this.shutdownHookBehavior + "]");
    globalConfigurationToOverride.shutdown().hookBehavior(ShutdownHookBehavior.valueOf(this.shutdownHookBehavior));
  }
  if (this.asyncListenerExecutorProperties != null) {
    this.logger.debug("Overriding property [asyncListenerExecutorProperties] with new value [" + this.asyncListenerExecutorProperties + "]");
    globalConfigurationToOverride.asyncListenerExecutor().withProperties(this.asyncListenerExecutorProperties);
  }
  if (this.asyncTransportExecutorProperties != null) {
    this.logger.debug("Overriding property [asyncTransportExecutorProperties] with new value [" + this.asyncTransportExecutorProperties + "]");
    globalConfigurationToOverride.asyncTransportExecutor().withProperties(this.asyncTransportExecutorProperties);
  }
  if (this.remoteCommandsExecutorProperties != null) {
    this.logger.debug("Overriding property [remoteCommandsExecutorProperties] with new value [" + this.remoteCommandsExecutorProperties + "]");
    globalConfigurationToOverride.remoteCommandsExecutor().withProperties(this.remoteCommandsExecutorProperties);
  }
  if (this.evictionScheduledExecutorProperties != null) {
    this.logger.debug("Overriding property [evictionScheduledExecutorProperties] with new value [" + this.evictionScheduledExecutorProperties + "]");
    globalConfigurationToOverride.evictionScheduledExecutor().withProperties(this.evictionScheduledExecutorProperties);
  }
  if (this.replicationQueueScheduledExecutorProperties != null) {
    this.logger.debug("Overriding property [replicationQueueScheduledExecutorProperties] with new value [" + this.replicationQueueScheduledExecutorProperties + "]");
    globalConfigurationToOverride.replicationQueueScheduledExecutor().withProperties(this.replicationQueueScheduledExecutorProperties);
  }
  if (this.marshallVersion != null) {
    this.logger.debug("Overriding property [marshallVersion] with new value [" + this.marshallVersion + "]");
    globalConfigurationToOverride.serialization().version(this.marshallVersion);
  }
  this.logger.debug("Finished applying configuration overrides to GlobalConfiguration [" + globalConfigurationToOverride + "]");
}
