{
  this.classLoader=new WeakReference<ClassLoader>(template.classLoader());
  this.asyncExecutorFactory.read(template.asyncExecutorFactory());
  this.balancingStrategy=template.balancingStrategy();
  this.connectionPool.read(template.connectionPool());
  this.connectionTimeout=template.connectionTimeout();
  for (int i=0; i < consistentHashImpl.length; i++) {
    this.consistentHashImpl[i]=template.consistentHashImpl()[i];
  }
  this.forceReturnValues=template.forceReturnValues();
  this.keySizeEstimate=template.keySizeEstimate();
  this.marshaller=template.marshaller();
  this.marshallerClass=template.marshallerClass();
  this.pingOnStartup=template.pingOnStartup();
  this.protocolVersion=template.protocolVersion();
  this.servers.clear();
  for (  ServerConfiguration server : template.servers()) {
    this.addServer().host(server.host()).port(server.port());
  }
  this.socketTimeout=template.socketTimeout();
  this.security.read(template.security());
  this.tcpNoDelay=template.tcpNoDelay();
  this.tcpKeepAlive=template.tcpKeepAlive();
  this.transportFactory=template.transportFactory();
  this.valueSizeEstimate=template.valueSizeEstimate();
  this.maxRetries=template.maxRetries();
  this.nearCache.read(template.nearCache());
  return this;
}
