{
  latch=new CountDownLatch(1);
  final byte[] keyFirstBytes=new byte[4];
  final Map<String,String> perf=new ConcurrentSkipListMap<String,String>();
  final AtomicBoolean run=new AtomicBoolean(true);
  final int actual_num_loops=warmup ? warmup_num_loops : num_loops;
  Thread getter=new Thread(){
    @Override public void run(){
      ThreadLocalRandom R=ThreadLocalRandom.current();
      waitForStart();
      long start=System.nanoTime();
      int runs=0;
      byte[] captureByte=new byte[1];
      byte[] key=Arrays.copyOf(keyFirstBytes,5);
      while (use_time && run.get() || runs < actual_num_loops) {
        R.nextBytes(captureByte);
        key[4]=captureByte[0];
        dc.get(key);
        runs++;
      }
      perf.put("GET",opsPerMS(System.nanoTime() - start,runs));
    }
  }
;
  Thread putter=new Thread(){
    @Override public void run(){
      ThreadLocalRandom R=ThreadLocalRandom.current();
      waitForStart();
      long start=System.nanoTime();
      int runs=0;
      byte[] captureByte=new byte[1];
      byte[] key=Arrays.copyOf(keyFirstBytes,5);
      byte[] value=new byte[20];
      Metadata metadata=new EmbeddedMetadata.Builder().build();
      while (use_time && run.get() || runs < actual_num_loops) {
        R.nextBytes(captureByte);
        key[4]=captureByte[0];
        R.nextBytes(value);
        dc.put(key,value,metadata);
        runs++;
      }
      perf.put("PUT",opsPerMS(System.nanoTime() - start,runs));
    }
  }
;
  Thread remover=new Thread(){
    @Override public void run(){
      ThreadLocalRandom R=ThreadLocalRandom.current();
      waitForStart();
      long start=System.nanoTime();
      int runs=0;
      byte[] captureByte=new byte[1];
      byte[] key=Arrays.copyOf(keyFirstBytes,5);
      while (use_time && run.get() || runs < actual_num_loops) {
        R.nextBytes(captureByte);
        key[4]=captureByte[0];
        dc.remove(key);
        runs++;
      }
      perf.put("REM",opsPerMS(System.nanoTime() - start,runs));
    }
  }
;
  Thread[] threads={getter,putter,remover};
  for (  Thread t : threads)   t.start();
  latch.countDown();
  Thread.sleep(warmup ? WARMUP_TIME_MILLIS : RUN_TIME_MILLIS);
  run.set(false);
  for (  Thread t : threads)   t.join();
  if (!warmup)   log.warnf("%s: Performance: %s",dc.getClass().getSimpleName(),perf);
}
