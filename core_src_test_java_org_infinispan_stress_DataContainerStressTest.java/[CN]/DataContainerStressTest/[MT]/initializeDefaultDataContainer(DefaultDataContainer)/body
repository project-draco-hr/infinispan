{
  InternalEntryFactoryImpl entryFactory=new InternalEntryFactoryImpl();
  TimeService timeService=new DefaultTimeService();
  entryFactory.injectTimeService(timeService);
  dc.initialize(new EvictionManager(){
    @Override public void onEntryEviction(    Map evicted){
    }
  }
,new PassivationManager(){
    @Override public boolean isEnabled(){
      return false;
    }
    @Override public void passivate(    InternalCacheEntry entry){
    }
    @Override public void passivateAll() throws PersistenceException {
    }
    @Override public long getPassivations(){
      return 0;
    }
    @Override public void resetStatistics(){
    }
    @Override public boolean getStatisticsEnabled(){
      return false;
    }
    @Override public void setStatisticsEnabled(    boolean enabled){
    }
  }
,entryFactory,new ActivationManager(){
    @Override public void onUpdate(    Object key,    boolean newEntry){
    }
    @Override public void onRemove(    Object key,    boolean newEntry){
    }
    @Override public long getActivationCount(){
      return 0;
    }
  }
,null,timeService,null,new ExpirationManager(){
    @Override public void processExpiration(){
    }
    @Override public boolean isEnabled(){
      return false;
    }
    @Override public void handleInMemoryExpiration(    InternalCacheEntry entry,    long currentTime){
    }
    @Override public void handleInStoreExpiration(    Object key){
    }
    @Override public void registerWriteIncoming(    Object key){
    }
    @Override public void unregisterWrite(    Object key){
    }
  }
);
}
