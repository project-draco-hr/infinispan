{
  final Log localLog=getLog();
  boolean isTrace=localLog.isTraceEnabled();
  if (isTrace)   localLog.tracef("Received operation status: %#x",status);
  String msgFromServer;
  try {
switch (status) {
case HotRodConstants.INVALID_MAGIC_OR_MESSAGE_ID_STATUS:
case HotRodConstants.REQUEST_PARSING_ERROR_STATUS:
case HotRodConstants.UNKNOWN_COMMAND_STATUS:
case HotRodConstants.SERVER_ERROR_STATUS:
case HotRodConstants.COMMAND_TIMEOUT_STATUS:
case HotRodConstants.UNKNOWN_VERSION_STATUS:
{
        msgFromServer=transport.readString();
        if (status == HotRodConstants.COMMAND_TIMEOUT_STATUS && isTrace) {
          localLog.tracef("Server-side timeout performing operation: %s",msgFromServer);
        }
 else {
          localLog.errorFromServer(msgFromServer);
        }
        throw new HotRodClientException(msgFromServer,params.messageId,status);
      }
case HotRodConstants.ILLEGAL_LIFECYCLE_STATE:
    msgFromServer=transport.readString();
  throw new RemoteIllegalLifecycleStateException(msgFromServer,params.messageId,status);
case HotRodConstants.NODE_SUSPECTED:
msgFromServer=transport.readString();
if (isTrace) localLog.tracef("A remote node was suspected while executing messageId=%d. " + "Check if retry possible. Message from server: %s",params.messageId,msgFromServer);
throw new RemoteNodeSuspectException(msgFromServer,params.messageId,status);
default :
{
throw new IllegalStateException(String.format("Unknown status: %#04x",status));
}
}
}
  finally {
switch (status) {
case HotRodConstants.INVALID_MAGIC_OR_MESSAGE_ID_STATUS:
case HotRodConstants.REQUEST_PARSING_ERROR_STATUS:
case HotRodConstants.UNKNOWN_COMMAND_STATUS:
case HotRodConstants.UNKNOWN_VERSION_STATUS:
{
transport.invalidate();
}
}
}
}
