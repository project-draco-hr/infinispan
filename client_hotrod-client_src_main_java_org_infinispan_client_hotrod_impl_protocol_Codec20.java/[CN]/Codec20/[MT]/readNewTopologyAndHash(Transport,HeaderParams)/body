{
  final Log localLog=getLog();
  int newTopologyId=transport.readVInt();
  int clusterSize=transport.readVInt();
  SocketAddress[] addresses=new SocketAddress[clusterSize];
  for (int i=0; i < clusterSize; i++) {
    String host=transport.readString();
    int port=transport.readUnsignedShort();
    addresses[i]=new InetSocketAddress(host,port);
  }
  short hashFunctionVersion=transport.readByte();
  int numSegments=transport.readVInt();
  SocketAddress[][] segmentOwners=new SocketAddress[numSegments][];
  if (hashFunctionVersion > 0) {
    for (int i=0; i < numSegments; i++) {
      short numOwners=transport.readByte();
      segmentOwners[i]=new SocketAddress[numOwners];
      for (int j=0; j < numOwners; j++) {
        int memberIndex=transport.readVInt();
        segmentOwners[i][j]=addresses[memberIndex];
      }
    }
  }
  TransportFactory transportFactory=transport.getTransportFactory();
  int currentTopology=transportFactory.getTopologyId(params.cacheName);
  int topologyAge=transportFactory.getTopologyAge();
  if (params.topologyAge == topologyAge && currentTopology != newTopologyId) {
    params.topologyId.set(newTopologyId);
    List<SocketAddress> addressList=Arrays.asList(addresses);
    if (localLog.isInfoEnabled()) {
      localLog.newTopology(transport.getRemoteSocketAddress(),newTopologyId,topologyAge,addresses.length,new HashSet<SocketAddress>(addressList));
    }
    transportFactory.updateServers(addressList,params.cacheName,false);
    if (hashFunctionVersion == 0) {
      if (trace)       localLog.trace("Not using a consistent hash function (hash function version == 0).");
    }
 else {
      if (trace)       localLog.tracef("Updating client hash function with %s number of segments",numSegments);
    }
    transportFactory.updateHashFunction(segmentOwners,numSegments,hashFunctionVersion,params.cacheName,params.topologyId);
  }
 else {
    if (log.isTraceEnabled())     log.tracef("Outdated topology received (topology id = %s, topology age = %s), so ignoring it: %s",newTopologyId,topologyAge,addresses);
  }
}
