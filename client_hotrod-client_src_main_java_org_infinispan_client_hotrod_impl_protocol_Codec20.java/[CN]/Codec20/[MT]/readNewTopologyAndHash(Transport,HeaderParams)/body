{
  final Log localLog=getLog();
  int newTopologyId=transport.readVInt();
  SocketAddress[] addresses=readTopology(transport);
  final short hashFunctionVersion;
  final SocketAddress[][] segmentOwners;
  if (params.clientIntel == ClientIntelligence.HASH_DISTRIBUTION_AWARE.getValue()) {
    hashFunctionVersion=transport.readByte();
    int numSegments=transport.readVInt();
    segmentOwners=new SocketAddress[numSegments][];
    if (hashFunctionVersion > 0) {
      for (int i=0; i < numSegments; i++) {
        short numOwners=transport.readByte();
        segmentOwners[i]=new SocketAddress[numOwners];
        for (int j=0; j < numOwners; j++) {
          int memberIndex=transport.readVInt();
          segmentOwners[i][j]=addresses[memberIndex];
        }
      }
    }
  }
 else {
    hashFunctionVersion=-1;
    segmentOwners=null;
  }
  TransportFactory transportFactory=transport.getTransportFactory();
  int currentTopology=transportFactory.getTopologyId(params.cacheName);
  int topologyAge=transportFactory.getTopologyAge();
  if (params.topologyAge == topologyAge && currentTopology != newTopologyId) {
    params.topologyId.set(newTopologyId);
    List<SocketAddress> addressList=Arrays.asList(addresses);
    if (localLog.isInfoEnabled()) {
      localLog.newTopology(transport.getRemoteSocketAddress(),newTopologyId,topologyAge,addresses.length,new HashSet<>(addressList));
    }
    transportFactory.updateServers(addressList,params.cacheName,false);
    if (hashFunctionVersion >= 0) {
      if (trace) {
        if (hashFunctionVersion == 0)         localLog.trace("Not using a consistent hash function (hash function version == 0).");
 else         localLog.tracef("Updating client hash function with %s number of segments",segmentOwners.length);
      }
      transportFactory.updateHashFunction(segmentOwners,segmentOwners.length,hashFunctionVersion,params.cacheName,params.topologyId);
    }
  }
 else {
    if (trace)     localLog.tracef("Outdated topology received (topology id = %s, topology age = %s), so ignoring it: %s",newTopologyId,topologyAge,Arrays.toString(addresses));
  }
}
