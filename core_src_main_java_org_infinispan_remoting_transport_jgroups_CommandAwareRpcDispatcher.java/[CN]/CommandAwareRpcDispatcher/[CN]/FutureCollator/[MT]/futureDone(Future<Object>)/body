{
  SenderContainer sc=futures.get(objectFuture);
  if (sc.processed) {
    if (trace)     log.tracef("Not processing callback; already processed callback for sender %s",sc.address);
  }
 else {
    sc.processed=true;
    Address sender=sc.address;
    boolean done=false;
    try {
      if (retval == null) {
        Object response=objectFuture.get();
        if (trace)         log.tracef("Received response: %s from %s",response,sender);
        filter.isAcceptable(response,sender);
        if (!filter.needMoreResponses()) {
          retval=new RspList(Collections.singleton(new Rsp(sender,response)));
          done=true;
        }
      }
 else {
        if (trace)         log.tracef("Skipping response from %s since a valid response for this request has already been received",sender);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause instanceof org.jgroups.SuspectedException) {
        return;
      }
 else       if (cause instanceof org.jgroups.TimeoutException) {
        exception=new TimeoutException("Timeout!",e);
      }
 else       if (cause instanceof Exception) {
        exception=(Exception)cause;
      }
 else {
        exception=new CacheException("Caught a throwable",cause);
      }
      if (log.isDebugEnabled())       log.debugf("Caught exception from sender %s: %s",sender,exception);
    }
 finally {
      expectedResponses--;
      if (expectedResponses == 0 || done) {
        this.notify();
      }
    }
  }
}
