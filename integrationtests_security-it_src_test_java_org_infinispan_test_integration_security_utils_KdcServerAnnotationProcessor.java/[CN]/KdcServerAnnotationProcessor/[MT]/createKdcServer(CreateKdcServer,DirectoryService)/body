{
  if (createKdcServer == null) {
    return null;
  }
  KerberosConfig kdcConfig=new KerberosConfig();
  kdcConfig.setServicePrincipal(createKdcServer.kdcPrincipal());
  kdcConfig.setPrimaryRealm(createKdcServer.primaryRealm());
  kdcConfig.setMaximumTicketLifetime(createKdcServer.maxTicketLifetime());
  kdcConfig.setMaximumRenewableLifetime(createKdcServer.maxRenewableLifetime());
  KdcServer kdcServer=new KdcServer(kdcConfig);
  kdcServer.setSearchBaseDn(createKdcServer.searchBaseDn());
  CreateTransport[] transportBuilders=createKdcServer.transports();
  if (transportBuilders == null) {
    int port=0;
    try {
      port=getFreePort();
    }
 catch (    IOException ioe) {
    }
    UdpTransport defaultTransport=new UdpTransport(port);
    kdcServer.addTransports(defaultTransport);
  }
 else   if (transportBuilders.length > 0) {
    for (    CreateTransport transportBuilder : transportBuilders) {
      List<Transport> transports=createTransports(transportBuilder);
      for (      Transport t : transports) {
        kdcServer.addTransports(t);
      }
    }
  }
  CreateChngPwdServer[] createChngPwdServers=createKdcServer.chngPwdServer();
  if (createChngPwdServers.length > 0) {
    CreateChngPwdServer createChngPwdServer=createChngPwdServers[0];
    ChangePasswordConfig config=new ChangePasswordConfig(kdcConfig);
    config.setServicePrincipal(createChngPwdServer.srvPrincipal());
    ChangePasswordServer chngPwdServer=new ChangePasswordServer(config);
    for (    CreateTransport transportBuilder : createChngPwdServer.transports()) {
      List<Transport> transports=createTransports(transportBuilder);
      for (      Transport t : transports) {
        chngPwdServer.addTransports(t);
      }
    }
    chngPwdServer.setDirectoryService(directoryService);
    kdcServer.setChangePwdServer(chngPwdServer);
  }
  kdcServer.setDirectoryService(directoryService);
  try {
    kdcServer.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return kdcServer;
}
