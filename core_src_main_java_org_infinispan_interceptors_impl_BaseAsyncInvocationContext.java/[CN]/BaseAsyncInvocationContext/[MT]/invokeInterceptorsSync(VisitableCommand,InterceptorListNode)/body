{
  InterceptorListNode interceptorNode=firstInterceptorNode;
  AsyncInterceptor interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  CompletableFuture<Void> nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  interceptor=interceptorNode.interceptor;
  interceptorNode=beforeVisit(command,interceptorNode,interceptor);
  nextVisitFuture=interceptor.visitCommand(this,command);
  if (afterVisit(command,nextVisitFuture)) {
    return actionValue;
  }
  if (interceptorNode != null) {
    throw new IllegalStateException("Too many interceptors!");
  }
 else {
    throw new IllegalStateException("CallInterceptor must call shortCircuit");
  }
}
