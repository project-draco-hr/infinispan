{
  AdvancedCache cache1=cache(0,"invalidation").getAdvancedCache();
  AdvancedCache cache2=cache(1,"invalidation").getAdvancedCache();
  RpcManagerImpl rpcManager=(RpcManagerImpl)TestingUtil.extractComponent(cache1,RpcManager.class);
  Transport origTransport=TestingUtil.extractComponent(cache1,Transport.class);
  try {
    Transport mockTransport=createMock(Transport.class);
    rpcManager.setTransport(mockTransport);
    Address addressOne=createNiceMock(Address.class);
    Address addressTwo=createNiceMock(Address.class);
    List<Address> members=new ArrayList<Address>(2);
    members.add(addressOne);
    members.add(addressTwo);
    expect(mockTransport.getMembers()).andReturn(members).anyTimes();
    expect(mockTransport.getAddress()).andReturn(addressOne).anyTimes();
    expect(mockTransport.invokeRemotely((List<Address>)anyObject(),(CacheRpcCommand)anyObject(),eq(isSync ? ResponseMode.SYNCHRONOUS : ResponseMode.ASYNCHRONOUS_WITH_SYNC_MARSHALLING),anyLong(),anyBoolean(),(ResponseFilter)anyObject(),anyBoolean())).andReturn(null).anyTimes();
    replay(mockTransport);
    cache1.put("k","v");
    verify(mockTransport);
  }
  finally {
    if (rpcManager != null)     rpcManager.setTransport(origTransport);
  }
}
