{
  super.start();
  if (configuration.manageConnectionFactory()) {
    ConnectionFactory factory=ConnectionFactory.getConnectionFactory(configuration.connectionFactory().connectionFactoryClass());
    factory.start(configuration.connectionFactory(),factory.getClass().getClassLoader());
    doConnectionFactoryInitialization(factory);
  }
  try {
    Object mapper=Class.forName(configuration.key2StringMapper()).newInstance();
    if (mapper instanceof Key2StringMapper)     key2StringMapper=(Key2StringMapper)mapper;
  }
 catch (  Exception e) {
    log.errorf("Trying to instantiate %s, however it failed due to %s",configuration.key2StringMapper(),e.getClass().getName());
    throw new IllegalStateException("This should not happen.",e);
  }
  if (log.isTraceEnabled()) {
    log.tracef("Using key2StringMapper: %s",key2StringMapper.getClass().getName());
  }
  if (isUsingPreload()) {
    enforceTwoWayMapper("preload");
  }
  if (isDistributed()) {
    enforceTwoWayMapper("distribution/rehashing");
  }
  dmHelper=new DataManipulationHelper(connectionFactory,tableManipulation,marshaller,timeService){
    @Override protected String getLoadAllKeysSql(){
      return tableManipulation.getLoadAllKeysStringSql();
    }
    @Override public void loadAllProcess(    ResultSet rs,    Set<InternalCacheEntry> result) throws SQLException, CacheLoaderException {
      InputStream inputStream=rs.getBinaryStream(1);
      InternalCacheValue icv=(InternalCacheValue)JdbcUtil.unmarshall(getMarshaller(),inputStream);
      String keyStr=rs.getString(2);
      Object key=((TwoWayKey2StringMapper)key2StringMapper).getKeyMapping(keyStr);
      result.add(icv.toInternalCacheEntry(key));
    }
    @Override public void loadAllProcess(    ResultSet rs,    Set<InternalCacheEntry> result,    int maxEntries) throws SQLException, CacheLoaderException {
      loadAllProcess(rs,result);
    }
    @Override public void loadAllKeysProcess(    ResultSet rs,    Set<Object> keys,    Set<Object> keysToExclude) throws SQLException, CacheLoaderException {
      String keyStr=rs.getString(1);
      Object key=((TwoWayKey2StringMapper)key2StringMapper).getKeyMapping(keyStr);
      if (includeKey(key,keysToExclude)) {
        keys.add(key);
      }
    }
    @Override public void toStreamProcess(    ResultSet rs,    InputStream is,    ObjectOutput objectOutput) throws CacheLoaderException, SQLException, IOException {
      InternalCacheValue icv=(InternalCacheValue)JdbcUtil.unmarshall(getMarshaller(),is);
      String key=rs.getString(2);
      marshaller.objectToObjectStream(icv.toInternalCacheEntry(key),objectOutput);
    }
    @Override public boolean fromStreamProcess(    Object objFromStream,    PreparedStatement ps,    ObjectInput objectInput) throws SQLException, CacheLoaderException, InterruptedException {
      if (objFromStream instanceof InternalCacheEntry) {
        InternalCacheEntry se=(InternalCacheEntry)objFromStream;
        ByteBuffer buffer=JdbcUtil.marshall(getMarshaller(),se.toInternalCacheValue());
        ps.setBinaryStream(1,buffer.getStream(),buffer.getLength());
        ps.setLong(2,se.getExpiryTime());
        ps.setString(3,(String)se.getKey());
        return true;
      }
 else {
        return false;
      }
    }
  }
;
}
