{
  List<CacheManager> cacheManagers=new ArrayList<CacheManager>(NODES_NUM);
  List<Cache<String,String>> caches=new ArrayList<Cache<String,String>>();
  List<ConcurrentMap<String,String>> maps=new ArrayList<ConcurrentMap<String,String>>(NODES_NUM * THREAD_PER_NODE);
  for (int nodeNum=0; nodeNum < NODES_NUM; nodeNum++) {
    CacheManager cm=TestCacheManagerFactory.createClusteredCacheManager(cfg);
    cacheManagers.add(cm);
    Cache<String,String> cache=cm.getCache();
    caches.add(cache);
    for (int threadNum=0; threadNum < THREAD_PER_NODE; threadNum++) {
      maps.add(cache);
    }
  }
  TestingUtil.blockUntilViewsReceived(10000,caches);
  try {
    testConcurrentLocking(maps);
  }
  finally {
    for (    CacheManager cm : cacheManagers) {
      try {
        TestingUtil.killCacheManagers(cm);
      }
 catch (      Exception e) {
      }
    }
  }
}
