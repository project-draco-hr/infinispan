{
  asyncExecutor=Executors.newFixedThreadPool(1);
  cacheConfigFile=cfgFileName;
  cacheStatusProgressBar.setVisible(false);
  cacheStatusProgressBar.setEnabled(false);
  configFileName.setText(cacheConfigFile);
  clusterTableModel=new ClusterTableModel();
  clusterTable.setModel(clusterTableModel);
  cachedDataTableModel=new CachedDataTableModel();
  dataTable.setModel(cachedDataTableModel);
  actionButton.setText(startCacheButtonLabel);
  cacheStatus.setText(statusStopped);
  actionButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (actionButton.getText().equals(startCacheButtonLabel)) {
        startCache();
      }
 else       if (actionButton.getText().equals(stopCacheButtonLabel)) {
        stopCache();
      }
    }
  }
);
  goButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      processAction(goButton,true);
      asyncExecutor.execute(new Runnable(){
        public void run(){
          if (putEntryRadioButton.isSelected()) {
            cache.put(keyTextField.getText(),valueTextField.getText(),lifespan(),TimeUnit.MILLISECONDS,maxIdle(),TimeUnit.MILLISECONDS);
          }
 else           if (removeEntryRadioButton.isSelected()) {
            cache.remove(keyTextField.getText());
          }
 else           if (getEntryRadioButton.isSelected()) {
            cache.get(keyTextField.getText());
          }
          dataViewTab.repaint();
          processAction(goButton,false);
          lifespanSpinner.setValue(cache.getCacheConfiguration().expiration().lifespan());
          maxIdleSpinner.setValue(cache.getCacheConfiguration().expiration().maxIdle());
          mainPane.setSelectedIndex(1);
        }
        private long lifespan(){
          try {
            String s=lifespanSpinner.getValue().toString();
            return Long.parseLong(s);
          }
 catch (          Exception e) {
            return cache.getCacheConfiguration().expiration().lifespan();
          }
        }
        private long maxIdle(){
          try {
            String s=maxIdleSpinner.getValue().toString();
            return Long.parseLong(s);
          }
 catch (          Exception e) {
            return cache.getCacheConfiguration().expiration().maxIdle();
          }
        }
      }
);
    }
  }
);
  removeEntryRadioButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      keyTextField.setEnabled(true);
      valueTextField.setEnabled(false);
      lifespanSpinner.setEnabled(false);
      maxIdleSpinner.setEnabled(false);
    }
  }
);
  putEntryRadioButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      keyTextField.setEnabled(true);
      valueTextField.setEnabled(true);
      lifespanSpinner.setEnabled(true);
      maxIdleSpinner.setEnabled(true);
    }
  }
);
  getEntryRadioButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      keyTextField.setEnabled(true);
      valueTextField.setEnabled(false);
      lifespanSpinner.setEnabled(false);
      maxIdleSpinner.setEnabled(false);
    }
  }
);
  generateSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      randomGeneratorButton.setText("Generate " + generateSlider.getValue() + " Random Entries");
    }
  }
);
  randomGeneratorButton.setText("Generate " + generateSlider.getValue() + " Random Entries");
  randomGeneratorButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      processAction(randomGeneratorButton,true);
      asyncExecutor.execute(new Runnable(){
        public void run(){
          int entries=generateSlider.getValue();
          Map<String,String> rand=new HashMap<String,String>();
          while (rand.size() < entries)           rand.put(randomString(),randomString());
          cache.putAll(rand);
          processAction(randomGeneratorButton,false);
          generateSlider.setValue(50);
          mainPane.setSelectedIndex(1);
        }
      }
);
    }
    private String randomString(){
      return Integer.toHexString(r.nextInt(Integer.MAX_VALUE)).toUpperCase();
    }
  }
);
  cacheClearButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      processAction(cacheClearButton,true);
      asyncExecutor.execute(new Runnable(){
        public void run(){
          cache.clear();
          processAction(cacheClearButton,false);
          mainPane.setSelectedIndex(1);
        }
      }
);
    }
  }
);
  refreshButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      processAction(refreshButton,true);
      asyncExecutor.execute(new Runnable(){
        public void run(){
          InfinispanDemo.this.updateCachedDataTable();
          processAction(refreshButton,false);
          mainPane.setSelectedIndex(1);
        }
      }
);
    }
  }
);
}
