{
  moveCacheToState(ComponentStatus.INITIALIZING);
  asyncExecutor.execute(new Runnable(){
    @Override public void run(){
      try {
        URL resource=new FileLookup().lookupFileLocation(cacheConfigFile,getClass().getClassLoader());
        if (resource == null)         resource=new URL(cacheConfigFile);
        if (cacheManager == null) {
          InputStream stream=resource.openStream();
          try {
            cacheManager=new DefaultCacheManager(stream);
          }
  finally {
            Util.close(stream);
          }
        }
        cache=cacheManager.getCache();
        cache.start();
        configFileName.setText(resource.toString());
        configFileName.repaint();
        InputStream is=null;
        try {
          is=resource.openStream();
          configFileContents.setText(readContents(is));
          configFileContents.setEditable(false);
        }
 catch (        Exception e) {
          log.warn("Unable to open config file [" + cacheConfigFile + "] for display",e);
        }
 finally {
          Util.close(is);
        }
        configFileContents.repaint();
        CacheListener cl=new CacheListener();
        cache.addListener(cl);
        EmbeddedCacheManager cacheManager=cache.getCacheManager();
        cacheManager.addListener(cl);
        updateClusterTable(cacheManager.getMembers());
        lifespanSpinner.setValue(cache.getCacheConfiguration().expiration().lifespan());
        maxIdleSpinner.setValue(cache.getCacheConfiguration().expiration().maxIdle());
        cacheContentsSizeLabel.setText("Cache contains " + cache.size() + " entries");
        moveCacheToState(ComponentStatus.RUNNING);
      }
 catch (      Exception e) {
        log.error("Unable to start cache!",e);
        throw new RuntimeException(e);
      }
    }
  }
);
}
