{
  String config=INFINISPAN_START_TAG_NO_SCHEMA + "<default>\n" + "<eviction maxEntries=\"100\"/>"+ "<loaders passivation=\"false\" shared=\"false\" preload=\"true\"> \n"+ "<fileStore maxEntries=\"100\" location=\"other-location\" deprecatedBucketFormat=\"true\"/> \n"+ "</loaders>\n"+ "</default>\n"+ INFINISPAN_END_TAG;
  InputStream is=new ByteArrayInputStream(config.getBytes());
  try {
    withCacheManager(new CacheManagerCallable(TestCacheManagerFactory.fromStream(is)){
      @Override public void call(){
        Cache<Object,Object> cache=cm.getCache();
        cache.put(1,"v1");
        assertEquals("v1",cache.get(1));
        CacheStore store=extractComponent(cache,CacheLoaderManager.class).getCacheStore();
        assertTrue(store instanceof DelegateFileCacheStore);
        FileCacheStoreConfiguration storeConfiguration=null;
        if (store.getConfiguration() instanceof FileCacheStoreConfiguration) {
          storeConfiguration=(FileCacheStoreConfiguration)store.getConfiguration();
        }
 else {
          fail("The Configuration bean for a FileCacheStore has to be an instance of " + "FileCacheStoreConfiguration");
        }
        assertEquals("other-location",storeConfiguration.location());
        assertEquals(100,storeConfiguration.maxEntries());
        assertTrue(storeConfiguration.deprecatedBucketFormat());
      }
    }
);
  }
  finally {
    TestingUtil.recursiveFileRemove("other-location");
  }
}
