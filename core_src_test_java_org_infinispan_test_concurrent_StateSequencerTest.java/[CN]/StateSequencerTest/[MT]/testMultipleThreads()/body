{
  final StateSequencer stateSequencer=new StateSequencer();
  stateSequencer.logicalThread("start","start");
  stateSequencer.logicalThread("t1","t1:s1").order("start","t1:s1");
  stateSequencer.logicalThread("t2","t2:s2").order("start","t2:s2").order("t1:s1","t2:s2");
  stateSequencer.logicalThread("stop","stop").order("t1:s1","stop").order("t2:s2","stop");
  Future<Object> future1=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      stateSequencer.advance("t1:s1",10,SECONDS);
      return null;
    }
  }
);
  final AtomicBoolean t2s2Entered=new AtomicBoolean(false);
  Future<Object> future2=fork(new Callable<Object>(){
    @Override public Object call() throws Exception {
      stateSequencer.enter("t2:s2",10,SECONDS);
      t2s2Entered.set(true);
      stateSequencer.exit("t2:s2");
      return null;
    }
  }
);
  stateSequencer.enter("start",0,SECONDS);
  Thread.sleep(500);
  assertFalse(future1.isDone());
  assertFalse(future2.isDone());
  assertFalse(t2s2Entered.get());
  stateSequencer.exit("start");
  stateSequencer.advance("stop",10,SECONDS);
  future1.get();
  future2.get();
}
