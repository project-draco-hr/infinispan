{
  final int numKeys=5;
  log.infof("Putting %d keys into cache ..",numKeys);
  for (int i=0; i < numKeys; i++) {
    cache(0).put(i,"before_st_" + i);
  }
  log.info("Finished putting keys");
  for (int i=0; i < numKeys; i++) {
    String expected="before_st_" + i;
    assertValue(0,i,expected);
    assertValue(1,i,expected);
  }
  final CountDownLatch applyStateProceedLatch=new CountDownLatch(1);
  final CountDownLatch applyStateStartedLatch=new CountDownLatch(1);
  cacheConfigBuilder.customInterceptors().addInterceptor().before(InvocationContextInterceptor.class).interceptor(new CommandInterceptor(){
    @Override protected Object handleDefault(    InvocationContext ctx,    VisitableCommand cmd) throws Throwable {
      if (cmd instanceof PutKeyValueCommand && ((PutKeyValueCommand)cmd).hasFlag(Flag.PUT_FOR_STATE_TRANSFER)) {
        applyStateStartedLatch.countDown();
        if (!applyStateProceedLatch.await(15,TimeUnit.SECONDS)) {
          throw new TimeoutException();
        }
      }
      return super.handleDefault(ctx,cmd);
    }
  }
);
  log.info("Adding a new node ..");
  addClusterEnabledCacheManager(cacheConfigBuilder);
  log.info("Added a new node");
  DataContainer dc0=advancedCache(0).getDataContainer();
  DataContainer dc1=advancedCache(1).getDataContainer();
  DataContainer dc2=advancedCache(2).getDataContainer();
  if (!applyStateStartedLatch.await(15,TimeUnit.SECONDS)) {
    throw new TimeoutException();
  }
  if (op == Operation.CLEAR) {
    log.info("Clearing cache ..");
    cache(0).clear();
    log.info("Finished clearing cache");
    assertEquals(0,dc0.size());
    assertEquals(0,dc1.size());
  }
 else   if (op == Operation.REMOVE) {
    log.info("Removing all keys one by one ..");
    for (int i=0; i < numKeys; i++) {
      cache(0).remove(i);
    }
    log.info("Finished removing keys");
    assertEquals(0,dc0.size());
    assertEquals(0,dc1.size());
  }
 else   if (op == Operation.PUT || op == Operation.PUT_MAP || op == Operation.REPLACE || op == Operation.PUT_IF_ABSENT) {
    log.info("Updating all keys ..");
    if (op == Operation.PUT) {
      for (int i=0; i < numKeys; i++) {
        cache(0).put(i,"after_st_" + i);
      }
    }
 else     if (op == Operation.PUT_MAP) {
      Map<Integer,String> toPut=new HashMap<Integer,String>();
      for (int i=0; i < numKeys; i++) {
        toPut.put(i,"after_st_" + i);
      }
      cache(0).putAll(toPut);
    }
 else     if (op == Operation.REPLACE) {
      for (int i=0; i < numKeys; i++) {
        String expectedOldValue="before_st_" + i;
        boolean replaced=cache(0).replace(i,expectedOldValue,"after_st_" + i);
        assertTrue(replaced);
      }
    }
 else {
      for (int i=0; i < numKeys; i++) {
        String expectedOldValue="before_st_" + i;
        Object prevValue=cache(0).putIfAbsent(i,"after_st_" + i);
        assertEquals(expectedOldValue,prevValue);
      }
    }
    log.info("Finished updating keys");
  }
  applyStateProceedLatch.countDown();
  TestingUtil.waitForRehashToComplete(cache(0),cache(1),cache(2));
  log.infof("Data container of NodeA has %d keys: %s",dc0.size(),dc0.keySet());
  log.infof("Data container of NodeB has %d keys: %s",dc1.size(),dc1.keySet());
  log.infof("Data container of NodeC has %d keys: %s",dc2.size(),dc2.keySet());
  if (op == Operation.CLEAR || op == Operation.REMOVE) {
    for (int i=0; i < numKeys; i++) {
      assertNull(dc0.get(i));
      assertNull(dc1.get(i));
      assertNull(dc2.get(i));
    }
  }
 else   if (op == Operation.PUT || op == Operation.PUT_MAP || op == Operation.REPLACE) {
    for (int i=0; i < numKeys; i++) {
      String expectedValue="after_st_" + i;
      assertValue(0,i,expectedValue);
      assertValue(1,i,expectedValue);
      assertValue(2,i,expectedValue);
    }
  }
 else {
    for (int i=0; i < numKeys; i++) {
      String expectedValue="before_st_" + i;
      assertValue(0,i,expectedValue);
      assertValue(1,i,expectedValue);
      assertValue(2,i,expectedValue);
    }
  }
}
