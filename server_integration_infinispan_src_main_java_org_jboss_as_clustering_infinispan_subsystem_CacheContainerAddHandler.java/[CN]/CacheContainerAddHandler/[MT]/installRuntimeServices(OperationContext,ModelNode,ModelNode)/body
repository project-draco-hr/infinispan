{
  String name=context.getCurrentAddressValue();
  ServiceTarget target=context.getServiceTarget();
  String defaultCache=ModelNodes.asString(CacheContainerResource.DEFAULT_CACHE.resolveModelAttribute(context,model));
  String jndiName=ModelNodes.asString(CacheContainerResource.JNDI_NAME.resolveModelAttribute(context,model));
  ModuleIdentifier module=ModelNodes.asModuleIdentifier(CacheContainerResource.CACHE_CONTAINER_MODULE.resolveModelAttribute(context,model));
  CacheContainerConfigurationBuilder configBuilder=new CacheContainerConfigurationBuilder(name).setModule(module).setStatisticsEnabled(CacheContainerResource.STATISTICS.resolveModelAttribute(context,model).asBoolean());
  if (model.hasDefined(TransportResource.TRANSPORT_PATH.getKey())) {
    ModelNode transport=model.get(TransportResource.TRANSPORT_PATH.getKeyValuePair());
    String channel=ModelNodes.asString(TransportResource.CHANNEL.resolveModelAttribute(context,transport),ChannelServiceNameFactory.DEFAULT_CHANNEL);
    configBuilder.setTransport().setLockTimeout(TransportResource.LOCK_TIMEOUT.resolveModelAttribute(context,transport).asLong(),TimeUnit.MILLISECONDS).setStrictPeerToPeer(TransportResource.STRICT_PEER_TO_PEER.resolveModelAttribute(context,transport).asBoolean()).build(target).install();
    if (!name.equals(channel)) {
      new BinderServiceBuilder<>(JGroupsBindingFactory.createChannelBinding(name),ChannelServiceName.CHANNEL.getServiceName(name),Channel.class).build(target).install();
      new ChannelBuilder(name).build(target).install();
      new ChannelConnectorBuilder(name).build(target).install();
      new AliasServiceBuilder<>(ChannelServiceName.FACTORY.getServiceName(name),ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(channel),ChannelFactory.class).build(target).install();
    }
  }
  AuthorizationConfigurationBuilder authorizationConfig=null;
  if (model.hasDefined(ModelKeys.SECURITY) && model.get(ModelKeys.SECURITY).hasDefined(ModelKeys.SECURITY_NAME)) {
    ModelNode securityModel=model.get(ModelKeys.SECURITY,ModelKeys.SECURITY_NAME);
    if (securityModel.hasDefined(ModelKeys.AUTHORIZATION) && securityModel.get(ModelKeys.AUTHORIZATION).hasDefined(ModelKeys.AUTHORIZATION_NAME)) {
      ModelNode authzModel=securityModel.get(ModelKeys.AUTHORIZATION,ModelKeys.AUTHORIZATION_NAME);
      authorizationConfig=configBuilder.setAuthorization();
      authorizationConfig.setPrincipalMapper(ModelNodes.asString(CacheContainerAuthorizationResource.MAPPER.resolveModelAttribute(context,authzModel)));
      for (      ModelNode roleNode : authzModel.get(ModelKeys.ROLE).asList()) {
        ModelNode role=roleNode.get(0);
        String roleName=AuthorizationRoleResource.NAME.resolveModelAttribute(context,role).asString();
        List<String> permissions=new ArrayList<>();
        for (        ModelNode permission : AuthorizationRoleResource.PERMISSIONS.resolveModelAttribute(context,role).asList()) {
          permissions.add(permission.asString());
        }
        authorizationConfig.getRoles().put(roleName,permissions);
      }
    }
  }
  configBuilder.build(target).install();
  CacheContainerBuilder containerBuilder=new CacheContainerBuilder(name,defaultCache);
  if (model.hasDefined(CacheContainerResource.ALIASES.getName())) {
    for (    ModelNode alias : operation.get(CacheContainerResource.ALIASES.getName()).asList()) {
      containerBuilder.addAlias(alias.asString());
    }
  }
  containerBuilder.build(target).install();
  ContextNames.BindInfo binding=InfinispanBindingFactory.createCacheContainerBinding(name);
  BinderServiceBuilder<CacheContainer> bindingBuilder=new BinderServiceBuilder<>(binding,CacheContainerServiceName.CACHE_CONTAINER.getServiceName(name),CacheContainer.class);
  if (jndiName != null) {
    bindingBuilder.alias(ContextNames.bindInfoFor(JndiNameFactory.parse(jndiName).getAbsoluteName()));
  }
  bindingBuilder.build(target).install();
  if ((defaultCache != null) && !defaultCache.equals(CacheServiceNameFactory.DEFAULT_CACHE)) {
    for (    CacheServiceNameFactory nameFactory : CacheServiceName.values()) {
      new AliasServiceBuilder<>(nameFactory.getServiceName(name),nameFactory.getServiceName(name,defaultCache),Object.class).build(target).install();
    }
    new BinderServiceBuilder<>(InfinispanBindingFactory.createCacheBinding(name,CacheServiceNameFactory.DEFAULT_CACHE),CacheServiceName.CACHE.getServiceName(name),Cache.class).build(target).install();
  }
}
