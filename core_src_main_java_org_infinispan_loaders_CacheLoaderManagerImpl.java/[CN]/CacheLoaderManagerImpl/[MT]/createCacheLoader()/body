{
  CacheLoader tmpLoader;
  if (clmConfig.usingChainingCacheLoader()) {
    ChainingCacheStore ccl=new ChainingCacheStore();
    tmpLoader=ccl;
    int numLoadersWithFetchPersistentState=0;
    for (    CacheLoaderConfig cfg : clmConfig.getCacheLoaderConfigs()) {
      if (cfg instanceof CacheStoreConfig) {
        if (((CacheStoreConfig)cfg).isFetchPersistentState())         numLoadersWithFetchPersistentState++;
        if (numLoadersWithFetchPersistentState > 1)         throw new Exception("Invalid cache loader configuration!!  Only ONE cache loader may have fetchPersistentState set to true.  Cache will not start!");
        assertNotSingletonAndShared(((CacheStoreConfig)cfg));
      }
      CacheLoader l=createCacheLoader(cfg,cache);
      ccl.addCacheLoader(l,cfg);
    }
  }
 else {
    CacheLoaderConfig cfg=clmConfig.getFirstCacheLoaderConfig();
    if (cfg != null) {
      tmpLoader=createCacheLoader(cfg,cache);
      if (cfg instanceof CacheStoreConfig)       assertNotSingletonAndShared(((CacheStoreConfig)cfg));
    }
 else {
      return null;
    }
  }
  ReflectionUtil.setValue(clmConfig,"accessible",true);
  return tmpLoader;
}
