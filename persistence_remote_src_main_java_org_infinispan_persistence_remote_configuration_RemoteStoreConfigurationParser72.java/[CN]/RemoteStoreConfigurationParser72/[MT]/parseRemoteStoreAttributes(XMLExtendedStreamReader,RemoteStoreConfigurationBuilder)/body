{
  for (int i=0; i < reader.getAttributeCount(); i++) {
    ParseUtils.requireNoNamespaceAttribute(reader,i);
    String value=replaceProperties(reader.getAttributeValue(i));
    String attrName=reader.getAttributeLocalName(i);
    Attribute attribute=Attribute.forName(attrName);
switch (attribute) {
case BALANCING_STRATEGY:
{
        builder.balancingStrategy(value);
        break;
      }
case CONNECT_TIMEOUT:
{
      builder.connectionTimeout(Long.parseLong(value));
      break;
    }
case FORCE_RETURN_VALUES:
{
    builder.forceReturnValues(Boolean.parseBoolean(value));
    break;
  }
case HOTROD_WRAPPING:
{
  builder.hotRodWrapping(Boolean.parseBoolean(value));
  break;
}
case KEY_SIZE_ESTIMATE:
{
builder.keySizeEstimate(Integer.parseInt(value));
break;
}
case MARSHALLER:
{
builder.marshaller(value);
break;
}
case PING_ON_STARTUP:
{
builder.pingOnStartup(Boolean.parseBoolean(value));
break;
}
case PROTOCOL_VERSION:
{
builder.protocolVersion(value);
break;
}
case RAW_VALUES:
{
builder.rawValues(Boolean.parseBoolean(value));
break;
}
case REMOTE_CACHE_NAME:
{
builder.remoteCacheName(value);
break;
}
case SOCKET_TIMEOUT:
{
builder.socketTimeout(Long.parseLong(value));
break;
}
case TCP_NO_DELAY:
{
builder.tcpNoDelay(Boolean.parseBoolean(value));
break;
}
case TRANSPORT_FACTORY:
{
builder.transportFactory(value);
break;
}
case VALUE_SIZE_ESTIMATE:
{
builder.valueSizeEstimate(Integer.parseInt(value));
break;
}
default :
{
Parser72.parseStoreAttribute(reader,i,builder);
break;
}
}
}
}
