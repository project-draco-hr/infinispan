{
  ScriptMetadata.Builder metadataBuilder=new ScriptMetadata.Builder();
  metadataBuilder.name(name);
  metadataBuilder.mode(ExecutionMode.LOCAL);
  int s=name.lastIndexOf(".") + 1;
  if (s == 0 || s == name.length())   metadataBuilder.extension(DEFAULT_SCRIPT_EXTENSION);
 else   metadataBuilder.extension(name.substring(s));
  try (BufferedReader r=new BufferedReader(new StringReader(script))){
    for (String line=r.readLine(); line != null; line=r.readLine()) {
      Matcher matcher=METADATA_COMMENT.matcher(line);
      if (!matcher.matches())       break;
      String text=matcher.group(1);
      matcher=METADATA_KV.matcher(text);
      while (matcher.find()) {
        String key=matcher.group(1).toLowerCase();
        String value=unquote(matcher.group(2));
switch (key) {
case "name":
          metadataBuilder.name(value);
        break;
case "extension":
      metadataBuilder.extension(value);
    break;
case "language":
  metadataBuilder.language(value);
break;
case "mode":
metadataBuilder.mode(ExecutionMode.valueOf(value.toUpperCase()));
break;
case "parameters":
metadataBuilder.parameters(unarray(value));
break;
case "role":
metadataBuilder.role(value);
break;
case "reducer":
metadataBuilder.reducer(value);
break;
case "combiner":
metadataBuilder.combiner(value);
break;
case "collator":
metadataBuilder.collator(value);
break;
default :
throw log.unknownScriptProperty(key);
}
}
}
}
 catch (IOException e) {
}
return metadataBuilder.build();
}
