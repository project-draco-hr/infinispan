{
  if (cache != null)   cache.clear();
  final String filename="chunkTest";
  IndexOutput indexOutput=dir.createOutput(filename);
  byte[] toWrite=fillBytes(writeSize);
  indexOutput.writeBytes(toWrite,writeSize);
  indexOutput.close();
  if (cache != null) {
    Assert.assertEquals(writeSize,DirectoryIntegrityCheck.deepCountFileSize(new FileCacheKey(INDEXNAME,filename),cache));
  }
  Assert.assertEquals(writeSize,indexOutput.length());
  byte[] results=new byte[readSize];
  IndexInput openInput=dir.openInput(filename);
  try {
    openInput.readBytes(results,0,readSize);
    for (int i=0; i < writeSize && i < readSize; i++) {
      Assert.assertEquals(results[i],toWrite[i]);
    }
    if (readSize > writeSize)     Assert.fail("should have thrown an IOException for reading past EOF");
  }
 catch (  IOException ioe) {
    if (readSize <= writeSize)     Assert.fail("should not have thrown an IOException" + ioe.getMessage());
  }
}
