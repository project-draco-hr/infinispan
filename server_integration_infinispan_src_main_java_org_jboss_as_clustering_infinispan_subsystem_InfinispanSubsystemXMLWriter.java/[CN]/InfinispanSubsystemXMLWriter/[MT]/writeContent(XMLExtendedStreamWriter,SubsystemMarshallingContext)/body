{
  context.startSubsystemElement(Namespace.CURRENT.getUri(),false);
  ModelNode model=context.getModelNode();
  if (model.isDefined()) {
    for (    Property entry : model.get(ModelKeys.CACHE_CONTAINER).asPropertyList()) {
      String containerName=entry.getName();
      ModelNode container=entry.getValue();
      writer.writeStartElement(Element.CACHE_CONTAINER.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),containerName);
      this.writeListAsAttribute(writer,Attribute.ALIASES,container,ModelKeys.ALIASES);
      this.writeOptional(writer,Attribute.DEFAULT_CACHE,container,ModelKeys.DEFAULT_CACHE);
      this.writeOptional(writer,Attribute.EVICTION_EXECUTOR,container,ModelKeys.EVICTION_EXECUTOR);
      this.writeOptional(writer,Attribute.JNDI_NAME,container,ModelKeys.JNDI_NAME);
      this.writeOptional(writer,Attribute.LISTENER_EXECUTOR,container,ModelKeys.LISTENER_EXECUTOR);
      this.writeOptional(writer,Attribute.REPLICATION_QUEUE_EXECUTOR,container,ModelKeys.REPLICATION_QUEUE_EXECUTOR);
      this.writeOptional(writer,Attribute.START,container,ModelKeys.START);
      this.writeOptional(writer,Attribute.MODULE,container,ModelKeys.MODULE);
      this.writeOptional(writer,Attribute.STATISTICS,container,ModelKeys.STATISTICS);
      if (container.hasDefined(ModelKeys.TRANSPORT)) {
        writer.writeStartElement(Element.TRANSPORT.getLocalName());
        ModelNode transport=container.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
        this.writeOptional(writer,Attribute.STACK,transport,ModelKeys.STACK);
        this.writeOptional(writer,Attribute.CLUSTER,transport,ModelKeys.CLUSTER);
        this.writeOptional(writer,Attribute.EXECUTOR,transport,ModelKeys.EXECUTOR);
        this.writeOptional(writer,Attribute.LOCK_TIMEOUT,transport,ModelKeys.LOCK_TIMEOUT);
        this.writeOptional(writer,Attribute.STRICT_PEER_TO_PEER,transport,ModelKeys.STRICT_PEER_TO_PEER);
        writer.writeEndElement();
      }
      if (container.hasDefined(ModelKeys.SECURITY)) {
        writer.writeStartElement(Element.SECURITY.getLocalName());
        ModelNode security=container.get(ModelKeys.SECURITY,ModelKeys.SECURITY_NAME);
        if (security.hasDefined(ModelKeys.AUTHORIZATION)) {
          writer.writeStartElement(Element.AUTHORIZATION.getLocalName());
          ModelNode authorization=security.get(ModelKeys.AUTHORIZATION,ModelKeys.AUTHORIZATION_NAME);
          this.writeOptional(writer,Attribute.ENABLED,authorization,ModelKeys.ENABLED);
          this.writeOptional(writer,Attribute.MAPPER,authorization,ModelKeys.MAPPER);
          ModelNode roles=authorization.get(ModelKeys.ROLE);
          for (          ModelNode roleNode : roles.asList()) {
            ModelNode role=roleNode.get(0);
            writer.writeStartElement(Element.ROLE.getLocalName());
            AuthorizationRoleResource.NAME.marshallAsAttribute(role,writer);
            this.writeListAsAttribute(writer,Attribute.PERMISSIONS,role,ModelKeys.PERMISSIONS);
            writer.writeEndElement();
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      if (container.get(ModelKeys.LOCAL_CACHE).isDefined()) {
        for (        Property localCacheEntry : container.get(ModelKeys.LOCAL_CACHE).asPropertyList()) {
          String localCacheName=localCacheEntry.getName();
          ModelNode localCache=localCacheEntry.getValue();
          writer.writeStartElement(Element.LOCAL_CACHE.getLocalName());
          writer.writeAttribute(Attribute.NAME.getLocalName(),localCacheName);
          processCommonCacheAttributesElements(writer,localCache);
          writer.writeEndElement();
        }
      }
      if (container.get(ModelKeys.INVALIDATION_CACHE).isDefined()) {
        for (        Property invalidationCacheEntry : container.get(ModelKeys.INVALIDATION_CACHE).asPropertyList()) {
          String invalidationCacheName=invalidationCacheEntry.getName();
          ModelNode invalidationCache=invalidationCacheEntry.getValue();
          writer.writeStartElement(Element.INVALIDATION_CACHE.getLocalName());
          writer.writeAttribute(Attribute.NAME.getLocalName(),invalidationCacheName);
          processCommonClusteredCacheAttributes(writer,invalidationCache);
          processCommonCacheAttributesElements(writer,invalidationCache);
          writer.writeEndElement();
        }
      }
      if (container.get(ModelKeys.REPLICATED_CACHE).isDefined()) {
        for (        Property replicatedCacheEntry : container.get(ModelKeys.REPLICATED_CACHE).asPropertyList()) {
          String replicatedCacheName=replicatedCacheEntry.getName();
          ModelNode replicatedCache=replicatedCacheEntry.getValue();
          writer.writeStartElement(Element.REPLICATED_CACHE.getLocalName());
          writer.writeAttribute(Attribute.NAME.getLocalName(),replicatedCacheName);
          processCommonClusteredCacheAttributes(writer,replicatedCache);
          processCommonCacheAttributesElements(writer,replicatedCache);
          writer.writeEndElement();
        }
      }
      if (container.get(ModelKeys.DISTRIBUTED_CACHE).isDefined()) {
        for (        Property distributedCacheEntry : container.get(ModelKeys.DISTRIBUTED_CACHE).asPropertyList()) {
          String distributedCacheName=distributedCacheEntry.getName();
          ModelNode distributedCache=distributedCacheEntry.getValue();
          writer.writeStartElement(Element.DISTRIBUTED_CACHE.getLocalName());
          writer.writeAttribute(Attribute.NAME.getLocalName(),distributedCacheName);
          this.writeOptional(writer,Attribute.OWNERS,distributedCache,ModelKeys.OWNERS);
          this.writeOptional(writer,Attribute.SEGMENTS,distributedCache,ModelKeys.SEGMENTS);
          this.writeOptional(writer,Attribute.CAPACITY_FACTOR,distributedCache,ModelKeys.CAPACITY_FACTOR);
          this.writeOptional(writer,Attribute.L1_LIFESPAN,distributedCache,ModelKeys.L1_LIFESPAN);
          processCommonClusteredCacheAttributes(writer,distributedCache);
          processCommonCacheAttributesElements(writer,distributedCache);
          writer.writeEndElement();
        }
      }
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}
