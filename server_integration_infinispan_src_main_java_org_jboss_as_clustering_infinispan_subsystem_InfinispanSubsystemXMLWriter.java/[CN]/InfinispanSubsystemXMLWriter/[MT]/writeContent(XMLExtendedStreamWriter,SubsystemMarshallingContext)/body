{
  context.startSubsystemElement(Namespace.CURRENT.getUri(),false);
  ModelNode model=context.getModelNode();
  if (model.isDefined()) {
    for (    Property entry : model.get(ModelKeys.CACHE_CONTAINER).asPropertyList()) {
      String containerName=entry.getName();
      ModelNode container=entry.getValue();
      writer.writeStartElement(Element.CACHE_CONTAINER.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),containerName);
      this.writeListAsAttribute(writer,Attribute.ALIASES,container,ModelKeys.ALIASES);
      this.writeOptional(writer,Attribute.DEFAULT_CACHE,container,ModelKeys.DEFAULT_CACHE);
      this.writeOptional(writer,Attribute.JNDI_NAME,container,ModelKeys.JNDI_NAME);
      this.writeOptional(writer,Attribute.START,container,ModelKeys.START);
      this.writeOptional(writer,Attribute.MODULE,container,ModelKeys.MODULE);
      this.writeOptional(writer,Attribute.STATISTICS,container,ModelKeys.STATISTICS);
      if (container.hasDefined(ModelKeys.TRANSPORT)) {
        writer.writeStartElement(Element.TRANSPORT.getLocalName());
        ModelNode transport=container.get(ModelKeys.TRANSPORT,ModelKeys.TRANSPORT_NAME);
        this.writeOptional(writer,Attribute.CHANNEL,transport,ModelKeys.CHANNEL);
        this.writeOptional(writer,Attribute.LOCK_TIMEOUT,transport,ModelKeys.LOCK_TIMEOUT);
        this.writeOptional(writer,Attribute.STRICT_PEER_TO_PEER,transport,ModelKeys.STRICT_PEER_TO_PEER);
        writer.writeEndElement();
      }
      if (container.hasDefined(ModelKeys.SECURITY)) {
        writer.writeStartElement(Element.SECURITY.getLocalName());
        ModelNode security=container.get(ModelKeys.SECURITY,ModelKeys.SECURITY_NAME);
        if (security.hasDefined(ModelKeys.AUTHORIZATION)) {
          writer.writeStartElement(Element.AUTHORIZATION.getLocalName());
          ModelNode authorization=security.get(ModelKeys.AUTHORIZATION,ModelKeys.AUTHORIZATION_NAME);
          if (authorization.hasDefined(ModelKeys.MAPPER)) {
            String mapper=authorization.get(ModelKeys.MAPPER).asString();
            if (CommonNameRoleMapper.class.getName().equals(mapper)) {
              writer.writeEmptyElement(Element.COMMON_NAME_ROLE_MAPPER.getLocalName());
            }
 else             if (ClusterRoleMapper.class.getName().equals(mapper)) {
              writer.writeEmptyElement(Element.CLUSTER_ROLE_MAPPER.getLocalName());
            }
 else             if (IdentityRoleMapper.class.getName().equals(mapper)) {
              writer.writeEmptyElement(Element.IDENTITY_ROLE_MAPPER.getLocalName());
            }
 else {
              writer.writeStartElement(Element.CUSTOM_ROLE_MAPPER.getLocalName());
              writer.writeAttribute(Attribute.CLASS.getLocalName(),mapper);
              writer.writeEndElement();
            }
          }
          ModelNode roles=authorization.get(ModelKeys.ROLE);
          for (          ModelNode roleNode : roles.asList()) {
            ModelNode role=roleNode.get(0);
            writer.writeStartElement(Element.ROLE.getLocalName());
            AuthorizationRoleResource.NAME.marshallAsAttribute(role,writer);
            this.writeListAsAttribute(writer,Attribute.PERMISSIONS,role,ModelKeys.PERMISSIONS);
            writer.writeEndElement();
          }
          writer.writeEndElement();
        }
        writer.writeEndElement();
      }
      if (container.hasDefined(ModelKeys.STATE_PERSISTENCE)) {
        writer.writeStartElement(Element.STATE_PERSISTENCE.getLocalName());
        ModelNode statePersistence=container.get(ModelKeys.STATE_PERSISTENCE,ModelKeys.STATE_PERSISTENCE_NAME);
        this.writeOptional(writer,Attribute.RELATIVE_TO,statePersistence,ModelKeys.RELATIVE_TO);
        this.writeOptional(writer,Attribute.PATH,statePersistence,ModelKeys.PATH);
        writer.writeEndElement();
      }
      if (container.hasDefined(ThreadPoolResource.WILDCARD_PATH.getKey())) {
        writeThreadPoolElements(Element.ASYNC_OPERATIONS_THREAD_POOL,ThreadPoolResource.ASYNC_OPERATIONS,writer,container);
        writeThreadPoolElements(Element.LISTENER_THREAD_POOL,ThreadPoolResource.LISTENER,writer,container);
        writeThreadPoolElements(Element.PERSISTENCE_THREAD_POOL,ThreadPoolResource.PERSISTENCE,writer,container);
        writeThreadPoolElements(Element.REMOTE_COMMAND_THREAD_POOL,ThreadPoolResource.REMOTE_COMMAND,writer,container);
        writeThreadPoolElements(Element.STATE_TRANSFER_THREAD_POOL,ThreadPoolResource.STATE_TRANSFER,writer,container);
        writeThreadPoolElements(Element.TRANSPORT_THREAD_POOL,ThreadPoolResource.TRANSPORT,writer,container);
        writeScheduledThreadPoolElements(Element.EXPIRATION_THREAD_POOL,ScheduledThreadPoolResource.EXPIRATION,writer,container);
        writeScheduledThreadPoolElements(Element.REPLICATION_QUEUE_THREAD_POOL,ScheduledThreadPoolResource.REPLICATION_QUEUE,writer,container);
      }
      ModelNode configurations=container.get(ModelKeys.CONFIGURATIONS,ModelKeys.CONFIGURATIONS_NAME);
      processCacheConfiguration(writer,container,configurations,ModelKeys.LOCAL_CACHE);
      processCacheConfiguration(writer,container,configurations,ModelKeys.INVALIDATION_CACHE);
      processCacheConfiguration(writer,container,configurations,ModelKeys.REPLICATED_CACHE);
      processCacheConfiguration(writer,container,configurations,ModelKeys.DISTRIBUTED_CACHE);
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}
