{
  waitForClusterToForm(SHARED_COUNTER_TEST_CACHE_NAME);
  final Cache<String,Integer> c1=cache(0,SHARED_COUNTER_TEST_CACHE_NAME);
  final Cache<String,Integer> c2=cache(1,SHARED_COUNTER_TEST_CACHE_NAME);
  c1.put(SHARED_COUNTER_TEST_KEY,0);
  assertEquals("Initial value is different from zero in cache 1",0,(int)c1.get(SHARED_COUNTER_TEST_KEY));
  assertEquals("Initial value is different from zero in cache 2",0,(int)c2.get(SHARED_COUNTER_TEST_KEY));
  final Set<Integer> uniqueValuesIncremented=new ConcurrentSkipListSet<Integer>();
  Future<Boolean> f1=fork(new IncrementCounterTask(c1,uniqueValuesIncremented));
  Future<Boolean> f2=fork(new IncrementCounterTask(c2,uniqueValuesIncremented));
  try {
    assertTrue("Cache 1 [" + address(c1) + "] has put a duplicate value",f1.get(30,TimeUnit.SECONDS));
    assertTrue("Cache 2 [" + address(c2) + "] has put a duplicate value",f2.get(30,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    fail("Interrupted exception while running the test");
  }
catch (  ExecutionException e) {
    log.error("Exception in running updater threads",e);
    fail("Exception running updater threads");
  }
catch (  TimeoutException e) {
    fail("Timed out waiting for updater threads");
  }
 finally {
    f1.cancel(true);
    f2.cancel(true);
  }
  assertTrue("Cache 1 [" + address(c1) + "] fina value is less than "+ SHARED_COUNTER_TEST_MAX_COUNTER_VALUE,c1.get(SHARED_COUNTER_TEST_KEY) >= SHARED_COUNTER_TEST_MAX_COUNTER_VALUE);
  assertTrue("Cache 2 [" + address(c2) + "] fina value is less than "+ SHARED_COUNTER_TEST_MAX_COUNTER_VALUE,c2.get(SHARED_COUNTER_TEST_KEY) >= SHARED_COUNTER_TEST_MAX_COUNTER_VALUE);
}
