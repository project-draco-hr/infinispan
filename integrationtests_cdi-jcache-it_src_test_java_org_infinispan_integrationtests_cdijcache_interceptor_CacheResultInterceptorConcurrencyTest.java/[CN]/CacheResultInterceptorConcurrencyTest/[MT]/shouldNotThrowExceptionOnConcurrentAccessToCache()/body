{
  final int numberOfThreads=100;
  final AtomicReference<Exception> throwableHolder=new AtomicReference<>();
  final CyclicBarrier counter=new CyclicBarrier(numberOfThreads);
  ExecutorService executorService=Executors.newFixedThreadPool(numberOfThreads);
  for (int i=0; i < numberOfThreads; ++i) {
    executorService.execute(new Runnable(){
      @Override public void run(){
        try {
          counter.await();
          service.cacheResult("Thread ");
        }
 catch (        Exception t) {
          throwableHolder.set(t);
        }
      }
    }
);
  }
  executorService.shutdown();
  if (!executorService.awaitTermination(10,TimeUnit.SECONDS)) {
    fail("Executor didn't finish all his tasks!");
  }
  if (throwableHolder.get() != null) {
    throw throwableHolder.get();
  }
}
