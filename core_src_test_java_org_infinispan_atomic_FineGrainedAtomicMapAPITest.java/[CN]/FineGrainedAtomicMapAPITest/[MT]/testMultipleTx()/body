{
  final Cache<String,Object> cache1=cache(0,"atomic");
  final Cache<String,Object> cache2=cache(1,"atomic");
  final TransactionManager tm1=tm(cache1);
  final FineGrainedAtomicMap<String,String> map1=getFineGrainedAtomicMap(cache1,"testMultipleTx",true);
  final FineGrainedAtomicMap<String,String> map2=getFineGrainedAtomicMap(cache2,"testMultipleTx",false);
  Map<Object,Object> expectedMap=Collections.emptyMap();
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
  tm1.begin();
  map1.put("k1","initial");
  tm1.commit();
  expectedMap=createMap(new Object[]{"k1"},new Object[]{"initial"});
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
  tm1.begin();
  map1.put("k1","v1");
  map1.put("k2","v2");
  map1.put("k3","v3");
  tm1.commit();
  expectedMap=createMap(new Object[]{"k1","k2","k3"},new Object[]{"v1","v2","v3"});
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
  tm1.begin();
  map1.put("k4","v4");
  map1.put("k5","v5");
  map1.put("k6","v6");
  tm1.commit();
  expectedMap=createMap(new Object[]{"k1","k2","k3","k4","k5","k6"},new Object[]{"v1","v2","v3","v4","v5","v6"});
  assertMap(expectedMap,map1);
  assertMap(expectedMap,map2);
}
