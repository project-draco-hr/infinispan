{
  final Cache<String,Object> cache1=cache(0,"atomic");
  final Cache<String,Object> cache2=cache(1,"atomic");
  FineGrainedAtomicMap<String,String> map=getFineGrainedAtomicMap(cache1,"testReadUncommittedValues");
  tm(cache1).begin();
  map.put("key one","value one");
  map.put("blah","blah");
  Map<Object,Object> expectedMap=createMap(new Object[]{"key one","blah"},new Object[]{"value one","blah"});
  assertMap(expectedMap,map);
  FineGrainedAtomicMap<String,String> sameAsMap=getFineGrainedAtomicMap(cache1,"testReadUncommittedValues");
  assertMap(expectedMap,sameAsMap);
  tm(cache1).commit();
  assertMap(expectedMap,map);
  assertMap(expectedMap,sameAsMap);
  expectedMap=createMap(new Object[]{"blah"},new Object[]{"blah"});
  tm(cache1).begin();
  map=getFineGrainedAtomicMap(cache1,"testReadUncommittedValues");
  String removed=map.remove("key one");
  assertEquals("Wrong value removed.","value one",removed);
  assertNotContainsKey(map,"key one");
  assertNotContainsValue(map,"value one");
  System.out.println(map.values());
  assertMap(expectedMap,map);
  tm(cache1).commit();
  map=getFineGrainedAtomicMap(cache1,"testReadUncommittedValues");
  removed=map.remove("key one");
  assertNull("Wrong value removed.",removed);
  assertNotContainsKey(map,"key one");
  assertNotContainsValue(map,"value one");
  assertMap(expectedMap,map);
  expectedMap=createMap(new Object[]{"key one","blah"},new Object[]{"value one","blah"});
  tm(cache1).begin();
  map=getFineGrainedAtomicMap(cache1,"testReadUncommittedValues");
  map.put("key one","value one");
  tm(cache1).commit();
  assertMap(expectedMap,map);
  expectedMap=createMap(new Object[]{"key one","blah"},new Object[]{"value two","blah"});
  tm(cache1).begin();
  map=getFineGrainedAtomicMap(cache1,"testReadUncommittedValues");
  map.put("key one","value two");
  assertNotContainsValue(map,"value one");
  assertMap(expectedMap,map);
  tm(cache1).commit();
  map=getFineGrainedAtomicMap(cache1,"testReadUncommittedValues");
  assertNotContainsValue(map,"value one");
  assertMap(expectedMap,map);
}
