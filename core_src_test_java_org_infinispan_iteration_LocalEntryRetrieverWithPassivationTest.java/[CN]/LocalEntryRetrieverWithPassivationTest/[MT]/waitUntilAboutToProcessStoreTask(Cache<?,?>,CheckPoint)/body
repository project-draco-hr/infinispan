{
  PersistenceManager pm=TestingUtil.extractComponent(cache,PersistenceManager.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(pm);
  PersistenceManager mockManager=mock(PersistenceManager.class,withSettings().defaultAnswer(forwardedAnswer));
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      checkPoint.trigger("pre_process_on_all_stores_invoked");
      checkPoint.awaitStrict("pre_process_on_all_stores_released",10,TimeUnit.SECONDS);
      return forwardedAnswer.answer(invocation);
    }
  }
).when(mockManager).processOnAllStores(any(Executor.class),any(KeyFilter.class),any(AdvancedCacheLoader.CacheLoaderTask.class),anyBoolean(),anyBoolean());
  TestingUtil.replaceComponent(cache,PersistenceManager.class,mockManager,true);
  return pm;
}
