{
  return new BeanBuilder<RemoteCacheManager>(beanManager).beanClass(InfinispanExtensionRemote.class).addTypes(Object.class,RemoteCacheManager.class).scope(ApplicationScoped.class).qualifiers(DefaultLiteral.INSTANCE,AnyLiteral.INSTANCE).passivationCapable(true).id(InfinispanExtensionRemote.class.getSimpleName() + "#" + RemoteCacheManager.class.getSimpleName()).beanLifecycle(new ContextualLifecycle<RemoteCacheManager>(){
    @Override public RemoteCacheManager create(    Bean<RemoteCacheManager> bean,    CreationalContext<RemoteCacheManager> creationalContext){
      return new RemoteCacheManager();
    }
    @Override public void destroy(    Bean<RemoteCacheManager> bean,    RemoteCacheManager instance,    CreationalContext<RemoteCacheManager> creationalContext){
      instance.stop();
    }
  }
).create();
}
