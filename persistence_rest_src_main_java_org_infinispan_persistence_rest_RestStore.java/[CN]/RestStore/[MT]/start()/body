{
  if (iceFactory == null) {
    iceFactory=ctx.getCache().getAdvancedCache().getComponentRegistry().getComponent(InternalEntryFactory.class);
  }
  ConnectionPoolConfiguration pool=configuration.connectionPool();
  workerGroup=new NioEventLoopGroup();
  Bootstrap b=new Bootstrap().group(workerGroup).channel(NioSocketChannel.class);
  b.handler(new ChannelInitializer<SocketChannel>(){
    @Override protected void initChannel(    SocketChannel ch){
      ch.pipeline().addLast(new HttpClientCodec());
    }
  }
);
  b.option(ChannelOption.SO_KEEPALIVE,true);
  b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,pool.connectionTimeout());
  b.option(ChannelOption.SO_SNDBUF,pool.bufferSize());
  b.option(ChannelOption.SO_RCVBUF,pool.bufferSize());
  b.option(ChannelOption.TCP_NODELAY,pool.tcpNoDelay());
  bootstrap=b;
  maxContentLength=10 * 1024 * 1024;
  this.key2StringMapper=Util.getInstance(configuration.key2StringMapper(),ctx.getCache().getAdvancedCache().getClassLoader());
  this.key2StringMapper.setMarshaller(ctx.getMarshaller());
  this.path=configuration.path();
  try {
    if (configuration.appendCacheNameToPath()) {
      path=path + urlCodec.encode(ctx.getCache().getName()) + "/";
    }
  }
 catch (  EncoderException e) {
  }
  this.metadataHelper=Util.getInstance(configuration.metadataHelper(),ctx.getCache().getAdvancedCache().getClassLoader());
}
