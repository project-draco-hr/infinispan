{
  StateTransferLock sc=TestingUtil.extractComponent(cache,StateTransferLock.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(sc);
  StateTransferLock mockConsumer=mock(StateTransferLock.class,withSettings().defaultAnswer(forwardedAnswer));
  TestingUtil.replaceComponent(cache,StateTransferLock.class,mockConsumer,true);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Object answer=forwardedAnswer.answer(invocation);
      checkPoint.trigger("post_topology_installed_invoked_" + cache);
      checkPoint.awaitStrict("post_topology_installed_released_" + cache,10,TimeUnit.SECONDS);
      return answer;
    }
  }
).when(mockConsumer).notifyTopologyInstalled(anyInt());
}
