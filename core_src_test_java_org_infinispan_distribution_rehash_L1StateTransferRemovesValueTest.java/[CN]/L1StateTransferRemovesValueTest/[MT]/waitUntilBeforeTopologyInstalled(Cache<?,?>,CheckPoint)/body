{
  StateConsumer sc=TestingUtil.extractComponent(cache,StateConsumer.class);
  final Answer<Object> forwardedAnswer=AdditionalAnswers.delegatesTo(sc);
  StateConsumer mockConsumer=mock(StateConsumer.class,withSettings().defaultAnswer(forwardedAnswer));
  TestingUtil.replaceComponent(cache,StateConsumer.class,mockConsumer,true);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      checkPoint.trigger("pre_topology_installed_invoked_" + cache);
      checkPoint.awaitStrict("pre_topology_installed_released_" + cache,10,TimeUnit.SECONDS);
      return forwardedAnswer.answer(invocation);
    }
  }
).when(mockConsumer).onTopologyUpdate(any(CacheTopology.class),anyBoolean());
}
