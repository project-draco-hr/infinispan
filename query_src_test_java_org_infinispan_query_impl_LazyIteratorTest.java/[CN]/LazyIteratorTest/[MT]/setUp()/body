{
  cache=createMock(AdvancedCache.class);
  expect(cache.get(anyObject())).andAnswer(new IAnswer<Person>(){
    public Person answer() throws Throwable {
      String key=getCurrentArguments()[0].toString();
      return dummyDataMap.get(key);
    }
  }
).anyTimes();
  expect(cache.getClassLoader()).andReturn(Thread.currentThread().getContextClassLoader()).anyTimes();
  expect(cache.getAdvancedCache()).andReturn(cache).anyTimes();
  extractor=createStrictMock(DocumentExtractor.class);
  HSQuery hsQuery=createMock(HSQuery.class);
  expect(hsQuery.queryDocumentExtractor()).andReturn(extractor).once();
  expect(hsQuery.queryResultSize()).andReturn(dummyDataMap.size()).once();
  expect(extractor.extract(anyInt())).andAnswer(new IAnswer<EntityInfo>(){
    public EntityInfo answer() throws Throwable {
      int index=(Integer)getCurrentArguments()[0];
      String keyString=keyList.get(index);
      return new EntityInfoImpl(Person.class,keyString,keyString,new String[0]);
    }
  }
).anyTimes();
  extractor.close();
  expectLastCall().once();
  EasyMock.replay(cache,extractor,hsQuery);
  iterator=new LazyIterator(hsQuery,cache,new KeyTransformationHandler(),fetchSize);
}
