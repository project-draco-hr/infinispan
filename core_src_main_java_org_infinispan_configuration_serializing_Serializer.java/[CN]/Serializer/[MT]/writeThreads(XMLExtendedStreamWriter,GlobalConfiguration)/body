{
  writer.writeStartElement(Element.THREADS);
  ConcurrentMap<String,DefaultThreadFactory> threadFactories=CollectionFactory.makeConcurrentMap();
  for (  ThreadPoolConfiguration threadPoolConfiguration : Arrays.asList(globalConfiguration.expirationThreadPool(),globalConfiguration.listenerThreadPool(),globalConfiguration.persistenceThreadPool(),globalConfiguration.replicationQueueThreadPool(),globalConfiguration.stateTransferThreadPool(),globalConfiguration.transport().remoteCommandThreadPool(),globalConfiguration.transport().transportThreadPool())) {
    ThreadFactory threadFactory=threadPoolConfiguration.threadFactory();
    if (threadFactory instanceof DefaultThreadFactory) {
      DefaultThreadFactory tf=(DefaultThreadFactory)threadFactory;
      threadFactories.putIfAbsent(tf.getName(),tf);
    }
  }
  for (  DefaultThreadFactory threadFactory : threadFactories.values()) {
    writeThreadFactory(writer,threadFactory);
  }
  writeThreadPool(writer,"async-pool",globalConfiguration.asyncThreadPool());
  writeThreadPool(writer,"expiration-pool",globalConfiguration.expirationThreadPool());
  writeThreadPool(writer,"listener-pool",globalConfiguration.listenerThreadPool());
  writeThreadPool(writer,"persistence-pool",globalConfiguration.persistenceThreadPool());
  writeThreadPool(writer,"replication-queue-pool",globalConfiguration.replicationQueueThreadPool());
  writeThreadPool(writer,"state-transfer-pool",globalConfiguration.stateTransferThreadPool());
  writeThreadPool(writer,"remote-command-pool",globalConfiguration.transport().remoteCommandThreadPool());
  writeThreadPool(writer,"transport-pool",globalConfiguration.transport().transportThreadPool());
  writer.writeEndElement();
}
