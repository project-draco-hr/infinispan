{
  final AdvancedCache<String,String> cache1=advancedCache(0,cacheName);
  final AdvancedCache<String,String> cache2=advancedCache(1,cacheName);
  assertNumberOfLoads(cache1,0);
  assertNumberOfLoads(cache2,0);
  final AdvancedCache<String,String> cache1LocalOnly=cache1.withFlags(CACHE_MODE_LOCAL);
  cache1LocalOnly.put("key","value1");
  cache2.withFlags(CACHE_MODE_LOCAL).put("key","value2");
  assertCacheValue(cache1,"key","value1");
  assertCacheValue(cache2,"key","value2");
  assertNumberOfLoads(cache1,1);
  assertNumberOfLoads(cache2,1);
  assertNotSame("CacheStores",getCacheStore(cache1),getCacheStore(cache2));
  cache1.put("nonLocal","value");
  assertCacheValue(cache2,"nonLocal","value");
  assertNumberOfLoads(cache1,2);
  assertNumberOfLoads(cache2,1);
  final AdvancedCache<String,String> cache1SkipRemoteAndStores=cache1LocalOnly.withFlags(SKIP_CACHE_STORE);
  cache1SkipRemoteAndStores.put("again","value");
  assertNumberOfLoads(cache1,2);
  assertNumberOfLoads(cache2,1);
  assertCacheValue(cache1,"again","value");
  assertCacheValue(cache2,"again",null);
  assertNumberOfLoads(cache1,2);
  assertNumberOfLoads(cache2,2);
  assertCacheValue(cache2,"again",null);
  assertNumberOfLoads(cache2,3);
  assertCacheValue(cache2.withFlags(SKIP_CACHE_STORE),"again",null);
  assertNumberOfLoads(cache2,3);
  assertNumberOfLoads(cache1,2);
  assertCacheValue(cache1LocalOnly,"localStored",null);
  assertNumberOfLoads(cache1,3);
}
