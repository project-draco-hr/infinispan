{
  final AdvancedCache<MagicKey,String> cache1=advancedCache(0,cacheName);
  final AdvancedCache<MagicKey,String> cache2=advancedCache(1,cacheName);
  assertNotSame("CacheStores",getCacheStore(cache1),getCacheStore(cache2));
  assertLoadsAndReset(cache1,0,cache2,0);
  final AdvancedCache<MagicKey,String> cache1LocalOnly=cache1.withFlags(CACHE_MODE_LOCAL);
  MagicKey localKey=new MagicKey("local",cache1);
  cache1LocalOnly.put(localKey,"value1");
  assertLoadsAndReset(cache1,1,cache2,0);
  cache2.withFlags(CACHE_MODE_LOCAL).put(localKey,"value2");
  assertLoadsAndReset(cache1,0,cache2,1);
  assertCacheValue(cache1,localKey,"value1");
  assertLoadsAndReset(cache1,0,cache2,0);
  assertCacheValue(cache2,localKey,"value2");
  assertLoadsAndReset(cache1,0,cache2,0);
  MagicKey nonLocalKey=new MagicKey("nonLocal",cache2);
  cache1.put(nonLocalKey,"value");
  int cache1Loads=isTxCache() ? 1 : 0;
  assertLoadsAndReset(cache1,cache1Loads,cache2,1);
  assertCacheValue(cache2,nonLocalKey,"value");
  assertLoadsAndReset(cache1,0,cache2,0);
  final AdvancedCache<MagicKey,String> cache1SkipRemoteAndStores=cache1LocalOnly.withFlags(SKIP_CACHE_LOAD);
  MagicKey localKey2=new MagicKey("local2",cache1);
  cache1SkipRemoteAndStores.put(localKey2,"value");
  assertLoadsAndReset(cache1,0,cache2,0);
  assertCacheValue(cache1,localKey2,"value");
  assertCacheValue(cache2,localKey2,null);
  assertLoadsAndReset(cache1,0,cache2,1);
  assertCacheValue(cache2,localKey2,null);
  assertLoadsAndReset(cache1,0,cache2,1);
  assertCacheValue(cache2.withFlags(SKIP_CACHE_LOAD),localKey2,null);
  assertLoadsAndReset(cache1,0,cache2,0);
  MagicKey localKey3=new MagicKey("local3",cache1);
  assertCacheValue(cache1LocalOnly,localKey3,null);
  assertLoadsAndReset(cache1,1,cache2,0);
}
