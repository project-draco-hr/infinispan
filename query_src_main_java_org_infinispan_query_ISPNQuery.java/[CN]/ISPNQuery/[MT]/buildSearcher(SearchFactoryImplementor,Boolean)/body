{
  Map<Class<?>,DocumentBuilderIndexedEntity<?>> builders=searchFactoryImplementor.getDocumentBuildersIndexedEntities();
  List<DirectoryProvider> targetedDirectories=new ArrayList<DirectoryProvider>();
  Set<String> idFieldNames=new HashSet<String>();
  Similarity searcherSimilarity=null;
  if (indexedTargetedEntities.size() == 0) {
    if (builders.isEmpty()) {
      throw new SearchException("There are no mapped entities. Don't forget to add @Indexed to at least one class.");
    }
    for (    DocumentBuilderIndexedEntity builder : builders.values()) {
      searcherSimilarity=checkSimilarity(searcherSimilarity,builder);
      if (builder.getIdKeywordName() != null) {
        idFieldNames.add(builder.getIdKeywordName());
        allowFieldSelectionInProjection=allowFieldSelectionInProjection && builder.allowFieldSelectionInProjection();
      }
      useFieldCacheOnClassTypes=useFieldCacheOnClassTypes || builder.getFieldCacheOption().contains(FieldCacheType.CLASS);
      populateDirectories(targetedDirectories,builder);
    }
    classesAndSubclasses=null;
  }
 else {
    Set<Class<?>> involvedClasses=new HashSet<Class<?>>(indexedTargetedEntities.size());
    involvedClasses.addAll(indexedTargetedEntities);
    for (    Class<?> clazz : indexedTargetedEntities) {
      DocumentBuilderIndexedEntity<?> builder=builders.get(clazz);
      if (builder != null) {
        involvedClasses.addAll(builder.getMappedSubclasses());
      }
    }
    for (    Class clazz : involvedClasses) {
      DocumentBuilderIndexedEntity builder=builders.get(clazz);
      if (builder == null) {
        throw new SearchException("Not a mapped entity (don't forget to add @Indexed): " + clazz);
      }
      if (builder.getIdKeywordName() != null) {
        idFieldNames.add(builder.getIdKeywordName());
        allowFieldSelectionInProjection=allowFieldSelectionInProjection && builder.allowFieldSelectionInProjection();
      }
      searcherSimilarity=checkSimilarity(searcherSimilarity,builder);
      useFieldCacheOnClassTypes=useFieldCacheOnClassTypes || builder.getFieldCacheOption().contains(FieldCacheType.CLASS);
      populateDirectories(targetedDirectories,builder);
    }
    this.classesAndSubclasses=involvedClasses;
  }
  this.idFieldNames=idFieldNames;
  if (classesAndSubclasses != null) {
    for (    DirectoryProvider dp : targetedDirectories) {
      final Set<Class<?>> classesInDirectoryProvider=searchFactoryImplementor.getClassesInDirectoryProvider(dp);
      if (classesInDirectoryProvider.size() > 1) {
        for (        Class clazz : classesInDirectoryProvider) {
          if (!classesAndSubclasses.contains(clazz)) {
            this.needClassFilterClause=true;
            break;
          }
        }
      }
      if (this.needClassFilterClause) {
        break;
      }
    }
  }
 else {
    Map<Class<?>,DocumentBuilderIndexedEntity<?>> documentBuildersIndexedEntities=searchFactoryImplementor.getDocumentBuildersIndexedEntities();
    this.classesAndSubclasses=documentBuildersIndexedEntities.keySet();
  }
  final DirectoryProvider[] directoryProviders=targetedDirectories.toArray(new DirectoryProvider[targetedDirectories.size()]);
  IndexSearcher is=new IndexSearcher(searchFactoryImplementor.getReaderProvider().openReader(directoryProviders));
  is.setSimilarity(searcherSimilarity);
  final String[] projection=this.projectedFields;
  if (Boolean.TRUE.equals(forceScoring)) {
    return new IndexSearcherWithPayload(is,true,true);
  }
 else   if (Boolean.FALSE.equals(forceScoring)) {
    return new IndexSearcherWithPayload(is,false,false);
  }
 else   if (this.sort != null && projection != null) {
    boolean activate=false;
    for (    String field : projection) {
      if (SCORE.equals(field)) {
        activate=true;
        break;
      }
    }
    if (activate) {
      return new IndexSearcherWithPayload(is,true,false);
    }
  }
  return new IndexSearcherWithPayload(is,false,false);
}
