{
  if (order == DeliverOrder.TOTAL) {
    unexpectedDeliverMode(command,order);
  }
  try {
    final int commandTopologyId=extractCommandTopologyId(command);
    final boolean onExecutorService=executeOnExecutorService(order,command);
    final boolean sync=order.preserveOrder();
    final BlockingRunnable runnable;
switch (command.getCommandId()) {
case PrepareCommand.COMMAND_ID:
case VersionedPrepareCommand.COMMAND_ID:
      if (pessimisticLocking) {
        runnable=createDefaultRunnable(command,reply,commandTopologyId,true,onExecutorService,sync);
      }
 else {
        runnable=createReadyActionRunnable(command,reply,commandTopologyId,true,onExecutorService,sync,createReadyAction(commandTopologyId,(PrepareCommand)command));
      }
    break;
case LockControlCommand.COMMAND_ID:
  runnable=createReadyActionRunnable(command,reply,commandTopologyId,true,onExecutorService,sync,createReadyAction(commandTopologyId,(LockControlCommand)command));
break;
default :
runnable=createDefaultRunnable(command,reply,commandTopologyId,command.getCommandId() != StateRequestCommand.COMMAND_ID,onExecutorService,sync);
break;
}
handleRunnable(runnable,onExecutorService);
}
 catch (Throwable throwable) {
reply.reply(exceptionHandlingCommand(command,throwable));
}
}
