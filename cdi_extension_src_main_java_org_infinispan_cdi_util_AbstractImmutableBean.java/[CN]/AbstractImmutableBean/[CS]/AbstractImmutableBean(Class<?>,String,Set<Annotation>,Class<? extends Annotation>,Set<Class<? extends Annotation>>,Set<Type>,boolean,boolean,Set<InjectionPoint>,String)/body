{
  if (beanClass == null) {
    throw new IllegalArgumentException("beanClass cannot be null");
  }
  this.beanClass=beanClass;
  this.name=name;
  if (qualifiers == null) {
    this.qualifiers=Collections.<Annotation>singleton(DefaultLiteral.INSTANCE);
    log.trace("No qualifers provided for bean class " + beanClass + ", using singleton set of @Default");
  }
 else {
    this.qualifiers=new HashSet<Annotation>(qualifiers);
  }
  if (scope == null) {
    this.scope=Dependent.class;
    log.trace("No scope provided for bean class " + beanClass + ", using @Dependent");
  }
 else {
    this.scope=scope;
  }
  if (stereotypes == null) {
    this.stereotypes=Collections.emptySet();
  }
 else {
    this.stereotypes=new HashSet<Class<? extends Annotation>>(stereotypes);
  }
  if (types == null) {
    this.types=Arrays2.<Type>asSet(Object.class,beanClass);
    log.trace("No types provided for bean class " + beanClass + ", using [java.lang.Object.class, "+ beanClass.getName()+ ".class]");
  }
 else {
    this.types=new HashSet<Type>(types);
  }
  if (injectionPoints == null) {
    this.injectionPoints=Collections.emptySet();
  }
 else {
    this.injectionPoints=new HashSet<InjectionPoint>(injectionPoints);
  }
  this.alternative=alternative;
  this.nullable=nullable;
  if (toString != null) {
    this.toString=toString;
  }
 else {
    this.toString="Custom Bean with bean class " + beanClass + " and qualifiers "+ qualifiers;
  }
}
