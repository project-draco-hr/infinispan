{
  int hashSpace=10240;
  Collection<Hash> functions=getHashFunctions();
  System.out.printf("%s %s %s %s %s %n%n",padString("Function",25),padString("Greatest dist",15),padString("Smallest dist",15),padString("Mean dist",15),padString("Positions",15));
  for (  Hash f : functions) {
    List<Address> addresses=new LinkedList<Address>();
    for (int i=0; i < numAddresses; i++)     addresses.add(generateAddress());
    SortedMap<Integer,Address> positions=new TreeMap<Integer,Address>();
    for (    Address a : addresses)     positions.put(f.hash(a.hashCode()) % hashSpace,a);
    System.out.printf("%s %s %s %s %s %n%n",padString(f.getClass().getSimpleName(),25),padString(greatestDist(positions,hashSpace),15),padString(smallestDist(positions,hashSpace),15),padString(meanDist(positions,hashSpace),15),"-");
  }
  System.out.printf("%s %s %s %s %s %n%n",padString("Perfectly Balanced",25),padString("-",15),padString("-",15),padString(Integer.toString(hashSpace / numAddresses),15),"-");
}
