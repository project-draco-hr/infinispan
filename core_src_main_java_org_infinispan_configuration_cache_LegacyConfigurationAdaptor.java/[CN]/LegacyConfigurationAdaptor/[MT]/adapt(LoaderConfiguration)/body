{
  CacheLoaderConfig clc=null;
  if (loader instanceof StoreConfiguration) {
    if (loader instanceof FileCacheStoreConfiguration) {
      FileCacheStoreConfig fcsc=new FileCacheStoreConfig();
      clc=fcsc;
      FileCacheStoreConfiguration store=(FileCacheStoreConfiguration)loader;
      if (store.location() != null) {
        fcsc.location(store.location());
      }
      if (store.fsyncMode() != null) {
        fcsc.fsyncMode(FileCacheStoreConfig.FsyncMode.valueOf(store.fsyncMode().name()));
      }
      fcsc.fsyncInterval(store.fsyncInterval());
      fcsc.streamBufferSize(store.streamBufferSize());
    }
 else     if (loader instanceof LegacyStoreConfiguration) {
      LegacyStoreConfiguration store=(LegacyStoreConfiguration)loader;
      CacheLoader cacheStore=store.cacheStore();
      clc=getLoaderConfig(loader,cacheStore);
    }
    CacheStoreConfig csc=(CacheStoreConfig)clc;
    StoreConfiguration store=(StoreConfiguration)loader;
    csc.fetchPersistentState(store.fetchPersistentState());
    csc.ignoreModifications(store.ignoreModifications());
    csc.purgeOnStartup(store.purgeOnStartup());
    csc.setPurgeSynchronously(store.purgeSynchronously());
    csc.getAsyncStoreConfig().setEnabled(store.async().enabled());
    csc.getAsyncStoreConfig().flushLockTimeout(store.async().flushLockTimeout());
    csc.getAsyncStoreConfig().modificationQueueSize(store.async().modificationQueueSize());
    csc.getAsyncStoreConfig().shutdownTimeout(store.async().shutdownTimeout());
    csc.getAsyncStoreConfig().threadPoolSize(store.async().threadPoolSize());
    csc.getSingletonStoreConfig().enabled(store.singletonStore().enabled());
    csc.getSingletonStoreConfig().pushStateTimeout(store.singletonStore().pushStateTimeout());
    csc.getSingletonStoreConfig().pushStateWhenCoordinator(store.singletonStore().pushStateWhenCoordinator());
  }
 else   if (loader instanceof LegacyLoaderConfiguration) {
    CacheLoader cacheLoader=((LegacyLoaderConfiguration)loader).cacheLoader();
    clc=getLoaderConfig(loader,cacheLoader);
  }
  if (clc instanceof AbstractCacheStoreConfig) {
    AbstractCacheStoreConfig acsc=(AbstractCacheStoreConfig)clc;
    Properties p=loader.properties();
    acsc.setProperties(p);
    if (p != null)     XmlConfigHelper.setValues(clc,p,false,true);
    if (loader instanceof LegacyStoreConfiguration)     acsc.purgerThreads(((LegacyStoreConfiguration)loader).purgerThreads());
  }
 else   if (clc instanceof CacheLoaderConfig) {
    Properties p=loader.properties();
    if (p != null)     XmlConfigHelper.setValues(clc,p,false,true);
  }
  return clc;
}
